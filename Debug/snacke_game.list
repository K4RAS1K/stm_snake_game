
snacke_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032fc  080032fc  0000506c  2**0
                  CONTENTS
  4 .ARM          00000000  080032fc  080032fc  0000506c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080032fc  080032fc  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032fc  080032fc  000042fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003300  08003300  00004300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003304  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000006c  08003370  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08003370  00005238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000058ba  00000000  00000000  00005095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e0  00000000  00000000  0000a94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000052d  00000000  00000000  0000c738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017557  00000000  00000000  0000cc65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000833a  00000000  00000000  000241bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081560  00000000  00000000  0002c4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ada56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d8  00000000  00000000  000ada9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000aff74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031e4 	.word	0x080031e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080031e4 	.word	0x080031e4

0800014c <game_over_wall>:
	uint8_t y0;
	uint8_t x1;
	uint8_t y1;
} Snake;

void game_over_wall(Snake head) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
 8000152:	6078      	str	r0, [r7, #4]
	if (head.x1 < playground[0] || head.x1 > playground[2]) {
 8000154:	79ba      	ldrb	r2, [r7, #6]
 8000156:	4b48      	ldr	r3, [pc, #288]	@ (8000278 <game_over_wall+0x12c>)
 8000158:	781b      	ldrb	r3, [r3, #0]
 800015a:	429a      	cmp	r2, r3
 800015c:	d304      	bcc.n	8000168 <game_over_wall+0x1c>
 800015e:	79ba      	ldrb	r2, [r7, #6]
 8000160:	4b45      	ldr	r3, [pc, #276]	@ (8000278 <game_over_wall+0x12c>)
 8000162:	789b      	ldrb	r3, [r3, #2]
 8000164:	429a      	cmp	r2, r3
 8000166:	d93c      	bls.n	80001e2 <game_over_wall+0x96>
		HAL_Delay(500);
 8000168:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800016c:	f001 f8ee 	bl	800134c <HAL_Delay>
		ST7735_DrawRect(0, 0, 140, 140, ST7735_COLOR_RED);
 8000170:	231f      	movs	r3, #31
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	238c      	movs	r3, #140	@ 0x8c
 8000176:	228c      	movs	r2, #140	@ 0x8c
 8000178:	2100      	movs	r1, #0
 800017a:	2000      	movs	r0, #0
 800017c:	f000 fe9a 	bl	8000eb4 <ST7735_DrawRect>
		ST7735_DrawRect(20, 20, 60, 120, ST7735_COLOR_BLACK);
 8000180:	2300      	movs	r3, #0
 8000182:	9300      	str	r3, [sp, #0]
 8000184:	2378      	movs	r3, #120	@ 0x78
 8000186:	223c      	movs	r2, #60	@ 0x3c
 8000188:	2114      	movs	r1, #20
 800018a:	2014      	movs	r0, #20
 800018c:	f000 fe92 	bl	8000eb4 <ST7735_DrawRect>
		ST7735_DrawRect(30, 30, 50, 110, ST7735_COLOR_RED);
 8000190:	231f      	movs	r3, #31
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	236e      	movs	r3, #110	@ 0x6e
 8000196:	2232      	movs	r2, #50	@ 0x32
 8000198:	211e      	movs	r1, #30
 800019a:	201e      	movs	r0, #30
 800019c:	f000 fe8a 	bl	8000eb4 <ST7735_DrawRect>
		ST7735_DrawRect(30, 30, 60, 50, ST7735_COLOR_RED);
 80001a0:	231f      	movs	r3, #31
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2332      	movs	r3, #50	@ 0x32
 80001a6:	223c      	movs	r2, #60	@ 0x3c
 80001a8:	211e      	movs	r1, #30
 80001aa:	201e      	movs	r0, #30
 80001ac:	f000 fe82 	bl	8000eb4 <ST7735_DrawRect>

		ST7735_DrawRect(70, 20, 120, 120, ST7735_COLOR_BLACK);
 80001b0:	2300      	movs	r3, #0
 80001b2:	9300      	str	r3, [sp, #0]
 80001b4:	2378      	movs	r3, #120	@ 0x78
 80001b6:	2278      	movs	r2, #120	@ 0x78
 80001b8:	2114      	movs	r1, #20
 80001ba:	2046      	movs	r0, #70	@ 0x46
 80001bc:	f000 fe7a 	bl	8000eb4 <ST7735_DrawRect>
		ST7735_DrawRect(80, 30, 110, 110, ST7735_COLOR_RED);
 80001c0:	231f      	movs	r3, #31
 80001c2:	9300      	str	r3, [sp, #0]
 80001c4:	236e      	movs	r3, #110	@ 0x6e
 80001c6:	226e      	movs	r2, #110	@ 0x6e
 80001c8:	211e      	movs	r1, #30
 80001ca:	2050      	movs	r0, #80	@ 0x50
 80001cc:	f000 fe72 	bl	8000eb4 <ST7735_DrawRect>
		while (1) {
			ST7735_DrawRect(30, 30, 50, 50, ST7735_COLOR_RED);
 80001d0:	231f      	movs	r3, #31
 80001d2:	9300      	str	r3, [sp, #0]
 80001d4:	2332      	movs	r3, #50	@ 0x32
 80001d6:	2232      	movs	r2, #50	@ 0x32
 80001d8:	211e      	movs	r1, #30
 80001da:	201e      	movs	r0, #30
 80001dc:	f000 fe6a 	bl	8000eb4 <ST7735_DrawRect>
 80001e0:	e7f6      	b.n	80001d0 <game_over_wall+0x84>
		}
	} else if (head.y1 < playground[1] || head.y1 > playground[3]) {
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <game_over_wall+0x12c>)
 80001e6:	785b      	ldrb	r3, [r3, #1]
 80001e8:	429a      	cmp	r2, r3
 80001ea:	d304      	bcc.n	80001f6 <game_over_wall+0xaa>
 80001ec:	79fa      	ldrb	r2, [r7, #7]
 80001ee:	4b22      	ldr	r3, [pc, #136]	@ (8000278 <game_over_wall+0x12c>)
 80001f0:	78db      	ldrb	r3, [r3, #3]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d93c      	bls.n	8000270 <game_over_wall+0x124>
		HAL_Delay(500);
 80001f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001fa:	f001 f8a7 	bl	800134c <HAL_Delay>
		ST7735_DrawRect(0, 0, 140, 140, ST7735_COLOR_RED);
 80001fe:	231f      	movs	r3, #31
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	238c      	movs	r3, #140	@ 0x8c
 8000204:	228c      	movs	r2, #140	@ 0x8c
 8000206:	2100      	movs	r1, #0
 8000208:	2000      	movs	r0, #0
 800020a:	f000 fe53 	bl	8000eb4 <ST7735_DrawRect>
		ST7735_DrawRect(20, 20, 60, 120, ST7735_COLOR_BLACK);
 800020e:	2300      	movs	r3, #0
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2378      	movs	r3, #120	@ 0x78
 8000214:	223c      	movs	r2, #60	@ 0x3c
 8000216:	2114      	movs	r1, #20
 8000218:	2014      	movs	r0, #20
 800021a:	f000 fe4b 	bl	8000eb4 <ST7735_DrawRect>
		ST7735_DrawRect(30, 30, 50, 110, ST7735_COLOR_RED);
 800021e:	231f      	movs	r3, #31
 8000220:	9300      	str	r3, [sp, #0]
 8000222:	236e      	movs	r3, #110	@ 0x6e
 8000224:	2232      	movs	r2, #50	@ 0x32
 8000226:	211e      	movs	r1, #30
 8000228:	201e      	movs	r0, #30
 800022a:	f000 fe43 	bl	8000eb4 <ST7735_DrawRect>
		ST7735_DrawRect(30, 30, 60, 50, ST7735_COLOR_RED);
 800022e:	231f      	movs	r3, #31
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2332      	movs	r3, #50	@ 0x32
 8000234:	223c      	movs	r2, #60	@ 0x3c
 8000236:	211e      	movs	r1, #30
 8000238:	201e      	movs	r0, #30
 800023a:	f000 fe3b 	bl	8000eb4 <ST7735_DrawRect>

		ST7735_DrawRect(70, 20, 120, 120, ST7735_COLOR_BLACK);
 800023e:	2300      	movs	r3, #0
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	2378      	movs	r3, #120	@ 0x78
 8000244:	2278      	movs	r2, #120	@ 0x78
 8000246:	2114      	movs	r1, #20
 8000248:	2046      	movs	r0, #70	@ 0x46
 800024a:	f000 fe33 	bl	8000eb4 <ST7735_DrawRect>
		ST7735_DrawRect(80, 30, 110, 110, ST7735_COLOR_RED);
 800024e:	231f      	movs	r3, #31
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	236e      	movs	r3, #110	@ 0x6e
 8000254:	226e      	movs	r2, #110	@ 0x6e
 8000256:	211e      	movs	r1, #30
 8000258:	2050      	movs	r0, #80	@ 0x50
 800025a:	f000 fe2b 	bl	8000eb4 <ST7735_DrawRect>
		while (1) {
			ST7735_DrawRect(30, 30, 50, 50, ST7735_COLOR_RED);
 800025e:	231f      	movs	r3, #31
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2332      	movs	r3, #50	@ 0x32
 8000264:	2232      	movs	r2, #50	@ 0x32
 8000266:	211e      	movs	r1, #30
 8000268:	201e      	movs	r0, #30
 800026a:	f000 fe23 	bl	8000eb4 <ST7735_DrawRect>
 800026e:	e7f6      	b.n	800025e <game_over_wall+0x112>

		}
	}
}
 8000270:	bf00      	nop
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000000 	.word	0x20000000

0800027c <game_over_tail>:

void game_over_tail(Snake head, Snake *body, uint16_t body_size) {
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af02      	add	r7, sp, #8
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	4613      	mov	r3, r2
 8000288:	80fb      	strh	r3, [r7, #6]
    for (uint16_t i = 0; i < body_size; i++) {
 800028a:	2300      	movs	r3, #0
 800028c:	82fb      	strh	r3, [r7, #22]
 800028e:	e05f      	b.n	8000350 <game_over_tail+0xd4>
        if ((head.x0 == body[i].x0 && head.y0 == body[i].y0) || (head.x1 == body[i].x1 && head.y1 == body[i].y1)) {
 8000290:	7b3a      	ldrb	r2, [r7, #12]
 8000292:	8afb      	ldrh	r3, [r7, #22]
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	68b9      	ldr	r1, [r7, #8]
 8000298:	440b      	add	r3, r1
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	429a      	cmp	r2, r3
 800029e:	d107      	bne.n	80002b0 <game_over_tail+0x34>
 80002a0:	7b7a      	ldrb	r2, [r7, #13]
 80002a2:	8afb      	ldrh	r3, [r7, #22]
 80002a4:	009b      	lsls	r3, r3, #2
 80002a6:	68b9      	ldr	r1, [r7, #8]
 80002a8:	440b      	add	r3, r1
 80002aa:	785b      	ldrb	r3, [r3, #1]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d00f      	beq.n	80002d0 <game_over_tail+0x54>
 80002b0:	7bba      	ldrb	r2, [r7, #14]
 80002b2:	8afb      	ldrh	r3, [r7, #22]
 80002b4:	009b      	lsls	r3, r3, #2
 80002b6:	68b9      	ldr	r1, [r7, #8]
 80002b8:	440b      	add	r3, r1
 80002ba:	789b      	ldrb	r3, [r3, #2]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d144      	bne.n	800034a <game_over_tail+0xce>
 80002c0:	7bfa      	ldrb	r2, [r7, #15]
 80002c2:	8afb      	ldrh	r3, [r7, #22]
 80002c4:	009b      	lsls	r3, r3, #2
 80002c6:	68b9      	ldr	r1, [r7, #8]
 80002c8:	440b      	add	r3, r1
 80002ca:	78db      	ldrb	r3, [r3, #3]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	d13c      	bne.n	800034a <game_over_tail+0xce>
            HAL_Delay(500);
 80002d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002d4:	f001 f83a 	bl	800134c <HAL_Delay>
            ST7735_DrawRect(0, 0, 140, 140, ST7735_COLOR_RED);
 80002d8:	231f      	movs	r3, #31
 80002da:	9300      	str	r3, [sp, #0]
 80002dc:	238c      	movs	r3, #140	@ 0x8c
 80002de:	228c      	movs	r2, #140	@ 0x8c
 80002e0:	2100      	movs	r1, #0
 80002e2:	2000      	movs	r0, #0
 80002e4:	f000 fde6 	bl	8000eb4 <ST7735_DrawRect>
            ST7735_DrawRect(20, 20, 60, 120, ST7735_COLOR_BLACK);
 80002e8:	2300      	movs	r3, #0
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2378      	movs	r3, #120	@ 0x78
 80002ee:	223c      	movs	r2, #60	@ 0x3c
 80002f0:	2114      	movs	r1, #20
 80002f2:	2014      	movs	r0, #20
 80002f4:	f000 fdde 	bl	8000eb4 <ST7735_DrawRect>
            ST7735_DrawRect(30, 30, 50, 110, ST7735_COLOR_RED);
 80002f8:	231f      	movs	r3, #31
 80002fa:	9300      	str	r3, [sp, #0]
 80002fc:	236e      	movs	r3, #110	@ 0x6e
 80002fe:	2232      	movs	r2, #50	@ 0x32
 8000300:	211e      	movs	r1, #30
 8000302:	201e      	movs	r0, #30
 8000304:	f000 fdd6 	bl	8000eb4 <ST7735_DrawRect>
            ST7735_DrawRect(30, 30, 60, 50, ST7735_COLOR_RED);
 8000308:	231f      	movs	r3, #31
 800030a:	9300      	str	r3, [sp, #0]
 800030c:	2332      	movs	r3, #50	@ 0x32
 800030e:	223c      	movs	r2, #60	@ 0x3c
 8000310:	211e      	movs	r1, #30
 8000312:	201e      	movs	r0, #30
 8000314:	f000 fdce 	bl	8000eb4 <ST7735_DrawRect>

            ST7735_DrawRect(70, 20, 120, 120, ST7735_COLOR_BLACK);
 8000318:	2300      	movs	r3, #0
 800031a:	9300      	str	r3, [sp, #0]
 800031c:	2378      	movs	r3, #120	@ 0x78
 800031e:	2278      	movs	r2, #120	@ 0x78
 8000320:	2114      	movs	r1, #20
 8000322:	2046      	movs	r0, #70	@ 0x46
 8000324:	f000 fdc6 	bl	8000eb4 <ST7735_DrawRect>
            ST7735_DrawRect(80, 30, 110, 110, ST7735_COLOR_RED);
 8000328:	231f      	movs	r3, #31
 800032a:	9300      	str	r3, [sp, #0]
 800032c:	236e      	movs	r3, #110	@ 0x6e
 800032e:	226e      	movs	r2, #110	@ 0x6e
 8000330:	211e      	movs	r1, #30
 8000332:	2050      	movs	r0, #80	@ 0x50
 8000334:	f000 fdbe 	bl	8000eb4 <ST7735_DrawRect>
            while (1) {
                ST7735_DrawRect(30, 30, 50, 50, ST7735_COLOR_RED);
 8000338:	231f      	movs	r3, #31
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2332      	movs	r3, #50	@ 0x32
 800033e:	2232      	movs	r2, #50	@ 0x32
 8000340:	211e      	movs	r1, #30
 8000342:	201e      	movs	r0, #30
 8000344:	f000 fdb6 	bl	8000eb4 <ST7735_DrawRect>
 8000348:	e7f6      	b.n	8000338 <game_over_tail+0xbc>
    for (uint16_t i = 0; i < body_size; i++) {
 800034a:	8afb      	ldrh	r3, [r7, #22]
 800034c:	3301      	adds	r3, #1
 800034e:	82fb      	strh	r3, [r7, #22]
 8000350:	8afa      	ldrh	r2, [r7, #22]
 8000352:	88fb      	ldrh	r3, [r7, #6]
 8000354:	429a      	cmp	r2, r3
 8000356:	d39b      	bcc.n	8000290 <game_over_tail+0x14>
            }
        }
    }
}
 8000358:	bf00      	nop
 800035a:	bf00      	nop
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}

08000362 <initialize_body>:

Snake* initialize_body() {
 8000362:	b580      	push	{r7, lr}
 8000364:	b082      	sub	sp, #8
 8000366:	af00      	add	r7, sp, #0
	uint8_t size = 2;
 8000368:	2302      	movs	r3, #2
 800036a:	71bb      	strb	r3, [r7, #6]
	Snake *body = malloc(size * sizeof(Snake));
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	4618      	mov	r0, r3
 8000372:	f001 ff03 	bl	800217c <malloc>
 8000376:	4603      	mov	r3, r0
 8000378:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < size; i++) {
 800037a:	2300      	movs	r3, #0
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	e022      	b.n	80003c6 <initialize_body+0x64>
		body[i].x0 = 5 + i;
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	683a      	ldr	r2, [r7, #0]
 8000386:	4413      	add	r3, r2
 8000388:	79fa      	ldrb	r2, [r7, #7]
 800038a:	3205      	adds	r2, #5
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	701a      	strb	r2, [r3, #0]
		body[i].y0 = 5 + i;
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	683a      	ldr	r2, [r7, #0]
 8000396:	4413      	add	r3, r2
 8000398:	79fa      	ldrb	r2, [r7, #7]
 800039a:	3205      	adds	r2, #5
 800039c:	b2d2      	uxtb	r2, r2
 800039e:	705a      	strb	r2, [r3, #1]
		body[i].x1 = 5 + i;
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	009b      	lsls	r3, r3, #2
 80003a4:	683a      	ldr	r2, [r7, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	79fa      	ldrb	r2, [r7, #7]
 80003aa:	3205      	adds	r2, #5
 80003ac:	b2d2      	uxtb	r2, r2
 80003ae:	709a      	strb	r2, [r3, #2]
		body[i].y1 = 5 + i;
 80003b0:	79fb      	ldrb	r3, [r7, #7]
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	683a      	ldr	r2, [r7, #0]
 80003b6:	4413      	add	r3, r2
 80003b8:	79fa      	ldrb	r2, [r7, #7]
 80003ba:	3205      	adds	r2, #5
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = 0; i < size; i++) {
 80003c0:	79fb      	ldrb	r3, [r7, #7]
 80003c2:	3301      	adds	r3, #1
 80003c4:	71fb      	strb	r3, [r7, #7]
 80003c6:	79fa      	ldrb	r2, [r7, #7]
 80003c8:	79bb      	ldrb	r3, [r7, #6]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d3d8      	bcc.n	8000380 <initialize_body+0x1e>
	}
	return body;
 80003ce:	683b      	ldr	r3, [r7, #0]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}

080003d8 <increase_body>:

Snake* increase_body(Snake *body, uint8_t current_size) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	460b      	mov	r3, r1
 80003e2:	70fb      	strb	r3, [r7, #3]
	uint8_t new_size = current_size + 1;
 80003e4:	78fb      	ldrb	r3, [r7, #3]
 80003e6:	3301      	adds	r3, #1
 80003e8:	73bb      	strb	r3, [r7, #14]
	body = realloc(body, new_size * sizeof(Snake));
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4619      	mov	r1, r3
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f001 ffb7 	bl	8002364 <realloc>
 80003f6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = current_size; i < new_size; i++) {
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	73fb      	strb	r3, [r7, #15]
 80003fc:	e036      	b.n	800046c <increase_body+0x94>
		body[i].x0 = body[current_size - 1].x0;
 80003fe:	78fb      	ldrb	r3, [r7, #3]
 8000400:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000404:	3b01      	subs	r3, #1
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	441a      	add	r2, r3
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	009b      	lsls	r3, r3, #2
 8000410:	6879      	ldr	r1, [r7, #4]
 8000412:	440b      	add	r3, r1
 8000414:	7812      	ldrb	r2, [r2, #0]
 8000416:	701a      	strb	r2, [r3, #0]
		body[i].y0 = body[current_size - 1].y0;
 8000418:	78fb      	ldrb	r3, [r7, #3]
 800041a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800041e:	3b01      	subs	r3, #1
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	687a      	ldr	r2, [r7, #4]
 8000424:	441a      	add	r2, r3
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	440b      	add	r3, r1
 800042e:	7852      	ldrb	r2, [r2, #1]
 8000430:	705a      	strb	r2, [r3, #1]
		body[i].x1 = body[current_size - 1].x1;
 8000432:	78fb      	ldrb	r3, [r7, #3]
 8000434:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000438:	3b01      	subs	r3, #1
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	441a      	add	r2, r3
 8000440:	7bfb      	ldrb	r3, [r7, #15]
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	6879      	ldr	r1, [r7, #4]
 8000446:	440b      	add	r3, r1
 8000448:	7892      	ldrb	r2, [r2, #2]
 800044a:	709a      	strb	r2, [r3, #2]
		body[i].y1 = body[current_size - 1].y1;
 800044c:	78fb      	ldrb	r3, [r7, #3]
 800044e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000452:	3b01      	subs	r3, #1
 8000454:	009b      	lsls	r3, r3, #2
 8000456:	687a      	ldr	r2, [r7, #4]
 8000458:	441a      	add	r2, r3
 800045a:	7bfb      	ldrb	r3, [r7, #15]
 800045c:	009b      	lsls	r3, r3, #2
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	440b      	add	r3, r1
 8000462:	78d2      	ldrb	r2, [r2, #3]
 8000464:	70da      	strb	r2, [r3, #3]
	for (uint8_t i = current_size; i < new_size; i++) {
 8000466:	7bfb      	ldrb	r3, [r7, #15]
 8000468:	3301      	adds	r3, #1
 800046a:	73fb      	strb	r3, [r7, #15]
 800046c:	7bfa      	ldrb	r2, [r7, #15]
 800046e:	7bbb      	ldrb	r3, [r7, #14]
 8000470:	429a      	cmp	r2, r3
 8000472:	d3c4      	bcc.n	80003fe <increase_body+0x26>
	}
	return body;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
	...

08000480 <spawn_apple>:

void spawn_apple(uint8_t apple_cords[4]) {
 8000480:	b590      	push	{r4, r7, lr}
 8000482:	b087      	sub	sp, #28
 8000484:	af02      	add	r7, sp, #8
 8000486:	6078      	str	r0, [r7, #4]
	uint8_t apple_x0;
	uint8_t apple_y0;
	if (apple_flag == false) {
 8000488:	4b31      	ldr	r3, [pc, #196]	@ (8000550 <spawn_apple+0xd0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	f083 0301 	eor.w	r3, r3, #1
 8000490:	b2db      	uxtb	r3, r3
 8000492:	2b00      	cmp	r3, #0
 8000494:	d043      	beq.n	800051e <spawn_apple+0x9e>
		apple_x0 = 7 + 5 * (rand() % 24);
 8000496:	f001 ff27 	bl	80022e8 <rand>
 800049a:	4602      	mov	r2, r0
 800049c:	4b2d      	ldr	r3, [pc, #180]	@ (8000554 <spawn_apple+0xd4>)
 800049e:	fb83 1302 	smull	r1, r3, r3, r2
 80004a2:	1099      	asrs	r1, r3, #2
 80004a4:	17d3      	asrs	r3, r2, #31
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	460b      	mov	r3, r1
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	440b      	add	r3, r1
 80004ae:	00db      	lsls	r3, r3, #3
 80004b0:	1ad1      	subs	r1, r2, r3
 80004b2:	b2cb      	uxtb	r3, r1
 80004b4:	461a      	mov	r2, r3
 80004b6:	0092      	lsls	r2, r2, #2
 80004b8:	4413      	add	r3, r2
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	3307      	adds	r3, #7
 80004be:	73fb      	strb	r3, [r7, #15]
		do {
			apple_y0 = 7 + 5 * (rand() % 24);
 80004c0:	f001 ff12 	bl	80022e8 <rand>
 80004c4:	4602      	mov	r2, r0
 80004c6:	4b23      	ldr	r3, [pc, #140]	@ (8000554 <spawn_apple+0xd4>)
 80004c8:	fb83 1302 	smull	r1, r3, r3, r2
 80004cc:	1099      	asrs	r1, r3, #2
 80004ce:	17d3      	asrs	r3, r2, #31
 80004d0:	1ac9      	subs	r1, r1, r3
 80004d2:	460b      	mov	r3, r1
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	440b      	add	r3, r1
 80004d8:	00db      	lsls	r3, r3, #3
 80004da:	1ad1      	subs	r1, r2, r3
 80004dc:	b2cb      	uxtb	r3, r1
 80004de:	461a      	mov	r2, r3
 80004e0:	0092      	lsls	r2, r2, #2
 80004e2:	4413      	add	r3, r2
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	3307      	adds	r3, #7
 80004e8:	73bb      	strb	r3, [r7, #14]
		} while (apple_y0 == apple_x0);
 80004ea:	7bba      	ldrb	r2, [r7, #14]
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	429a      	cmp	r2, r3
 80004f0:	d0e6      	beq.n	80004c0 <spawn_apple+0x40>
		apple_cords[0] = apple_x0;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	7bfa      	ldrb	r2, [r7, #15]
 80004f6:	701a      	strb	r2, [r3, #0]
		apple_cords[1] = apple_y0;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	3301      	adds	r3, #1
 80004fc:	7bba      	ldrb	r2, [r7, #14]
 80004fe:	701a      	strb	r2, [r3, #0]
		apple_cords[2] = apple_x0 + 4;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3302      	adds	r3, #2
 8000504:	7bfa      	ldrb	r2, [r7, #15]
 8000506:	3204      	adds	r2, #4
 8000508:	b2d2      	uxtb	r2, r2
 800050a:	701a      	strb	r2, [r3, #0]
		apple_cords[3] = apple_y0 + 4;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3303      	adds	r3, #3
 8000510:	7bba      	ldrb	r2, [r7, #14]
 8000512:	3204      	adds	r2, #4
 8000514:	b2d2      	uxtb	r2, r2
 8000516:	701a      	strb	r2, [r3, #0]
		apple_flag = true;
 8000518:	4b0d      	ldr	r3, [pc, #52]	@ (8000550 <spawn_apple+0xd0>)
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
	}
	ST7735_DrawRect(apple_cords[0], apple_cords[1], apple_cords[2],
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	3301      	adds	r3, #1
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3302      	adds	r3, #2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	461a      	mov	r2, r3
			apple_cords[3], ST7735_COLOR_RED);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	3303      	adds	r3, #3
 8000538:	781b      	ldrb	r3, [r3, #0]
	ST7735_DrawRect(apple_cords[0], apple_cords[1], apple_cords[2],
 800053a:	461c      	mov	r4, r3
 800053c:	231f      	movs	r3, #31
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	4623      	mov	r3, r4
 8000542:	f000 fcb7 	bl	8000eb4 <ST7735_DrawRect>
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bd90      	pop	{r4, r7, pc}
 800054e:	bf00      	nop
 8000550:	20000088 	.word	0x20000088
 8000554:	2aaaaaab 	.word	0x2aaaaaab

08000558 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000558:	b590      	push	{r4, r7, lr}
 800055a:	b08b      	sub	sp, #44	@ 0x2c
 800055c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800055e:	f000 fe93 	bl	8001288 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000562:	f000 f9db 	bl	800091c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000566:	f000 fa55 	bl	8000a14 <MX_GPIO_Init>
	MX_SPI1_Init();
 800056a:	f000 fa1d 	bl	80009a8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	bool flag_move_right = false;
 800056e:	2300      	movs	r3, #0
 8000570:	77fb      	strb	r3, [r7, #31]
	bool flag_move_left = false;
 8000572:	2300      	movs	r3, #0
 8000574:	77bb      	strb	r3, [r7, #30]
	bool flag_move_down = false;
 8000576:	2300      	movs	r3, #0
 8000578:	777b      	strb	r3, [r7, #29]
	bool flag_move_up = false;
 800057a:	2300      	movs	r3, #0
 800057c:	773b      	strb	r3, [r7, #28]

	int8_t move_num_x0 = 5;
 800057e:	2305      	movs	r3, #5
 8000580:	76fb      	strb	r3, [r7, #27]
	int8_t move_num_x1 = 5;
 8000582:	2305      	movs	r3, #5
 8000584:	76bb      	strb	r3, [r7, #26]
	int8_t move_num_y0 = 0;
 8000586:	2300      	movs	r3, #0
 8000588:	767b      	strb	r3, [r7, #25]
	int8_t move_num_y1 = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	763b      	strb	r3, [r7, #24]

	uint8_t apple_cords[4];

	ST7735_Init();
 800058e:	f000 fb1f 	bl	8000bd0 <ST7735_Init>

	ST7735_DrawRect(0, 0, 140, 140, ST7735_COLOR_BLACK);
 8000592:	2300      	movs	r3, #0
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	238c      	movs	r3, #140	@ 0x8c
 8000598:	228c      	movs	r2, #140	@ 0x8c
 800059a:	2100      	movs	r1, #0
 800059c:	2000      	movs	r0, #0
 800059e:	f000 fc89 	bl	8000eb4 <ST7735_DrawRect>
	ST7735_DrawRect(playground[0], playground[1], playground[2], playground[3],
 80005a2:	4bba      	ldr	r3, [pc, #744]	@ (800088c <main+0x334>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	4618      	mov	r0, r3
 80005a8:	4bb8      	ldr	r3, [pc, #736]	@ (800088c <main+0x334>)
 80005aa:	785b      	ldrb	r3, [r3, #1]
 80005ac:	4619      	mov	r1, r3
 80005ae:	4bb7      	ldr	r3, [pc, #732]	@ (800088c <main+0x334>)
 80005b0:	789b      	ldrb	r3, [r3, #2]
 80005b2:	461a      	mov	r2, r3
 80005b4:	4bb5      	ldr	r3, [pc, #724]	@ (800088c <main+0x334>)
 80005b6:	78db      	ldrb	r3, [r3, #3]
 80005b8:	461c      	mov	r4, r3
 80005ba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4623      	mov	r3, r4
 80005c2:	f000 fc77 	bl	8000eb4 <ST7735_DrawRect>
	ST7735_COLOR_WHITE);

	Snake head;

	head.x0 = 72;
 80005c6:	2348      	movs	r3, #72	@ 0x48
 80005c8:	713b      	strb	r3, [r7, #4]
	head.y0 = 72;
 80005ca:	2348      	movs	r3, #72	@ 0x48
 80005cc:	717b      	strb	r3, [r7, #5]
	head.x1 = 76;
 80005ce:	234c      	movs	r3, #76	@ 0x4c
 80005d0:	71bb      	strb	r3, [r7, #6]
	head.y1 = 76;
 80005d2:	234c      	movs	r3, #76	@ 0x4c
 80005d4:	71fb      	strb	r3, [r7, #7]

	Snake *body = initialize_body();
 80005d6:	f7ff fec4 	bl	8000362 <initialize_body>
 80005da:	6178      	str	r0, [r7, #20]

	Snake after_tail;

	after_tail.x0 = 15;
 80005dc:	230f      	movs	r3, #15
 80005de:	703b      	strb	r3, [r7, #0]
	after_tail.y0 = 15;
 80005e0:	230f      	movs	r3, #15
 80005e2:	707b      	strb	r3, [r7, #1]
	after_tail.x1 = 15;
 80005e4:	230f      	movs	r3, #15
 80005e6:	70bb      	strb	r3, [r7, #2]
	after_tail.y1 = 15;
 80005e8:	230f      	movs	r3, #15
 80005ea:	70fb      	strb	r3, [r7, #3]

	uint16_t body_size = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	827b      	strh	r3, [r7, #18]

	uint8_t move_num = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	747b      	strb	r3, [r7, #17]

	uint8_t delay_num = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	743b      	strb	r3, [r7, #16]
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (ReadKey1 == 1) {
 80005f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fc:	48a4      	ldr	r0, [pc, #656]	@ (8000890 <main+0x338>)
 80005fe:	f001 f929 	bl	8001854 <HAL_GPIO_ReadPin>
 8000602:	4603      	mov	r3, r0
 8000604:	2b01      	cmp	r3, #1
 8000606:	d101      	bne.n	800060c <main+0xb4>
			move_num = 3; // move_up
 8000608:	2303      	movs	r3, #3
 800060a:	747b      	strb	r3, [r7, #17]
		}
		if (ReadKey2 == 1) {
 800060c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000610:	489f      	ldr	r0, [pc, #636]	@ (8000890 <main+0x338>)
 8000612:	f001 f91f 	bl	8001854 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	2b01      	cmp	r3, #1
 800061a:	d101      	bne.n	8000620 <main+0xc8>
			move_num = 0; // move_right
 800061c:	2300      	movs	r3, #0
 800061e:	747b      	strb	r3, [r7, #17]
		}
		if (ReadKey3 == 1) {
 8000620:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000624:	489a      	ldr	r0, [pc, #616]	@ (8000890 <main+0x338>)
 8000626:	f001 f915 	bl	8001854 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b01      	cmp	r3, #1
 800062e:	d101      	bne.n	8000634 <main+0xdc>
			move_num = 2; // move_down
 8000630:	2302      	movs	r3, #2
 8000632:	747b      	strb	r3, [r7, #17]
		}
		if (ReadKey4 == 1) {
 8000634:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000638:	4895      	ldr	r0, [pc, #596]	@ (8000890 <main+0x338>)
 800063a:	f001 f90b 	bl	8001854 <HAL_GPIO_ReadPin>
 800063e:	4603      	mov	r3, r0
 8000640:	2b01      	cmp	r3, #1
 8000642:	d101      	bne.n	8000648 <main+0xf0>
			move_num = 1; // move_left
 8000644:	2301      	movs	r3, #1
 8000646:	747b      	strb	r3, [r7, #17]
		}

		delay_num = delay_num + 1;
 8000648:	7c3b      	ldrb	r3, [r7, #16]
 800064a:	3301      	adds	r3, #1
 800064c:	743b      	strb	r3, [r7, #16]

		if (delay_num == 5) {
 800064e:	7c3b      	ldrb	r3, [r7, #16]
 8000650:	2b05      	cmp	r3, #5
 8000652:	f040 815e 	bne.w	8000912 <main+0x3ba>

			if (head.x0 == apple_cords[0] && head.y0 == apple_cords[1]) {
 8000656:	793a      	ldrb	r2, [r7, #4]
 8000658:	7a3b      	ldrb	r3, [r7, #8]
 800065a:	429a      	cmp	r2, r3
 800065c:	d110      	bne.n	8000680 <main+0x128>
 800065e:	797a      	ldrb	r2, [r7, #5]
 8000660:	7a7b      	ldrb	r3, [r7, #9]
 8000662:	429a      	cmp	r2, r3
 8000664:	d10c      	bne.n	8000680 <main+0x128>
				apple_flag = false;
 8000666:	4b8b      	ldr	r3, [pc, #556]	@ (8000894 <main+0x33c>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
				body = increase_body(body, body_size);
 800066c:	8a7b      	ldrh	r3, [r7, #18]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4619      	mov	r1, r3
 8000672:	6978      	ldr	r0, [r7, #20]
 8000674:	f7ff feb0 	bl	80003d8 <increase_body>
 8000678:	6178      	str	r0, [r7, #20]
				body_size = body_size + 1;
 800067a:	8a7b      	ldrh	r3, [r7, #18]
 800067c:	3301      	adds	r3, #1
 800067e:	827b      	strh	r3, [r7, #18]
			}

			spawn_apple(apple_cords);
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	4618      	mov	r0, r3
 8000686:	f7ff fefb 	bl	8000480 <spawn_apple>

			ST7735_DrawRect(after_tail.x0, after_tail.y0, after_tail.x1,
 800068a:	783b      	ldrb	r3, [r7, #0]
 800068c:	4618      	mov	r0, r3
 800068e:	787b      	ldrb	r3, [r7, #1]
 8000690:	4619      	mov	r1, r3
 8000692:	78bb      	ldrb	r3, [r7, #2]
 8000694:	461a      	mov	r2, r3
					after_tail.y1, ST7735_COLOR_WHITE);
 8000696:	78fb      	ldrb	r3, [r7, #3]
			ST7735_DrawRect(after_tail.x0, after_tail.y0, after_tail.x1,
 8000698:	461c      	mov	r4, r3
 800069a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	4623      	mov	r3, r4
 80006a2:	f000 fc07 	bl	8000eb4 <ST7735_DrawRect>
			for (uint16_t i = 0; i < body_size; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	81fb      	strh	r3, [r7, #14]
 80006aa:	e021      	b.n	80006f0 <main+0x198>
				ST7735_DrawRect(body[i].x0, body[i].y0, body[i].x1, body[i].y1,
 80006ac:	89fb      	ldrh	r3, [r7, #14]
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	697a      	ldr	r2, [r7, #20]
 80006b2:	4413      	add	r3, r2
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	89fb      	ldrh	r3, [r7, #14]
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	697a      	ldr	r2, [r7, #20]
 80006be:	4413      	add	r3, r2
 80006c0:	785b      	ldrb	r3, [r3, #1]
 80006c2:	4619      	mov	r1, r3
 80006c4:	89fb      	ldrh	r3, [r7, #14]
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	4413      	add	r3, r2
 80006cc:	789b      	ldrb	r3, [r3, #2]
 80006ce:	461c      	mov	r4, r3
 80006d0:	89fb      	ldrh	r3, [r7, #14]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	697a      	ldr	r2, [r7, #20]
 80006d6:	4413      	add	r3, r2
 80006d8:	78db      	ldrb	r3, [r3, #3]
 80006da:	461a      	mov	r2, r3
 80006dc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4613      	mov	r3, r2
 80006e4:	4622      	mov	r2, r4
 80006e6:	f000 fbe5 	bl	8000eb4 <ST7735_DrawRect>
			for (uint16_t i = 0; i < body_size; i++) {
 80006ea:	89fb      	ldrh	r3, [r7, #14]
 80006ec:	3301      	adds	r3, #1
 80006ee:	81fb      	strh	r3, [r7, #14]
 80006f0:	89fa      	ldrh	r2, [r7, #14]
 80006f2:	8a7b      	ldrh	r3, [r7, #18]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d3d9      	bcc.n	80006ac <main+0x154>
				ST7735_COLOR_GREEN);
			}
			ST7735_DrawRect(head.x0, head.y0, head.x1, head.y1,
 80006f8:	793b      	ldrb	r3, [r7, #4]
 80006fa:	4618      	mov	r0, r3
 80006fc:	797b      	ldrb	r3, [r7, #5]
 80006fe:	4619      	mov	r1, r3
 8000700:	79bb      	ldrb	r3, [r7, #6]
 8000702:	461a      	mov	r2, r3
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	461c      	mov	r4, r3
 8000708:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	4623      	mov	r3, r4
 8000710:	f000 fbd0 	bl	8000eb4 <ST7735_DrawRect>
			ST7735_COLOR_BLUE);

			after_tail.x0 = body[0].x0;
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	703b      	strb	r3, [r7, #0]
			after_tail.y0 = body[0].y0;
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	785b      	ldrb	r3, [r3, #1]
 800071e:	707b      	strb	r3, [r7, #1]
			after_tail.x1 = body[0].x1;
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	789b      	ldrb	r3, [r3, #2]
 8000724:	70bb      	strb	r3, [r7, #2]
			after_tail.y1 = body[0].y1;
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	78db      	ldrb	r3, [r3, #3]
 800072a:	70fb      	strb	r3, [r7, #3]

			for (uint16_t i = 0; i < body_size - 1; i++) {
 800072c:	2300      	movs	r3, #0
 800072e:	81bb      	strh	r3, [r7, #12]
 8000730:	e02e      	b.n	8000790 <main+0x238>
				body[i].x0 = body[i + 1].x0;
 8000732:	89bb      	ldrh	r3, [r7, #12]
 8000734:	3301      	adds	r3, #1
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	441a      	add	r2, r3
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	6979      	ldr	r1, [r7, #20]
 8000742:	440b      	add	r3, r1
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	701a      	strb	r2, [r3, #0]
				body[i].y0 = body[i + 1].y0;
 8000748:	89bb      	ldrh	r3, [r7, #12]
 800074a:	3301      	adds	r3, #1
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	697a      	ldr	r2, [r7, #20]
 8000750:	441a      	add	r2, r3
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	6979      	ldr	r1, [r7, #20]
 8000758:	440b      	add	r3, r1
 800075a:	7852      	ldrb	r2, [r2, #1]
 800075c:	705a      	strb	r2, [r3, #1]
				body[i].x1 = body[i + 1].x1;
 800075e:	89bb      	ldrh	r3, [r7, #12]
 8000760:	3301      	adds	r3, #1
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	441a      	add	r2, r3
 8000768:	89bb      	ldrh	r3, [r7, #12]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	6979      	ldr	r1, [r7, #20]
 800076e:	440b      	add	r3, r1
 8000770:	7892      	ldrb	r2, [r2, #2]
 8000772:	709a      	strb	r2, [r3, #2]
				body[i].y1 = body[i + 1].y1;
 8000774:	89bb      	ldrh	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	697a      	ldr	r2, [r7, #20]
 800077c:	441a      	add	r2, r3
 800077e:	89bb      	ldrh	r3, [r7, #12]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	6979      	ldr	r1, [r7, #20]
 8000784:	440b      	add	r3, r1
 8000786:	78d2      	ldrb	r2, [r2, #3]
 8000788:	70da      	strb	r2, [r3, #3]
			for (uint16_t i = 0; i < body_size - 1; i++) {
 800078a:	89bb      	ldrh	r3, [r7, #12]
 800078c:	3301      	adds	r3, #1
 800078e:	81bb      	strh	r3, [r7, #12]
 8000790:	89ba      	ldrh	r2, [r7, #12]
 8000792:	8a7b      	ldrh	r3, [r7, #18]
 8000794:	3b01      	subs	r3, #1
 8000796:	429a      	cmp	r2, r3
 8000798:	dbcb      	blt.n	8000732 <main+0x1da>
			}

			body[body_size - 1].x0 = head.x0;
 800079a:	8a7b      	ldrh	r3, [r7, #18]
 800079c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80007a0:	3b01      	subs	r3, #1
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	697a      	ldr	r2, [r7, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	793a      	ldrb	r2, [r7, #4]
 80007aa:	701a      	strb	r2, [r3, #0]
			body[body_size - 1].y0 = head.y0;
 80007ac:	8a7b      	ldrh	r3, [r7, #18]
 80007ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80007b2:	3b01      	subs	r3, #1
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	4413      	add	r3, r2
 80007ba:	797a      	ldrb	r2, [r7, #5]
 80007bc:	705a      	strb	r2, [r3, #1]
			body[body_size - 1].x1 = head.x1;
 80007be:	8a7b      	ldrh	r3, [r7, #18]
 80007c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80007c4:	3b01      	subs	r3, #1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	4413      	add	r3, r2
 80007cc:	79ba      	ldrb	r2, [r7, #6]
 80007ce:	709a      	strb	r2, [r3, #2]
			body[body_size - 1].y1 = head.y1;
 80007d0:	8a7b      	ldrh	r3, [r7, #18]
 80007d2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80007d6:	3b01      	subs	r3, #1
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	4413      	add	r3, r2
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	70da      	strb	r2, [r3, #3]

			switch (move_num) {
 80007e2:	7c7b      	ldrb	r3, [r7, #17]
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d875      	bhi.n	80008d4 <main+0x37c>
 80007e8:	a201      	add	r2, pc, #4	@ (adr r2, 80007f0 <main+0x298>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000801 	.word	0x08000801
 80007f4:	0800082f 	.word	0x0800082f
 80007f8:	0800085d 	.word	0x0800085d
 80007fc:	08000899 	.word	0x08000899
			case 0: //move_right
				if (flag_move_left == false) {
 8000800:	7fbb      	ldrb	r3, [r7, #30]
 8000802:	f083 0301 	eor.w	r3, r3, #1
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d05c      	beq.n	80008c6 <main+0x36e>
					move_num_x0 = 5;
 800080c:	2305      	movs	r3, #5
 800080e:	76fb      	strb	r3, [r7, #27]
					move_num_x1 = 5;
 8000810:	2305      	movs	r3, #5
 8000812:	76bb      	strb	r3, [r7, #26]
					move_num_y0 = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	767b      	strb	r3, [r7, #25]
					move_num_y1 = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	763b      	strb	r3, [r7, #24]

					flag_move_right = true;
 800081c:	2301      	movs	r3, #1
 800081e:	77fb      	strb	r3, [r7, #31]
					flag_move_left = false;
 8000820:	2300      	movs	r3, #0
 8000822:	77bb      	strb	r3, [r7, #30]
					flag_move_down = false;
 8000824:	2300      	movs	r3, #0
 8000826:	777b      	strb	r3, [r7, #29]
					flag_move_up = false;
 8000828:	2300      	movs	r3, #0
 800082a:	773b      	strb	r3, [r7, #28]
				}
				break;
 800082c:	e04b      	b.n	80008c6 <main+0x36e>
			case 1: //move_left
				if (flag_move_right == false) {
 800082e:	7ffb      	ldrb	r3, [r7, #31]
 8000830:	f083 0301 	eor.w	r3, r3, #1
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d047      	beq.n	80008ca <main+0x372>
					move_num_x0 = -5;
 800083a:	23fb      	movs	r3, #251	@ 0xfb
 800083c:	76fb      	strb	r3, [r7, #27]
					move_num_x1 = -5;
 800083e:	23fb      	movs	r3, #251	@ 0xfb
 8000840:	76bb      	strb	r3, [r7, #26]
					move_num_y0 = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	767b      	strb	r3, [r7, #25]
					move_num_y1 = 0;
 8000846:	2300      	movs	r3, #0
 8000848:	763b      	strb	r3, [r7, #24]

					flag_move_right = false;
 800084a:	2300      	movs	r3, #0
 800084c:	77fb      	strb	r3, [r7, #31]
					flag_move_left = true;
 800084e:	2301      	movs	r3, #1
 8000850:	77bb      	strb	r3, [r7, #30]
					flag_move_down = false;
 8000852:	2300      	movs	r3, #0
 8000854:	777b      	strb	r3, [r7, #29]
					flag_move_up = false;
 8000856:	2300      	movs	r3, #0
 8000858:	773b      	strb	r3, [r7, #28]
				}
				break;
 800085a:	e036      	b.n	80008ca <main+0x372>
			case 2: //move_down
				if (flag_move_up == false) {
 800085c:	7f3b      	ldrb	r3, [r7, #28]
 800085e:	f083 0301 	eor.w	r3, r3, #1
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b00      	cmp	r3, #0
 8000866:	d032      	beq.n	80008ce <main+0x376>
					move_num_x0 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	76fb      	strb	r3, [r7, #27]
					move_num_x1 = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	76bb      	strb	r3, [r7, #26]
					move_num_y0 = 5;
 8000870:	2305      	movs	r3, #5
 8000872:	767b      	strb	r3, [r7, #25]
					move_num_y1 = 5;
 8000874:	2305      	movs	r3, #5
 8000876:	763b      	strb	r3, [r7, #24]

					flag_move_right = false;
 8000878:	2300      	movs	r3, #0
 800087a:	77fb      	strb	r3, [r7, #31]
					flag_move_left = false;
 800087c:	2300      	movs	r3, #0
 800087e:	77bb      	strb	r3, [r7, #30]
					flag_move_down = true;
 8000880:	2301      	movs	r3, #1
 8000882:	777b      	strb	r3, [r7, #29]
					flag_move_up = false;
 8000884:	2300      	movs	r3, #0
 8000886:	773b      	strb	r3, [r7, #28]
				}
				break;
 8000888:	e021      	b.n	80008ce <main+0x376>
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000
 8000890:	40010800 	.word	0x40010800
 8000894:	20000088 	.word	0x20000088
			case 3: //move_up
				if (flag_move_down == false) {
 8000898:	7f7b      	ldrb	r3, [r7, #29]
 800089a:	f083 0301 	eor.w	r3, r3, #1
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d016      	beq.n	80008d2 <main+0x37a>
					move_num_x0 = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	76fb      	strb	r3, [r7, #27]
					move_num_x1 = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	76bb      	strb	r3, [r7, #26]
					move_num_y0 = -5;
 80008ac:	23fb      	movs	r3, #251	@ 0xfb
 80008ae:	767b      	strb	r3, [r7, #25]
					move_num_y1 = -5;
 80008b0:	23fb      	movs	r3, #251	@ 0xfb
 80008b2:	763b      	strb	r3, [r7, #24]

					flag_move_right = false;
 80008b4:	2300      	movs	r3, #0
 80008b6:	77fb      	strb	r3, [r7, #31]
					flag_move_left = false;
 80008b8:	2300      	movs	r3, #0
 80008ba:	77bb      	strb	r3, [r7, #30]
					flag_move_down = false;
 80008bc:	2300      	movs	r3, #0
 80008be:	777b      	strb	r3, [r7, #29]
					flag_move_up = true;
 80008c0:	2301      	movs	r3, #1
 80008c2:	773b      	strb	r3, [r7, #28]
				}
				break;
 80008c4:	e005      	b.n	80008d2 <main+0x37a>
				break;
 80008c6:	bf00      	nop
 80008c8:	e004      	b.n	80008d4 <main+0x37c>
				break;
 80008ca:	bf00      	nop
 80008cc:	e002      	b.n	80008d4 <main+0x37c>
				break;
 80008ce:	bf00      	nop
 80008d0:	e000      	b.n	80008d4 <main+0x37c>
				break;
 80008d2:	bf00      	nop
			}

			head.x0 = head.x0 + move_num_x0;
 80008d4:	793a      	ldrb	r2, [r7, #4]
 80008d6:	7efb      	ldrb	r3, [r7, #27]
 80008d8:	4413      	add	r3, r2
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	713b      	strb	r3, [r7, #4]
			head.x1 = head.x1 + move_num_x1;
 80008de:	79ba      	ldrb	r2, [r7, #6]
 80008e0:	7ebb      	ldrb	r3, [r7, #26]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	71bb      	strb	r3, [r7, #6]
			head.y0 = head.y0 + move_num_y0;
 80008e8:	797a      	ldrb	r2, [r7, #5]
 80008ea:	7e7b      	ldrb	r3, [r7, #25]
 80008ec:	4413      	add	r3, r2
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	717b      	strb	r3, [r7, #5]
			head.y1 = head.y1 + move_num_y1;
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	7e3b      	ldrb	r3, [r7, #24]
 80008f6:	4413      	add	r3, r2
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	71fb      	strb	r3, [r7, #7]

			game_over_wall(head);
 80008fc:	6878      	ldr	r0, [r7, #4]
 80008fe:	f7ff fc25 	bl	800014c <game_over_wall>
			game_over_tail(head, body, body_size);
 8000902:	8a7b      	ldrh	r3, [r7, #18]
 8000904:	461a      	mov	r2, r3
 8000906:	6979      	ldr	r1, [r7, #20]
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fcb7 	bl	800027c <game_over_tail>

			delay_num = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	743b      	strb	r3, [r7, #16]
		}

		HAL_Delay(20);
 8000912:	2014      	movs	r0, #20
 8000914:	f000 fd1a 	bl	800134c <HAL_Delay>
		if (ReadKey1 == 1) {
 8000918:	e66e      	b.n	80005f8 <main+0xa0>
 800091a:	bf00      	nop

0800091c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	b090      	sub	sp, #64	@ 0x40
 8000920:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000922:	f107 0318 	add.w	r3, r7, #24
 8000926:	2228      	movs	r2, #40	@ 0x28
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f001 fe55 	bl	80025da <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800093e:	2301      	movs	r3, #1
 8000940:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000942:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000946:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000948:	2300      	movs	r3, #0
 800094a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800094c:	2301      	movs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000950:	2302      	movs	r3, #2
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000958:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800095a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800095e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000960:	f107 0318 	add.w	r3, r7, #24
 8000964:	4618      	mov	r0, r3
 8000966:	f000 ffa5 	bl	80018b4 <HAL_RCC_OscConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0x58>
		Error_Handler();
 8000970:	f000 f8aa 	bl	8000ac8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000974:	230f      	movs	r3, #15
 8000976:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000978:	2302      	movs	r3, #2
 800097a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000984:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2102      	movs	r1, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f001 fa12 	bl	8001db8 <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x82>
		Error_Handler();
 800099a:	f000 f895 	bl	8000ac8 <Error_Handler>
	}
}
 800099e:	bf00      	nop
 80009a0:	3740      	adds	r7, #64	@ 0x40
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
	...

080009a8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009ac:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009ae:	4a18      	ldr	r2, [pc, #96]	@ (8000a10 <MX_SPI1_Init+0x68>)
 80009b0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80009b2:	4b16      	ldr	r3, [pc, #88]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009b4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009b8:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009ba:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009c6:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009cc:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d8:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80009da:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009dc:	2208      	movs	r2, #8
 80009de:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e0:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ec:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009f4:	220a      	movs	r2, #10
 80009f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_SPI1_Init+0x64>)
 80009fa:	f001 fb3b 	bl	8002074 <HAL_SPI_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000a04:	f000 f860 	bl	8000ac8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000008c 	.word	0x2000008c
 8000a10:	40013000 	.word	0x40013000

08000a14 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b088      	sub	sp, #32
 8000a18:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a1a:	f107 0310 	add.w	r3, r7, #16
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
 8000a26:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a28:	4b24      	ldr	r3, [pc, #144]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a23      	ldr	r2, [pc, #140]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a2e:	f043 0320 	orr.w	r3, r3, #32
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0320 	and.w	r3, r3, #32
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b1e      	ldr	r3, [pc, #120]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a58:	4b18      	ldr	r3, [pc, #96]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	4a17      	ldr	r2, [pc, #92]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a5e:	f043 0308 	orr.w	r3, r3, #8
 8000a62:	6193      	str	r3, [r2, #24]
 8000a64:	4b15      	ldr	r3, [pc, #84]	@ (8000abc <MX_GPIO_Init+0xa8>)
 8000a66:	699b      	ldr	r3, [r3, #24]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8,
 8000a70:	2200      	movs	r2, #0
 8000a72:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8000a76:	4812      	ldr	r0, [pc, #72]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000a78:	f000 ff03 	bl	8001882 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : move_up_Pin move_right_Pin move_down_Pin move_left_Pin */
	GPIO_InitStruct.Pin = move_up_Pin | move_right_Pin | move_down_Pin
 8000a7c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a80:	613b      	str	r3, [r7, #16]
			| move_left_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	2300      	movs	r3, #0
 8000a84:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 0310 	add.w	r3, r7, #16
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <MX_GPIO_Init+0xb0>)
 8000a92:	f000 fd63 	bl	800155c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB6 PB7 PB8 */
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8;
 8000a96:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000a9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <MX_GPIO_Init+0xac>)
 8000ab0:	f000 fd54 	bl	800155c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab4:	bf00      	nop
 8000ab6:	3720      	adds	r7, #32
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40010800 	.word	0x40010800

08000ac8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
}
 8000ace:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <Error_Handler+0x8>

08000ad4 <ST7735_SendByte>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
void ST7735_SendByte(uint8_t data)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  // HAL_SPI_Transmit(&hspi1, &data, 1, ST7735_SPI_TIMEOUT);
  while((SPI1->SR & SPI_SR_TXE) == RESET);
 8000ade:	bf00      	nop
 8000ae0:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <ST7735_SendByte+0x28>)
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f003 0302 	and.w	r3, r3, #2
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f9      	beq.n	8000ae0 <ST7735_SendByte+0xc>
  SPI1->DR = data;
 8000aec:	4a03      	ldr	r2, [pc, #12]	@ (8000afc <ST7735_SendByte+0x28>)
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	60d3      	str	r3, [r2, #12]
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	40013000 	.word	0x40013000

08000b00 <ST7735_WaitLastData>:



/*----------------------------------------------------------------------------*/
void ST7735_WaitLastData()
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  while((SPI1->SR & SPI_SR_TXE) == RESET);
 8000b04:	bf00      	nop
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <ST7735_WaitLastData+0x2c>)
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f9      	beq.n	8000b06 <ST7735_WaitLastData+0x6>
  while((SPI1->SR & SPI_SR_BSY) != RESET);
 8000b12:	bf00      	nop
 8000b14:	4b05      	ldr	r3, [pc, #20]	@ (8000b2c <ST7735_WaitLastData+0x2c>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1f9      	bne.n	8000b14 <ST7735_WaitLastData+0x14>
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40013000 	.word	0x40013000

08000b30 <ST7735_SendCommand>:



/*----------------------------------------------------------------------------*/
void ST7735_SendCommand(uint8_t data)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2140      	movs	r1, #64	@ 0x40
 8000b3e:	4806      	ldr	r0, [pc, #24]	@ (8000b58 <ST7735_SendCommand+0x28>)
 8000b40:	f000 fe9f 	bl	8001882 <HAL_GPIO_WritePin>
  ST7735_SendByte(data);
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	4618      	mov	r0, r3
 8000b48:	f7ff ffc4 	bl	8000ad4 <ST7735_SendByte>
  ST7735_WaitLastData();
 8000b4c:	f7ff ffd8 	bl	8000b00 <ST7735_WaitLastData>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40010c00 	.word	0x40010c00

08000b5c <ST7735_SendData>:



/*----------------------------------------------------------------------------*/
void ST7735_SendData(uint8_t data)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2140      	movs	r1, #64	@ 0x40
 8000b6a:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <ST7735_SendData+0x28>)
 8000b6c:	f000 fe89 	bl	8001882 <HAL_GPIO_WritePin>
  ST7735_SendByte(data);
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ffae 	bl	8000ad4 <ST7735_SendByte>
  ST7735_WaitLastData();
 8000b78:	f7ff ffc2 	bl	8000b00 <ST7735_WaitLastData>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40010c00 	.word	0x40010c00

08000b88 <ST7735_SendDataMultiple>:



/*----------------------------------------------------------------------------*/
void ST7735_SendDataMultiple(uint8_t *data, uint32_t num)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2140      	movs	r1, #64	@ 0x40
 8000b96:	480d      	ldr	r0, [pc, #52]	@ (8000bcc <ST7735_SendDataMultiple+0x44>)
 8000b98:	f000 fe73 	bl	8001882 <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < num; i++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	e00a      	b.n	8000bb8 <ST7735_SendDataMultiple+0x30>
  {
    ST7735_SendByte(*data);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff94 	bl	8000ad4 <ST7735_SendByte>
    data++;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	607b      	str	r3, [r7, #4]
  for (uint32_t i = 0; i < num; i++)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fa      	ldr	r2, [r7, #12]
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d3f0      	bcc.n	8000ba2 <ST7735_SendDataMultiple+0x1a>
  }

  ST7735_WaitLastData();
 8000bc0:	f7ff ff9e 	bl	8000b00 <ST7735_WaitLastData>
}
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40010c00 	.word	0x40010c00

08000bd0 <ST7735_Init>:



/*----------------------------------------------------------------------------*/
void ST7735_Init()
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  SPI1->CR1 |= SPI_CR1_SPE;
 8000bd4:	4b8f      	ldr	r3, [pc, #572]	@ (8000e14 <ST7735_Init+0x244>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a8e      	ldr	r2, [pc, #568]	@ (8000e14 <ST7735_Init+0x244>)
 8000bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bde:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000be6:	488c      	ldr	r0, [pc, #560]	@ (8000e18 <ST7735_Init+0x248>)
 8000be8:	f000 fe4b 	bl	8001882 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2180      	movs	r1, #128	@ 0x80
 8000bf0:	488a      	ldr	r0, [pc, #552]	@ (8000e1c <ST7735_Init+0x24c>)
 8000bf2:	f000 fe46 	bl	8001882 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000bf6:	2005      	movs	r0, #5
 8000bf8:	f000 fba8 	bl	800134c <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2180      	movs	r1, #128	@ 0x80
 8000c00:	4886      	ldr	r0, [pc, #536]	@ (8000e1c <ST7735_Init+0x24c>)
 8000c02:	f000 fe3e 	bl	8001882 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000c06:	2005      	movs	r0, #5
 8000c08:	f000 fba0 	bl	800134c <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2180      	movs	r1, #128	@ 0x80
 8000c10:	4882      	ldr	r0, [pc, #520]	@ (8000e1c <ST7735_Init+0x24c>)
 8000c12:	f000 fe36 	bl	8001882 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000c16:	2005      	movs	r0, #5
 8000c18:	f000 fb98 	bl	800134c <HAL_Delay>

  ST7735_SendCommand(ST7735_SWRESET);
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f7ff ff87 	bl	8000b30 <ST7735_SendCommand>
  HAL_Delay(150);
 8000c22:	2096      	movs	r0, #150	@ 0x96
 8000c24:	f000 fb92 	bl	800134c <HAL_Delay>

  ST7735_SendCommand(ST7735_SLPOUT);
 8000c28:	2011      	movs	r0, #17
 8000c2a:	f7ff ff81 	bl	8000b30 <ST7735_SendCommand>
  HAL_Delay(500);
 8000c2e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c32:	f000 fb8b 	bl	800134c <HAL_Delay>

  ST7735_SendCommand(ST7735_FRMCTR1);
 8000c36:	20b1      	movs	r0, #177	@ 0xb1
 8000c38:	f7ff ff7a 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff ff8d 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000c42:	202c      	movs	r0, #44	@ 0x2c
 8000c44:	f7ff ff8a 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000c48:	202d      	movs	r0, #45	@ 0x2d
 8000c4a:	f7ff ff87 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_FRMCTR2);
 8000c4e:	20b2      	movs	r0, #178	@ 0xb2
 8000c50:	f7ff ff6e 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 8000c54:	2001      	movs	r0, #1
 8000c56:	f7ff ff81 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000c5a:	202c      	movs	r0, #44	@ 0x2c
 8000c5c:	f7ff ff7e 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000c60:	202d      	movs	r0, #45	@ 0x2d
 8000c62:	f7ff ff7b 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_FRMCTR3);
 8000c66:	20b3      	movs	r0, #179	@ 0xb3
 8000c68:	f7ff ff62 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f7ff ff75 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000c72:	202c      	movs	r0, #44	@ 0x2c
 8000c74:	f7ff ff72 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000c78:	202d      	movs	r0, #45	@ 0x2d
 8000c7a:	f7ff ff6f 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x01);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff ff6c 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000c84:	202c      	movs	r0, #44	@ 0x2c
 8000c86:	f7ff ff69 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000c8a:	202d      	movs	r0, #45	@ 0x2d
 8000c8c:	f7ff ff66 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_INVCTR);
 8000c90:	20b4      	movs	r0, #180	@ 0xb4
 8000c92:	f7ff ff4d 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x07);
 8000c96:	2007      	movs	r0, #7
 8000c98:	f7ff ff60 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR1);
 8000c9c:	20c0      	movs	r0, #192	@ 0xc0
 8000c9e:	f7ff ff47 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0xA2);
 8000ca2:	20a2      	movs	r0, #162	@ 0xa2
 8000ca4:	f7ff ff5a 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x02);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f7ff ff57 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x84);
 8000cae:	2084      	movs	r0, #132	@ 0x84
 8000cb0:	f7ff ff54 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR2);
 8000cb4:	20c1      	movs	r0, #193	@ 0xc1
 8000cb6:	f7ff ff3b 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0xC5);
 8000cba:	20c5      	movs	r0, #197	@ 0xc5
 8000cbc:	f7ff ff4e 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR3);
 8000cc0:	20c2      	movs	r0, #194	@ 0xc2
 8000cc2:	f7ff ff35 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x0A);
 8000cc6:	200a      	movs	r0, #10
 8000cc8:	f7ff ff48 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x00);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff ff45 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR4);
 8000cd2:	20c3      	movs	r0, #195	@ 0xc3
 8000cd4:	f7ff ff2c 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x8A);
 8000cd8:	208a      	movs	r0, #138	@ 0x8a
 8000cda:	f7ff ff3f 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2A);
 8000cde:	202a      	movs	r0, #42	@ 0x2a
 8000ce0:	f7ff ff3c 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR5);
 8000ce4:	20c4      	movs	r0, #196	@ 0xc4
 8000ce6:	f7ff ff23 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x8A);
 8000cea:	208a      	movs	r0, #138	@ 0x8a
 8000cec:	f7ff ff36 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0xEE);
 8000cf0:	20ee      	movs	r0, #238	@ 0xee
 8000cf2:	f7ff ff33 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_VMCTR1);
 8000cf6:	20c5      	movs	r0, #197	@ 0xc5
 8000cf8:	f7ff ff1a 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x0E);
 8000cfc:	200e      	movs	r0, #14
 8000cfe:	f7ff ff2d 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_INVOFF);
 8000d02:	2020      	movs	r0, #32
 8000d04:	f7ff ff14 	bl	8000b30 <ST7735_SendCommand>

  ST7735_SendCommand(ST7735_MADCTL);
 8000d08:	2036      	movs	r0, #54	@ 0x36
 8000d0a:	f7ff ff11 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0xC0);
 8000d0e:	20c0      	movs	r0, #192	@ 0xc0
 8000d10:	f7ff ff24 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_COLMOD);
 8000d14:	203a      	movs	r0, #58	@ 0x3a
 8000d16:	f7ff ff0b 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x05);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f7ff ff1e 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_GMCTRP1);
 8000d20:	20e0      	movs	r0, #224	@ 0xe0
 8000d22:	f7ff ff05 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x02);
 8000d26:	2002      	movs	r0, #2
 8000d28:	f7ff ff18 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x1c);
 8000d2c:	201c      	movs	r0, #28
 8000d2e:	f7ff ff15 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x07);
 8000d32:	2007      	movs	r0, #7
 8000d34:	f7ff ff12 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x12);
 8000d38:	2012      	movs	r0, #18
 8000d3a:	f7ff ff0f 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x37);
 8000d3e:	2037      	movs	r0, #55	@ 0x37
 8000d40:	f7ff ff0c 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x32);
 8000d44:	2032      	movs	r0, #50	@ 0x32
 8000d46:	f7ff ff09 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x29);
 8000d4a:	2029      	movs	r0, #41	@ 0x29
 8000d4c:	f7ff ff06 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2d);
 8000d50:	202d      	movs	r0, #45	@ 0x2d
 8000d52:	f7ff ff03 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x29);
 8000d56:	2029      	movs	r0, #41	@ 0x29
 8000d58:	f7ff ff00 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x25);
 8000d5c:	2025      	movs	r0, #37	@ 0x25
 8000d5e:	f7ff fefd 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2B);
 8000d62:	202b      	movs	r0, #43	@ 0x2b
 8000d64:	f7ff fefa 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x39);
 8000d68:	2039      	movs	r0, #57	@ 0x39
 8000d6a:	f7ff fef7 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x00);
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff fef4 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x01);
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fef1 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x03);
 8000d7a:	2003      	movs	r0, #3
 8000d7c:	f7ff feee 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x10);
 8000d80:	2010      	movs	r0, #16
 8000d82:	f7ff feeb 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_GMCTRN1);
 8000d86:	20e1      	movs	r0, #225	@ 0xe1
 8000d88:	f7ff fed2 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendData(0x03);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f7ff fee5 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x1d);
 8000d92:	201d      	movs	r0, #29
 8000d94:	f7ff fee2 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x07);
 8000d98:	2007      	movs	r0, #7
 8000d9a:	f7ff fedf 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x06);
 8000d9e:	2006      	movs	r0, #6
 8000da0:	f7ff fedc 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2E);
 8000da4:	202e      	movs	r0, #46	@ 0x2e
 8000da6:	f7ff fed9 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000daa:	202c      	movs	r0, #44	@ 0x2c
 8000dac:	f7ff fed6 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x29);
 8000db0:	2029      	movs	r0, #41	@ 0x29
 8000db2:	f7ff fed3 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000db6:	202d      	movs	r0, #45	@ 0x2d
 8000db8:	f7ff fed0 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2E);
 8000dbc:	202e      	movs	r0, #46	@ 0x2e
 8000dbe:	f7ff fecd 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x2E);
 8000dc2:	202e      	movs	r0, #46	@ 0x2e
 8000dc4:	f7ff feca 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x37);
 8000dc8:	2037      	movs	r0, #55	@ 0x37
 8000dca:	f7ff fec7 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x3F);
 8000dce:	203f      	movs	r0, #63	@ 0x3f
 8000dd0:	f7ff fec4 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x00);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fec1 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x00);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff febe 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x02);
 8000de0:	2002      	movs	r0, #2
 8000de2:	f7ff febb 	bl	8000b5c <ST7735_SendData>
  ST7735_SendData(0x10);
 8000de6:	2010      	movs	r0, #16
 8000de8:	f7ff feb8 	bl	8000b5c <ST7735_SendData>

  ST7735_SendCommand(ST7735_NORON);
 8000dec:	2013      	movs	r0, #19
 8000dee:	f7ff fe9f 	bl	8000b30 <ST7735_SendCommand>
  HAL_Delay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f000 faaa 	bl	800134c <HAL_Delay>

  ST7735_SendCommand(ST7735_DISPON);
 8000df8:	2029      	movs	r0, #41	@ 0x29
 8000dfa:	f7ff fe99 	bl	8000b30 <ST7735_SendCommand>
  HAL_Delay(100);
 8000dfe:	2064      	movs	r0, #100	@ 0x64
 8000e00:	f000 faa4 	bl	800134c <HAL_Delay>

  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_SET);
 8000e04:	2201      	movs	r2, #1
 8000e06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e0a:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <ST7735_Init+0x248>)
 8000e0c:	f000 fd39 	bl	8001882 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40013000 	.word	0x40013000
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40010c00 	.word	0x40010c00

08000e20 <ST7735_SetColAddr>:



/*----------------------------------------------------------------------------*/
void ST7735_SetColAddr(uint16_t cStart, uint16_t cStop)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	460a      	mov	r2, r1
 8000e2a:	80fb      	strh	r3, [r7, #6]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	80bb      	strh	r3, [r7, #4]
  uint8_t data[4];

  data[0] = (cStart & 0xFF00) >> 8;
 8000e30:	88fb      	ldrh	r3, [r7, #6]
 8000e32:	0a1b      	lsrs	r3, r3, #8
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	733b      	strb	r3, [r7, #12]
  data[1] = cStart & 0x00FF;
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	737b      	strb	r3, [r7, #13]
  data[2] = (cStop & 0xFF00) >> 8;
 8000e40:	88bb      	ldrh	r3, [r7, #4]
 8000e42:	0a1b      	lsrs	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	73bb      	strb	r3, [r7, #14]
  data[3] = cStop & 0x00FF;
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	73fb      	strb	r3, [r7, #15]

  ST7735_SendCommand(ST7735_CASET);
 8000e50:	202a      	movs	r0, #42	@ 0x2a
 8000e52:	f7ff fe6d 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendDataMultiple(data, 4);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2104      	movs	r1, #4
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe93 	bl	8000b88 <ST7735_SendDataMultiple>
}
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <ST7735_SetRowAddr>:



/*----------------------------------------------------------------------------*/
void ST7735_SetRowAddr(uint16_t rStart, uint16_t rStop)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b084      	sub	sp, #16
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	460a      	mov	r2, r1
 8000e74:	80fb      	strh	r3, [r7, #6]
 8000e76:	4613      	mov	r3, r2
 8000e78:	80bb      	strh	r3, [r7, #4]
  uint8_t data[4];

  data[0] = (rStart & 0xFF00) >> 8;
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	733b      	strb	r3, [r7, #12]
  data[1] = rStart & 0x00FF;
 8000e84:	88fb      	ldrh	r3, [r7, #6]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	737b      	strb	r3, [r7, #13]
  data[2] = (rStop & 0xFF00) >> 8;
 8000e8a:	88bb      	ldrh	r3, [r7, #4]
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	73bb      	strb	r3, [r7, #14]
  data[3] = rStop & 0x00FF;
 8000e94:	88bb      	ldrh	r3, [r7, #4]
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	73fb      	strb	r3, [r7, #15]

  ST7735_SendCommand(ST7735_RASET);
 8000e9a:	202b      	movs	r0, #43	@ 0x2b
 8000e9c:	f7ff fe48 	bl	8000b30 <ST7735_SendCommand>
  ST7735_SendDataMultiple(data, 4);
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fe6e 	bl	8000b88 <ST7735_SendDataMultiple>
}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <ST7735_DrawRect>:



/*----------------------------------------------------------------------------*/
void ST7735_DrawRect(uint16_t cStart, uint16_t rStart, uint16_t cStop, uint16_t rStop, uint16_t color)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4604      	mov	r4, r0
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4623      	mov	r3, r4
 8000ec4:	80fb      	strh	r3, [r7, #6]
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80bb      	strh	r3, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	807b      	strh	r3, [r7, #2]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	803b      	strh	r3, [r7, #0]
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ed8:	4824      	ldr	r0, [pc, #144]	@ (8000f6c <ST7735_DrawRect+0xb8>)
 8000eda:	f000 fcd2 	bl	8001882 <HAL_GPIO_WritePin>
  ST7735_SetColAddr(cStart, cStop - 1);
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	3b01      	subs	r3, #1
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	88fb      	ldrh	r3, [r7, #6]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff99 	bl	8000e20 <ST7735_SetColAddr>
  ST7735_SetRowAddr(rStart, rStop - 1);
 8000eee:	883b      	ldrh	r3, [r7, #0]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	88bb      	ldrh	r3, [r7, #4]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ffb6 	bl	8000e6a <ST7735_SetRowAddr>

  ST7735_SendCommand(ST7735_RAMWR);
 8000efe:	202c      	movs	r0, #44	@ 0x2c
 8000f00:	f7ff fe16 	bl	8000b30 <ST7735_SendCommand>

  uint32_t size = (cStop - cStart) * (rStop - rStart);
 8000f04:	887a      	ldrh	r2, [r7, #2]
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	8839      	ldrh	r1, [r7, #0]
 8000f0c:	88ba      	ldrh	r2, [r7, #4]
 8000f0e:	1a8a      	subs	r2, r1, r2
 8000f10:	fb02 f303 	mul.w	r3, r2, r3
 8000f14:	613b      	str	r3, [r7, #16]
  uint8_t colorBytes[2];
  colorBytes[0] = (color & 0xFF00) >> 8;
 8000f16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f18:	0a1b      	lsrs	r3, r3, #8
 8000f1a:	b29b      	uxth	r3, r3
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	733b      	strb	r3, [r7, #12]
  colorBytes[1] = color & 0x00FF;
 8000f20:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	737b      	strb	r3, [r7, #13]

  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2140      	movs	r1, #64	@ 0x40
 8000f2a:	4811      	ldr	r0, [pc, #68]	@ (8000f70 <ST7735_DrawRect+0xbc>)
 8000f2c:	f000 fca9 	bl	8001882 <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < size; i++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e00a      	b.n	8000f4c <ST7735_DrawRect+0x98>
  {
    ST7735_SendByte(colorBytes[0]);
 8000f36:	7b3b      	ldrb	r3, [r7, #12]
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fdcb 	bl	8000ad4 <ST7735_SendByte>
    ST7735_SendByte(colorBytes[1]);
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fdc7 	bl	8000ad4 <ST7735_SendByte>
  for (uint32_t i = 0; i < size; i++)
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697a      	ldr	r2, [r7, #20]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d3f0      	bcc.n	8000f36 <ST7735_DrawRect+0x82>
  }

  ST7735_WaitLastData();
 8000f54:	f7ff fdd4 	bl	8000b00 <ST7735_WaitLastData>
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <ST7735_DrawRect+0xb8>)
 8000f60:	f000 fc8f 	bl	8001882 <HAL_GPIO_WritePin>
}
 8000f64:	bf00      	nop
 8000f66:	371c      	adds	r7, #28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd90      	pop	{r4, r7, pc}
 8000f6c:	40011000 	.word	0x40011000
 8000f70:	40010c00 	.word	0x40010c00

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_MspInit+0x5c>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <HAL_MspInit+0x5c>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_MspInit+0x5c>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <HAL_MspInit+0x5c>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd0 <HAL_MspInit+0x5c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd0 <HAL_MspInit+0x5c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000faa:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd4 <HAL_MspInit+0x60>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <HAL_MspInit+0x60>)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010000 	.word	0x40010000

08000fd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <HAL_SPI_MspInit+0x70>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d123      	bne.n	8001040 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <HAL_SPI_MspInit+0x74>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a13      	ldr	r2, [pc, #76]	@ (800104c <HAL_SPI_MspInit+0x74>)
 8000ffe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <HAL_SPI_MspInit+0x74>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <HAL_SPI_MspInit+0x74>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <HAL_SPI_MspInit+0x74>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <HAL_SPI_MspInit+0x74>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001028:	23a0      	movs	r3, #160	@ 0xa0
 800102a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102c:	2302      	movs	r3, #2
 800102e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001030:	2303      	movs	r3, #3
 8001032:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	4619      	mov	r1, r3
 800103a:	4805      	ldr	r0, [pc, #20]	@ (8001050 <HAL_SPI_MspInit+0x78>)
 800103c:	f000 fa8e 	bl	800155c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001040:	bf00      	nop
 8001042:	3720      	adds	r7, #32
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40013000 	.word	0x40013000
 800104c:	40021000 	.word	0x40021000
 8001050:	40010800 	.word	0x40010800

08001054 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <NMI_Handler+0x4>

0800105c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <MemManage_Handler+0x4>

0800106c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <UsageFault_Handler+0x4>

0800107c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	bc80      	pop	{r7}
 8001092:	4770      	bx	lr

08001094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f936 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return 1;
 80010b0:	2301      	movs	r3, #1
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr

080010ba <_kill>:

int _kill(int pid, int sig)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010c4:	f001 fae8 	bl	8002698 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2216      	movs	r2, #22
 80010cc:	601a      	str	r2, [r3, #0]
  return -1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_exit>:

void _exit (int status)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010e2:	f04f 31ff 	mov.w	r1, #4294967295
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff ffe7 	bl	80010ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <_exit+0x12>

080010f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	e00a      	b.n	8001118 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001102:	f3af 8000 	nop.w
 8001106:	4601      	mov	r1, r0
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	60ba      	str	r2, [r7, #8]
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf0      	blt.n	8001102 <_read+0x12>
  }

  return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	60f8      	str	r0, [r7, #12]
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	e009      	b.n	8001150 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	60ba      	str	r2, [r7, #8]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	3301      	adds	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	429a      	cmp	r2, r3
 8001156:	dbf1      	blt.n	800113c <_write+0x12>
  }
  return len;
 8001158:	687b      	ldr	r3, [r7, #4]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <_close>:

int _close(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800116e:	4618      	mov	r0, r3
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr

08001178 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001188:	605a      	str	r2, [r3, #4]
  return 0;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr

08001196 <_isatty>:

int _isatty(int file)
{
 8001196:	b480      	push	{r7}
 8001198:	b083      	sub	sp, #12
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800119e:	2301      	movs	r3, #1
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b085      	sub	sp, #20
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	60f8      	str	r0, [r7, #12]
 80011b2:	60b9      	str	r1, [r7, #8]
 80011b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3714      	adds	r7, #20
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	@ (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	@ (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f001 fa50 	bl	8002698 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	@ (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	@ (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20002800 	.word	0x20002800
 8001224:	00000400 	.word	0x00000400
 8001228:	200000e4 	.word	0x200000e4
 800122c:	20000238 	.word	0x20000238

08001230 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800123c:	f7ff fff8 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480b      	ldr	r0, [pc, #44]	@ (8001270 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001242:	490c      	ldr	r1, [pc, #48]	@ (8001274 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001244:	4a0c      	ldr	r2, [pc, #48]	@ (8001278 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a09      	ldr	r2, [pc, #36]	@ (800127c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001258:	4c09      	ldr	r4, [pc, #36]	@ (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f001 fa1d 	bl	80026a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126a:	f7ff f975 	bl	8000558 <main>
  bx lr
 800126e:	4770      	bx	lr
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001278:	08003304 	.word	0x08003304
  ldr r2, =_sbss
 800127c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001280:	20000238 	.word	0x20000238

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <HAL_Init+0x28>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	@ (80012b0 <HAL_Init+0x28>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f92b 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fe66 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	@ (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 f935 	bl	8001542 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 f90b 	bl	800150a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	@ (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000004 	.word	0x20000004
 800130c:	2000000c 	.word	0x2000000c
 8001310:	20000008 	.word	0x20000008

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	@ (8001330 <HAL_IncTick+0x1c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <HAL_IncTick+0x20>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a03      	ldr	r2, [pc, #12]	@ (8001334 <HAL_IncTick+0x20>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	2000000c 	.word	0x2000000c
 8001334:	200000e8 	.word	0x200000e8

08001338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	@ (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	200000e8 	.word	0x200000e8

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fff0 	bl	8001338 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	@ (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffe0 	bl	8001338 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000000c 	.word	0x2000000c

08001394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b0:	4013      	ands	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x44>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000ed00 	.word	0xe000ed00

080013dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e0:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <__NVIC_GetPriorityGrouping+0x18>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	f003 0307 	and.w	r3, r3, #7
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000ed00 	.word	0xe000ed00

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	@ 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f7ff ff90 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff49 	bl	8001394 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff5e 	bl	80013dc <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff90 	bl	800144c <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5f 	bl	80013f8 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffb0 	bl	80014b0 <SysTick_Config>
 8001550:	4603      	mov	r3, r0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800155c:	b480      	push	{r7}
 800155e:	b08b      	sub	sp, #44	@ 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001566:	2300      	movs	r3, #0
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156e:	e161      	b.n	8001834 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001570:	2201      	movs	r2, #1
 8001572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	429a      	cmp	r2, r3
 800158a:	f040 8150 	bne.w	800182e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	4a97      	ldr	r2, [pc, #604]	@ (80017f0 <HAL_GPIO_Init+0x294>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d05e      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 8001598:	4a95      	ldr	r2, [pc, #596]	@ (80017f0 <HAL_GPIO_Init+0x294>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d875      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 800159e:	4a95      	ldr	r2, [pc, #596]	@ (80017f4 <HAL_GPIO_Init+0x298>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d058      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015a4:	4a93      	ldr	r2, [pc, #588]	@ (80017f4 <HAL_GPIO_Init+0x298>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d86f      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015aa:	4a93      	ldr	r2, [pc, #588]	@ (80017f8 <HAL_GPIO_Init+0x29c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d052      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015b0:	4a91      	ldr	r2, [pc, #580]	@ (80017f8 <HAL_GPIO_Init+0x29c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d869      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015b6:	4a91      	ldr	r2, [pc, #580]	@ (80017fc <HAL_GPIO_Init+0x2a0>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d04c      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015bc:	4a8f      	ldr	r2, [pc, #572]	@ (80017fc <HAL_GPIO_Init+0x2a0>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d863      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015c2:	4a8f      	ldr	r2, [pc, #572]	@ (8001800 <HAL_GPIO_Init+0x2a4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d046      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
 80015c8:	4a8d      	ldr	r2, [pc, #564]	@ (8001800 <HAL_GPIO_Init+0x2a4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d85d      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015ce:	2b12      	cmp	r3, #18
 80015d0:	d82a      	bhi.n	8001628 <HAL_GPIO_Init+0xcc>
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d859      	bhi.n	800168a <HAL_GPIO_Init+0x12e>
 80015d6:	a201      	add	r2, pc, #4	@ (adr r2, 80015dc <HAL_GPIO_Init+0x80>)
 80015d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015dc:	08001657 	.word	0x08001657
 80015e0:	08001631 	.word	0x08001631
 80015e4:	08001643 	.word	0x08001643
 80015e8:	08001685 	.word	0x08001685
 80015ec:	0800168b 	.word	0x0800168b
 80015f0:	0800168b 	.word	0x0800168b
 80015f4:	0800168b 	.word	0x0800168b
 80015f8:	0800168b 	.word	0x0800168b
 80015fc:	0800168b 	.word	0x0800168b
 8001600:	0800168b 	.word	0x0800168b
 8001604:	0800168b 	.word	0x0800168b
 8001608:	0800168b 	.word	0x0800168b
 800160c:	0800168b 	.word	0x0800168b
 8001610:	0800168b 	.word	0x0800168b
 8001614:	0800168b 	.word	0x0800168b
 8001618:	0800168b 	.word	0x0800168b
 800161c:	0800168b 	.word	0x0800168b
 8001620:	08001639 	.word	0x08001639
 8001624:	0800164d 	.word	0x0800164d
 8001628:	4a76      	ldr	r2, [pc, #472]	@ (8001804 <HAL_GPIO_Init+0x2a8>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800162e:	e02c      	b.n	800168a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	623b      	str	r3, [r7, #32]
          break;
 8001636:	e029      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	3304      	adds	r3, #4
 800163e:	623b      	str	r3, [r7, #32]
          break;
 8001640:	e024      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	3308      	adds	r3, #8
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e01f      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	330c      	adds	r3, #12
 8001652:	623b      	str	r3, [r7, #32]
          break;
 8001654:	e01a      	b.n	800168c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d102      	bne.n	8001664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800165e:	2304      	movs	r3, #4
 8001660:	623b      	str	r3, [r7, #32]
          break;
 8001662:	e013      	b.n	800168c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d105      	bne.n	8001678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800166c:	2308      	movs	r3, #8
 800166e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69fa      	ldr	r2, [r7, #28]
 8001674:	611a      	str	r2, [r3, #16]
          break;
 8001676:	e009      	b.n	800168c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	615a      	str	r2, [r3, #20]
          break;
 8001682:	e003      	b.n	800168c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
          break;
 8001688:	e000      	b.n	800168c <HAL_GPIO_Init+0x130>
          break;
 800168a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	2bff      	cmp	r3, #255	@ 0xff
 8001690:	d801      	bhi.n	8001696 <HAL_GPIO_Init+0x13a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	e001      	b.n	800169a <HAL_GPIO_Init+0x13e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3304      	adds	r3, #4
 800169a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2bff      	cmp	r3, #255	@ 0xff
 80016a0:	d802      	bhi.n	80016a8 <HAL_GPIO_Init+0x14c>
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x152>
 80016a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016aa:	3b08      	subs	r3, #8
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	210f      	movs	r1, #15
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	6a39      	ldr	r1, [r7, #32]
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	fa01 f303 	lsl.w	r3, r1, r3
 80016c8:	431a      	orrs	r2, r3
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80a9 	beq.w	800182e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001808 <HAL_GPIO_Init+0x2ac>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a49      	ldr	r2, [pc, #292]	@ (8001808 <HAL_GPIO_Init+0x2ac>)
 80016e2:	f043 0301 	orr.w	r3, r3, #1
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b47      	ldr	r3, [pc, #284]	@ (8001808 <HAL_GPIO_Init+0x2ac>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
 80016f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f4:	4a45      	ldr	r2, [pc, #276]	@ (800180c <HAL_GPIO_Init+0x2b0>)
 80016f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f8:	089b      	lsrs	r3, r3, #2
 80016fa:	3302      	adds	r3, #2
 80016fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3d      	ldr	r2, [pc, #244]	@ (8001810 <HAL_GPIO_Init+0x2b4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d00d      	beq.n	800173c <HAL_GPIO_Init+0x1e0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a3c      	ldr	r2, [pc, #240]	@ (8001814 <HAL_GPIO_Init+0x2b8>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d007      	beq.n	8001738 <HAL_GPIO_Init+0x1dc>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a3b      	ldr	r2, [pc, #236]	@ (8001818 <HAL_GPIO_Init+0x2bc>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d101      	bne.n	8001734 <HAL_GPIO_Init+0x1d8>
 8001730:	2302      	movs	r3, #2
 8001732:	e004      	b.n	800173e <HAL_GPIO_Init+0x1e2>
 8001734:	2303      	movs	r3, #3
 8001736:	e002      	b.n	800173e <HAL_GPIO_Init+0x1e2>
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_GPIO_Init+0x1e2>
 800173c:	2300      	movs	r3, #0
 800173e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001740:	f002 0203 	and.w	r2, r2, #3
 8001744:	0092      	lsls	r2, r2, #2
 8001746:	4093      	lsls	r3, r2
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800174e:	492f      	ldr	r1, [pc, #188]	@ (800180c <HAL_GPIO_Init+0x2b0>)
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	089b      	lsrs	r3, r3, #2
 8001754:	3302      	adds	r3, #2
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001768:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	492b      	ldr	r1, [pc, #172]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]
 8001774:	e006      	b.n	8001784 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001776:	4b29      	ldr	r3, [pc, #164]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	43db      	mvns	r3, r3
 800177e:	4927      	ldr	r1, [pc, #156]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 8001780:	4013      	ands	r3, r2
 8001782:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	4921      	ldr	r1, [pc, #132]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800179e:	4b1f      	ldr	r3, [pc, #124]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	491d      	ldr	r1, [pc, #116]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d006      	beq.n	80017c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4917      	ldr	r1, [pc, #92]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4913      	ldr	r1, [pc, #76]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d01f      	beq.n	8001820 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017e0:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	490d      	ldr	r1, [pc, #52]	@ (800181c <HAL_GPIO_Init+0x2c0>)
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
 80017ec:	e01f      	b.n	800182e <HAL_GPIO_Init+0x2d2>
 80017ee:	bf00      	nop
 80017f0:	10320000 	.word	0x10320000
 80017f4:	10310000 	.word	0x10310000
 80017f8:	10220000 	.word	0x10220000
 80017fc:	10210000 	.word	0x10210000
 8001800:	10120000 	.word	0x10120000
 8001804:	10110000 	.word	0x10110000
 8001808:	40021000 	.word	0x40021000
 800180c:	40010000 	.word	0x40010000
 8001810:	40010800 	.word	0x40010800
 8001814:	40010c00 	.word	0x40010c00
 8001818:	40011000 	.word	0x40011000
 800181c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001820:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <HAL_GPIO_Init+0x2f4>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	43db      	mvns	r3, r3
 8001828:	4909      	ldr	r1, [pc, #36]	@ (8001850 <HAL_GPIO_Init+0x2f4>)
 800182a:	4013      	ands	r3, r2
 800182c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	3301      	adds	r3, #1
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183a:	fa22 f303 	lsr.w	r3, r2, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	f47f ae96 	bne.w	8001570 <HAL_GPIO_Init+0x14>
  }
}
 8001844:	bf00      	nop
 8001846:	bf00      	nop
 8001848:	372c      	adds	r7, #44	@ 0x2c
 800184a:	46bd      	mov	sp, r7
 800184c:	bc80      	pop	{r7}
 800184e:	4770      	bx	lr
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e001      	b.n	8001876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]
 800188e:	4613      	mov	r3, r2
 8001890:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001892:	787b      	ldrb	r3, [r7, #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800189e:	e003      	b.n	80018a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	041a      	lsls	r2, r3, #16
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr
	...

080018b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e272      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 8087 	beq.w	80019e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d4:	4b92      	ldr	r3, [pc, #584]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 030c 	and.w	r3, r3, #12
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d00c      	beq.n	80018fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e0:	4b8f      	ldr	r3, [pc, #572]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 030c 	and.w	r3, r3, #12
 80018e8:	2b08      	cmp	r3, #8
 80018ea:	d112      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
 80018ec:	4b8c      	ldr	r3, [pc, #560]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f8:	d10b      	bne.n	8001912 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	4b89      	ldr	r3, [pc, #548]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d06c      	beq.n	80019e0 <HAL_RCC_OscConfig+0x12c>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d168      	bne.n	80019e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e24c      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x76>
 800191c:	4b80      	ldr	r3, [pc, #512]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a7f      	ldr	r2, [pc, #508]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001922:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e02e      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0x98>
 8001932:	4b7b      	ldr	r3, [pc, #492]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a7a      	ldr	r2, [pc, #488]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b78      	ldr	r3, [pc, #480]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a77      	ldr	r2, [pc, #476]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e01d      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001954:	d10c      	bne.n	8001970 <HAL_RCC_OscConfig+0xbc>
 8001956:	4b72      	ldr	r3, [pc, #456]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a71      	ldr	r2, [pc, #452]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800195c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	4b6f      	ldr	r3, [pc, #444]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a6e      	ldr	r2, [pc, #440]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e00b      	b.n	8001988 <HAL_RCC_OscConfig+0xd4>
 8001970:	4b6b      	ldr	r3, [pc, #428]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a6a      	ldr	r2, [pc, #424]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001976:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	4b68      	ldr	r3, [pc, #416]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a67      	ldr	r2, [pc, #412]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001986:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d013      	beq.n	80019b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001990:	f7ff fcd2 	bl	8001338 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f7ff fcce 	bl	8001338 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b64      	cmp	r3, #100	@ 0x64
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e200      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0xe4>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff fcbe 	bl	8001338 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff fcba 	bl	8001338 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1ec      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d2:	4b53      	ldr	r3, [pc, #332]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f0      	bne.n	80019c0 <HAL_RCC_OscConfig+0x10c>
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d063      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ee:	4b4c      	ldr	r3, [pc, #304]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fa:	4b49      	ldr	r3, [pc, #292]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
 8001a06:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b43      	ldr	r3, [pc, #268]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1c0      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4939      	ldr	r1, [pc, #228]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b36      	ldr	r3, [pc, #216]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fc73 	bl	8001338 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fc6f 	bl	8001338 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1a1      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2d      	ldr	r3, [pc, #180]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4927      	ldr	r1, [pc, #156]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a90:	f7ff fc52 	bl	8001338 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fc4e 	bl	8001338 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e180      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03a      	beq.n	8001b38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d019      	beq.n	8001afe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff fc32 	bl	8001338 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff fc2e 	bl	8001338 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e160      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f000 fa9e 	bl	8002038 <RCC_Delay>
 8001afc:	e01c      	b.n	8001b38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_RCC_OscConfig+0x274>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fc18 	bl	8001338 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0a:	e00f      	b.n	8001b2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fc14 	bl	8001338 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d908      	bls.n	8001b2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e146      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000
 8001b24:	42420000 	.word	0x42420000
 8001b28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	4b92      	ldr	r3, [pc, #584]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e9      	bne.n	8001b0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a6 	beq.w	8001c92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b46:	2300      	movs	r3, #0
 8001b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4a:	4b8b      	ldr	r3, [pc, #556]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10d      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b56:	4b88      	ldr	r3, [pc, #544]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	4a87      	ldr	r2, [pc, #540]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	61d3      	str	r3, [r2, #28]
 8001b62:	4b85      	ldr	r3, [pc, #532]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	4b82      	ldr	r3, [pc, #520]	@ (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d118      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a7e      	ldr	r2, [pc, #504]	@ (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8a:	f7ff fbd5 	bl	8001338 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b92:	f7ff fbd1 	bl	8001338 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b64      	cmp	r3, #100	@ 0x64
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e103      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba4:	4b75      	ldr	r3, [pc, #468]	@ (8001d7c <HAL_RCC_OscConfig+0x4c8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x312>
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bba:	6a1b      	ldr	r3, [r3, #32]
 8001bbc:	4a6e      	ldr	r2, [pc, #440]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6213      	str	r3, [r2, #32]
 8001bc4:	e02d      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x334>
 8001bce:	4b6a      	ldr	r3, [pc, #424]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a69      	ldr	r2, [pc, #420]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bd4:	f023 0301 	bic.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b67      	ldr	r3, [pc, #412]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a66      	ldr	r2, [pc, #408]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	e01c      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	d10c      	bne.n	8001c0a <HAL_RCC_OscConfig+0x356>
 8001bf0:	4b61      	ldr	r3, [pc, #388]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	4a60      	ldr	r2, [pc, #384]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bf6:	f043 0304 	orr.w	r3, r3, #4
 8001bfa:	6213      	str	r3, [r2, #32]
 8001bfc:	4b5e      	ldr	r3, [pc, #376]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	4a5d      	ldr	r2, [pc, #372]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6213      	str	r3, [r2, #32]
 8001c08:	e00b      	b.n	8001c22 <HAL_RCC_OscConfig+0x36e>
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a5a      	ldr	r2, [pc, #360]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	4b58      	ldr	r3, [pc, #352]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	4a57      	ldr	r2, [pc, #348]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	f023 0304 	bic.w	r3, r3, #4
 8001c20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d015      	beq.n	8001c56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb85 	bl	8001338 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fb81 	bl	8001338 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0b1      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c48:	4b4b      	ldr	r3, [pc, #300]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0ee      	beq.n	8001c32 <HAL_RCC_OscConfig+0x37e>
 8001c54:	e014      	b.n	8001c80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb6f 	bl	8001338 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	e00a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5e:	f7ff fb6b 	bl	8001338 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e09b      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c74:	4b40      	ldr	r3, [pc, #256]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1ee      	bne.n	8001c5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c80:	7dfb      	ldrb	r3, [r7, #23]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d105      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c86:	4b3c      	ldr	r3, [pc, #240]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 8087 	beq.w	8001daa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9c:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 030c 	and.w	r3, r3, #12
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d061      	beq.n	8001d6c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69db      	ldr	r3, [r3, #28]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d146      	bne.n	8001d3e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb0:	4b33      	ldr	r3, [pc, #204]	@ (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fb3f 	bl	8001338 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cbe:	f7ff fb3b 	bl	8001338 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e06d      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd0:	4b29      	ldr	r3, [pc, #164]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1f0      	bne.n	8001cbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4921      	ldr	r1, [pc, #132]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a19      	ldr	r1, [r3, #32]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d08:	430b      	orrs	r3, r1
 8001d0a:	491b      	ldr	r1, [pc, #108]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d10:	4b1b      	ldr	r3, [pc, #108]	@ (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d16:	f7ff fb0f 	bl	8001338 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1e:	f7ff fb0b 	bl	8001338 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e03d      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d30:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x46a>
 8001d3c:	e035      	b.n	8001daa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3e:	4b10      	ldr	r3, [pc, #64]	@ (8001d80 <HAL_RCC_OscConfig+0x4cc>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff faf8 	bl	8001338 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4c:	f7ff faf4 	bl	8001338 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e026      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5e:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_RCC_OscConfig+0x4c4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x498>
 8001d6a:	e01e      	b.n	8001daa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d107      	bne.n	8001d84 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e019      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40007000 	.word	0x40007000
 8001d80:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCC_OscConfig+0x500>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e000      	b.n	8001dac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40021000 	.word	0x40021000

08001db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d0      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b67      	ldr	r3, [pc, #412]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4965      	ldr	r1, [pc, #404]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b41      	ldr	r3, [pc, #260]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e073      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3d      	ldr	r3, [pc, #244]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b39      	ldr	r3, [pc, #228]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4936      	ldr	r1, [pc, #216]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7ff fa46 	bl	8001338 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff fa42 	bl	8001338 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e053      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d210      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4922      	ldr	r1, [pc, #136]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f32:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	@ (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	@ (8001f84 <HAL_RCC_ClockConfig+0x1cc>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <HAL_RCC_ClockConfig+0x1d0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff f9a4 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	080031fc 	.word	0x080031fc
 8001f84:	20000004 	.word	0x20000004
 8001f88:	20000008 	.word	0x20000008

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 030c 	and.w	r3, r3, #12
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d002      	beq.n	8001fbc <HAL_RCC_GetSysClockFreq+0x30>
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d003      	beq.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001fba:	e027      	b.n	800200c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fbe:	613b      	str	r3, [r7, #16]
      break;
 8001fc0:	e027      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	4a17      	ldr	r2, [pc, #92]	@ (8002028 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fcc:	5cd3      	ldrb	r3, [r2, r3]
 8001fce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fda:	4b11      	ldr	r3, [pc, #68]	@ (8002020 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	0c5b      	lsrs	r3, r3, #17
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	4a11      	ldr	r2, [pc, #68]	@ (800202c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fe6:	5cd3      	ldrb	r3, [r2, r3]
 8001fe8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a0d      	ldr	r2, [pc, #52]	@ (8002024 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fee:	fb03 f202 	mul.w	r2, r3, r2
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	e004      	b.n	8002006 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8002030 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002000:	fb02 f303 	mul.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	613b      	str	r3, [r7, #16]
      break;
 800200a:	e002      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800200c:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <HAL_RCC_GetSysClockFreq+0xa8>)
 800200e:	613b      	str	r3, [r7, #16]
      break;
 8002010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002012:	693b      	ldr	r3, [r7, #16]
}
 8002014:	4618      	mov	r0, r3
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	00b71b00 	.word	0x00b71b00
 8002028:	0800320c 	.word	0x0800320c
 800202c:	0800321c 	.word	0x0800321c
 8002030:	003d0900 	.word	0x003d0900
 8002034:	007a1200 	.word	0x007a1200

08002038 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002040:	4b0a      	ldr	r3, [pc, #40]	@ (800206c <RCC_Delay+0x34>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0a      	ldr	r2, [pc, #40]	@ (8002070 <RCC_Delay+0x38>)
 8002046:	fba2 2303 	umull	r2, r3, r2, r3
 800204a:	0a5b      	lsrs	r3, r3, #9
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	fb02 f303 	mul.w	r3, r2, r3
 8002052:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002054:	bf00      	nop
  }
  while (Delay --);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1e5a      	subs	r2, r3, #1
 800205a:	60fa      	str	r2, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f9      	bne.n	8002054 <RCC_Delay+0x1c>
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3714      	adds	r7, #20
 8002066:	46bd      	mov	sp, r7
 8002068:	bc80      	pop	{r7}
 800206a:	4770      	bx	lr
 800206c:	20000004 	.word	0x20000004
 8002070:	10624dd3 	.word	0x10624dd3

08002074 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e076      	b.n	8002174 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002096:	d009      	beq.n	80020ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
 800209e:	e005      	b.n	80020ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe ff86 	bl	8000fd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69db      	ldr	r3, [r3, #28]
 8002122:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002130:	ea42 0103 	orr.w	r1, r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	0c1a      	lsrs	r2, r3, #16
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f002 0204 	and.w	r2, r2, #4
 8002152:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002162:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <malloc>:
 800217c:	4b02      	ldr	r3, [pc, #8]	@ (8002188 <malloc+0xc>)
 800217e:	4601      	mov	r1, r0
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	f000 b825 	b.w	80021d0 <_malloc_r>
 8002186:	bf00      	nop
 8002188:	2000001c 	.word	0x2000001c

0800218c <sbrk_aligned>:
 800218c:	b570      	push	{r4, r5, r6, lr}
 800218e:	4e0f      	ldr	r6, [pc, #60]	@ (80021cc <sbrk_aligned+0x40>)
 8002190:	460c      	mov	r4, r1
 8002192:	6831      	ldr	r1, [r6, #0]
 8002194:	4605      	mov	r5, r0
 8002196:	b911      	cbnz	r1, 800219e <sbrk_aligned+0x12>
 8002198:	f000 fa5c 	bl	8002654 <_sbrk_r>
 800219c:	6030      	str	r0, [r6, #0]
 800219e:	4621      	mov	r1, r4
 80021a0:	4628      	mov	r0, r5
 80021a2:	f000 fa57 	bl	8002654 <_sbrk_r>
 80021a6:	1c43      	adds	r3, r0, #1
 80021a8:	d103      	bne.n	80021b2 <sbrk_aligned+0x26>
 80021aa:	f04f 34ff 	mov.w	r4, #4294967295
 80021ae:	4620      	mov	r0, r4
 80021b0:	bd70      	pop	{r4, r5, r6, pc}
 80021b2:	1cc4      	adds	r4, r0, #3
 80021b4:	f024 0403 	bic.w	r4, r4, #3
 80021b8:	42a0      	cmp	r0, r4
 80021ba:	d0f8      	beq.n	80021ae <sbrk_aligned+0x22>
 80021bc:	1a21      	subs	r1, r4, r0
 80021be:	4628      	mov	r0, r5
 80021c0:	f000 fa48 	bl	8002654 <_sbrk_r>
 80021c4:	3001      	adds	r0, #1
 80021c6:	d1f2      	bne.n	80021ae <sbrk_aligned+0x22>
 80021c8:	e7ef      	b.n	80021aa <sbrk_aligned+0x1e>
 80021ca:	bf00      	nop
 80021cc:	200000ec 	.word	0x200000ec

080021d0 <_malloc_r>:
 80021d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021d4:	1ccd      	adds	r5, r1, #3
 80021d6:	f025 0503 	bic.w	r5, r5, #3
 80021da:	3508      	adds	r5, #8
 80021dc:	2d0c      	cmp	r5, #12
 80021de:	bf38      	it	cc
 80021e0:	250c      	movcc	r5, #12
 80021e2:	2d00      	cmp	r5, #0
 80021e4:	4606      	mov	r6, r0
 80021e6:	db01      	blt.n	80021ec <_malloc_r+0x1c>
 80021e8:	42a9      	cmp	r1, r5
 80021ea:	d904      	bls.n	80021f6 <_malloc_r+0x26>
 80021ec:	230c      	movs	r3, #12
 80021ee:	6033      	str	r3, [r6, #0]
 80021f0:	2000      	movs	r0, #0
 80021f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80022cc <_malloc_r+0xfc>
 80021fa:	f000 f869 	bl	80022d0 <__malloc_lock>
 80021fe:	f8d8 3000 	ldr.w	r3, [r8]
 8002202:	461c      	mov	r4, r3
 8002204:	bb44      	cbnz	r4, 8002258 <_malloc_r+0x88>
 8002206:	4629      	mov	r1, r5
 8002208:	4630      	mov	r0, r6
 800220a:	f7ff ffbf 	bl	800218c <sbrk_aligned>
 800220e:	1c43      	adds	r3, r0, #1
 8002210:	4604      	mov	r4, r0
 8002212:	d158      	bne.n	80022c6 <_malloc_r+0xf6>
 8002214:	f8d8 4000 	ldr.w	r4, [r8]
 8002218:	4627      	mov	r7, r4
 800221a:	2f00      	cmp	r7, #0
 800221c:	d143      	bne.n	80022a6 <_malloc_r+0xd6>
 800221e:	2c00      	cmp	r4, #0
 8002220:	d04b      	beq.n	80022ba <_malloc_r+0xea>
 8002222:	6823      	ldr	r3, [r4, #0]
 8002224:	4639      	mov	r1, r7
 8002226:	4630      	mov	r0, r6
 8002228:	eb04 0903 	add.w	r9, r4, r3
 800222c:	f000 fa12 	bl	8002654 <_sbrk_r>
 8002230:	4581      	cmp	r9, r0
 8002232:	d142      	bne.n	80022ba <_malloc_r+0xea>
 8002234:	6821      	ldr	r1, [r4, #0]
 8002236:	4630      	mov	r0, r6
 8002238:	1a6d      	subs	r5, r5, r1
 800223a:	4629      	mov	r1, r5
 800223c:	f7ff ffa6 	bl	800218c <sbrk_aligned>
 8002240:	3001      	adds	r0, #1
 8002242:	d03a      	beq.n	80022ba <_malloc_r+0xea>
 8002244:	6823      	ldr	r3, [r4, #0]
 8002246:	442b      	add	r3, r5
 8002248:	6023      	str	r3, [r4, #0]
 800224a:	f8d8 3000 	ldr.w	r3, [r8]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	bb62      	cbnz	r2, 80022ac <_malloc_r+0xdc>
 8002252:	f8c8 7000 	str.w	r7, [r8]
 8002256:	e00f      	b.n	8002278 <_malloc_r+0xa8>
 8002258:	6822      	ldr	r2, [r4, #0]
 800225a:	1b52      	subs	r2, r2, r5
 800225c:	d420      	bmi.n	80022a0 <_malloc_r+0xd0>
 800225e:	2a0b      	cmp	r2, #11
 8002260:	d917      	bls.n	8002292 <_malloc_r+0xc2>
 8002262:	1961      	adds	r1, r4, r5
 8002264:	42a3      	cmp	r3, r4
 8002266:	6025      	str	r5, [r4, #0]
 8002268:	bf18      	it	ne
 800226a:	6059      	strne	r1, [r3, #4]
 800226c:	6863      	ldr	r3, [r4, #4]
 800226e:	bf08      	it	eq
 8002270:	f8c8 1000 	streq.w	r1, [r8]
 8002274:	5162      	str	r2, [r4, r5]
 8002276:	604b      	str	r3, [r1, #4]
 8002278:	4630      	mov	r0, r6
 800227a:	f000 f82f 	bl	80022dc <__malloc_unlock>
 800227e:	f104 000b 	add.w	r0, r4, #11
 8002282:	1d23      	adds	r3, r4, #4
 8002284:	f020 0007 	bic.w	r0, r0, #7
 8002288:	1ac2      	subs	r2, r0, r3
 800228a:	bf1c      	itt	ne
 800228c:	1a1b      	subne	r3, r3, r0
 800228e:	50a3      	strne	r3, [r4, r2]
 8002290:	e7af      	b.n	80021f2 <_malloc_r+0x22>
 8002292:	6862      	ldr	r2, [r4, #4]
 8002294:	42a3      	cmp	r3, r4
 8002296:	bf0c      	ite	eq
 8002298:	f8c8 2000 	streq.w	r2, [r8]
 800229c:	605a      	strne	r2, [r3, #4]
 800229e:	e7eb      	b.n	8002278 <_malloc_r+0xa8>
 80022a0:	4623      	mov	r3, r4
 80022a2:	6864      	ldr	r4, [r4, #4]
 80022a4:	e7ae      	b.n	8002204 <_malloc_r+0x34>
 80022a6:	463c      	mov	r4, r7
 80022a8:	687f      	ldr	r7, [r7, #4]
 80022aa:	e7b6      	b.n	800221a <_malloc_r+0x4a>
 80022ac:	461a      	mov	r2, r3
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	42a3      	cmp	r3, r4
 80022b2:	d1fb      	bne.n	80022ac <_malloc_r+0xdc>
 80022b4:	2300      	movs	r3, #0
 80022b6:	6053      	str	r3, [r2, #4]
 80022b8:	e7de      	b.n	8002278 <_malloc_r+0xa8>
 80022ba:	230c      	movs	r3, #12
 80022bc:	4630      	mov	r0, r6
 80022be:	6033      	str	r3, [r6, #0]
 80022c0:	f000 f80c 	bl	80022dc <__malloc_unlock>
 80022c4:	e794      	b.n	80021f0 <_malloc_r+0x20>
 80022c6:	6005      	str	r5, [r0, #0]
 80022c8:	e7d6      	b.n	8002278 <_malloc_r+0xa8>
 80022ca:	bf00      	nop
 80022cc:	200000f0 	.word	0x200000f0

080022d0 <__malloc_lock>:
 80022d0:	4801      	ldr	r0, [pc, #4]	@ (80022d8 <__malloc_lock+0x8>)
 80022d2:	f000 ba0c 	b.w	80026ee <__retarget_lock_acquire_recursive>
 80022d6:	bf00      	nop
 80022d8:	20000234 	.word	0x20000234

080022dc <__malloc_unlock>:
 80022dc:	4801      	ldr	r0, [pc, #4]	@ (80022e4 <__malloc_unlock+0x8>)
 80022de:	f000 ba07 	b.w	80026f0 <__retarget_lock_release_recursive>
 80022e2:	bf00      	nop
 80022e4:	20000234 	.word	0x20000234

080022e8 <rand>:
 80022e8:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <rand+0x5c>)
 80022ea:	b510      	push	{r4, lr}
 80022ec:	681c      	ldr	r4, [r3, #0]
 80022ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80022f0:	b9b3      	cbnz	r3, 8002320 <rand+0x38>
 80022f2:	2018      	movs	r0, #24
 80022f4:	f7ff ff42 	bl	800217c <malloc>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6320      	str	r0, [r4, #48]	@ 0x30
 80022fc:	b920      	cbnz	r0, 8002308 <rand+0x20>
 80022fe:	2152      	movs	r1, #82	@ 0x52
 8002300:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <rand+0x60>)
 8002302:	4812      	ldr	r0, [pc, #72]	@ (800234c <rand+0x64>)
 8002304:	f000 fa04 	bl	8002710 <__assert_func>
 8002308:	4911      	ldr	r1, [pc, #68]	@ (8002350 <rand+0x68>)
 800230a:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <rand+0x6c>)
 800230c:	e9c0 1300 	strd	r1, r3, [r0]
 8002310:	4b11      	ldr	r3, [pc, #68]	@ (8002358 <rand+0x70>)
 8002312:	2100      	movs	r1, #0
 8002314:	6083      	str	r3, [r0, #8]
 8002316:	230b      	movs	r3, #11
 8002318:	8183      	strh	r3, [r0, #12]
 800231a:	2001      	movs	r0, #1
 800231c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002320:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002322:	480e      	ldr	r0, [pc, #56]	@ (800235c <rand+0x74>)
 8002324:	690b      	ldr	r3, [r1, #16]
 8002326:	694c      	ldr	r4, [r1, #20]
 8002328:	4358      	muls	r0, r3
 800232a:	4a0d      	ldr	r2, [pc, #52]	@ (8002360 <rand+0x78>)
 800232c:	fb02 0004 	mla	r0, r2, r4, r0
 8002330:	fba3 3202 	umull	r3, r2, r3, r2
 8002334:	3301      	adds	r3, #1
 8002336:	eb40 0002 	adc.w	r0, r0, r2
 800233a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800233e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002342:	bd10      	pop	{r4, pc}
 8002344:	2000001c 	.word	0x2000001c
 8002348:	0800321e 	.word	0x0800321e
 800234c:	08003235 	.word	0x08003235
 8002350:	abcd330e 	.word	0xabcd330e
 8002354:	e66d1234 	.word	0xe66d1234
 8002358:	0005deec 	.word	0x0005deec
 800235c:	5851f42d 	.word	0x5851f42d
 8002360:	4c957f2d 	.word	0x4c957f2d

08002364 <realloc>:
 8002364:	4b02      	ldr	r3, [pc, #8]	@ (8002370 <realloc+0xc>)
 8002366:	460a      	mov	r2, r1
 8002368:	4601      	mov	r1, r0
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	f000 b802 	b.w	8002374 <_realloc_r>
 8002370:	2000001c 	.word	0x2000001c

08002374 <_realloc_r>:
 8002374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002378:	4680      	mov	r8, r0
 800237a:	4615      	mov	r5, r2
 800237c:	460c      	mov	r4, r1
 800237e:	b921      	cbnz	r1, 800238a <_realloc_r+0x16>
 8002380:	4611      	mov	r1, r2
 8002382:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002386:	f7ff bf23 	b.w	80021d0 <_malloc_r>
 800238a:	b92a      	cbnz	r2, 8002398 <_realloc_r+0x24>
 800238c:	f000 f9de 	bl	800274c <_free_r>
 8002390:	2400      	movs	r4, #0
 8002392:	4620      	mov	r0, r4
 8002394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002398:	f000 fa20 	bl	80027dc <_malloc_usable_size_r>
 800239c:	4285      	cmp	r5, r0
 800239e:	4606      	mov	r6, r0
 80023a0:	d802      	bhi.n	80023a8 <_realloc_r+0x34>
 80023a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80023a6:	d8f4      	bhi.n	8002392 <_realloc_r+0x1e>
 80023a8:	4629      	mov	r1, r5
 80023aa:	4640      	mov	r0, r8
 80023ac:	f7ff ff10 	bl	80021d0 <_malloc_r>
 80023b0:	4607      	mov	r7, r0
 80023b2:	2800      	cmp	r0, #0
 80023b4:	d0ec      	beq.n	8002390 <_realloc_r+0x1c>
 80023b6:	42b5      	cmp	r5, r6
 80023b8:	462a      	mov	r2, r5
 80023ba:	4621      	mov	r1, r4
 80023bc:	bf28      	it	cs
 80023be:	4632      	movcs	r2, r6
 80023c0:	f000 f997 	bl	80026f2 <memcpy>
 80023c4:	4621      	mov	r1, r4
 80023c6:	4640      	mov	r0, r8
 80023c8:	f000 f9c0 	bl	800274c <_free_r>
 80023cc:	463c      	mov	r4, r7
 80023ce:	e7e0      	b.n	8002392 <_realloc_r+0x1e>

080023d0 <std>:
 80023d0:	2300      	movs	r3, #0
 80023d2:	b510      	push	{r4, lr}
 80023d4:	4604      	mov	r4, r0
 80023d6:	e9c0 3300 	strd	r3, r3, [r0]
 80023da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023de:	6083      	str	r3, [r0, #8]
 80023e0:	8181      	strh	r1, [r0, #12]
 80023e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80023e4:	81c2      	strh	r2, [r0, #14]
 80023e6:	6183      	str	r3, [r0, #24]
 80023e8:	4619      	mov	r1, r3
 80023ea:	2208      	movs	r2, #8
 80023ec:	305c      	adds	r0, #92	@ 0x5c
 80023ee:	f000 f8f4 	bl	80025da <memset>
 80023f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <std+0x58>)
 80023f4:	6224      	str	r4, [r4, #32]
 80023f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80023f8:	4b0c      	ldr	r3, [pc, #48]	@ (800242c <std+0x5c>)
 80023fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80023fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002430 <std+0x60>)
 80023fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <std+0x64>)
 8002402:	6323      	str	r3, [r4, #48]	@ 0x30
 8002404:	4b0c      	ldr	r3, [pc, #48]	@ (8002438 <std+0x68>)
 8002406:	429c      	cmp	r4, r3
 8002408:	d006      	beq.n	8002418 <std+0x48>
 800240a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800240e:	4294      	cmp	r4, r2
 8002410:	d002      	beq.n	8002418 <std+0x48>
 8002412:	33d0      	adds	r3, #208	@ 0xd0
 8002414:	429c      	cmp	r4, r3
 8002416:	d105      	bne.n	8002424 <std+0x54>
 8002418:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800241c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002420:	f000 b964 	b.w	80026ec <__retarget_lock_init_recursive>
 8002424:	bd10      	pop	{r4, pc}
 8002426:	bf00      	nop
 8002428:	08002555 	.word	0x08002555
 800242c:	08002577 	.word	0x08002577
 8002430:	080025af 	.word	0x080025af
 8002434:	080025d3 	.word	0x080025d3
 8002438:	200000f4 	.word	0x200000f4

0800243c <stdio_exit_handler>:
 800243c:	4a02      	ldr	r2, [pc, #8]	@ (8002448 <stdio_exit_handler+0xc>)
 800243e:	4903      	ldr	r1, [pc, #12]	@ (800244c <stdio_exit_handler+0x10>)
 8002440:	4803      	ldr	r0, [pc, #12]	@ (8002450 <stdio_exit_handler+0x14>)
 8002442:	f000 b869 	b.w	8002518 <_fwalk_sglue>
 8002446:	bf00      	nop
 8002448:	20000010 	.word	0x20000010
 800244c:	080028ed 	.word	0x080028ed
 8002450:	20000020 	.word	0x20000020

08002454 <cleanup_stdio>:
 8002454:	6841      	ldr	r1, [r0, #4]
 8002456:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <cleanup_stdio+0x34>)
 8002458:	b510      	push	{r4, lr}
 800245a:	4299      	cmp	r1, r3
 800245c:	4604      	mov	r4, r0
 800245e:	d001      	beq.n	8002464 <cleanup_stdio+0x10>
 8002460:	f000 fa44 	bl	80028ec <_fflush_r>
 8002464:	68a1      	ldr	r1, [r4, #8]
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <cleanup_stdio+0x38>)
 8002468:	4299      	cmp	r1, r3
 800246a:	d002      	beq.n	8002472 <cleanup_stdio+0x1e>
 800246c:	4620      	mov	r0, r4
 800246e:	f000 fa3d 	bl	80028ec <_fflush_r>
 8002472:	68e1      	ldr	r1, [r4, #12]
 8002474:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <cleanup_stdio+0x3c>)
 8002476:	4299      	cmp	r1, r3
 8002478:	d004      	beq.n	8002484 <cleanup_stdio+0x30>
 800247a:	4620      	mov	r0, r4
 800247c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002480:	f000 ba34 	b.w	80028ec <_fflush_r>
 8002484:	bd10      	pop	{r4, pc}
 8002486:	bf00      	nop
 8002488:	200000f4 	.word	0x200000f4
 800248c:	2000015c 	.word	0x2000015c
 8002490:	200001c4 	.word	0x200001c4

08002494 <global_stdio_init.part.0>:
 8002494:	b510      	push	{r4, lr}
 8002496:	4b0b      	ldr	r3, [pc, #44]	@ (80024c4 <global_stdio_init.part.0+0x30>)
 8002498:	4c0b      	ldr	r4, [pc, #44]	@ (80024c8 <global_stdio_init.part.0+0x34>)
 800249a:	4a0c      	ldr	r2, [pc, #48]	@ (80024cc <global_stdio_init.part.0+0x38>)
 800249c:	4620      	mov	r0, r4
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	2104      	movs	r1, #4
 80024a2:	2200      	movs	r2, #0
 80024a4:	f7ff ff94 	bl	80023d0 <std>
 80024a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80024ac:	2201      	movs	r2, #1
 80024ae:	2109      	movs	r1, #9
 80024b0:	f7ff ff8e 	bl	80023d0 <std>
 80024b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80024b8:	2202      	movs	r2, #2
 80024ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024be:	2112      	movs	r1, #18
 80024c0:	f7ff bf86 	b.w	80023d0 <std>
 80024c4:	2000022c 	.word	0x2000022c
 80024c8:	200000f4 	.word	0x200000f4
 80024cc:	0800243d 	.word	0x0800243d

080024d0 <__sfp_lock_acquire>:
 80024d0:	4801      	ldr	r0, [pc, #4]	@ (80024d8 <__sfp_lock_acquire+0x8>)
 80024d2:	f000 b90c 	b.w	80026ee <__retarget_lock_acquire_recursive>
 80024d6:	bf00      	nop
 80024d8:	20000235 	.word	0x20000235

080024dc <__sfp_lock_release>:
 80024dc:	4801      	ldr	r0, [pc, #4]	@ (80024e4 <__sfp_lock_release+0x8>)
 80024de:	f000 b907 	b.w	80026f0 <__retarget_lock_release_recursive>
 80024e2:	bf00      	nop
 80024e4:	20000235 	.word	0x20000235

080024e8 <__sinit>:
 80024e8:	b510      	push	{r4, lr}
 80024ea:	4604      	mov	r4, r0
 80024ec:	f7ff fff0 	bl	80024d0 <__sfp_lock_acquire>
 80024f0:	6a23      	ldr	r3, [r4, #32]
 80024f2:	b11b      	cbz	r3, 80024fc <__sinit+0x14>
 80024f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024f8:	f7ff bff0 	b.w	80024dc <__sfp_lock_release>
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <__sinit+0x28>)
 80024fe:	6223      	str	r3, [r4, #32]
 8002500:	4b04      	ldr	r3, [pc, #16]	@ (8002514 <__sinit+0x2c>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1f5      	bne.n	80024f4 <__sinit+0xc>
 8002508:	f7ff ffc4 	bl	8002494 <global_stdio_init.part.0>
 800250c:	e7f2      	b.n	80024f4 <__sinit+0xc>
 800250e:	bf00      	nop
 8002510:	08002455 	.word	0x08002455
 8002514:	2000022c 	.word	0x2000022c

08002518 <_fwalk_sglue>:
 8002518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800251c:	4607      	mov	r7, r0
 800251e:	4688      	mov	r8, r1
 8002520:	4614      	mov	r4, r2
 8002522:	2600      	movs	r6, #0
 8002524:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002528:	f1b9 0901 	subs.w	r9, r9, #1
 800252c:	d505      	bpl.n	800253a <_fwalk_sglue+0x22>
 800252e:	6824      	ldr	r4, [r4, #0]
 8002530:	2c00      	cmp	r4, #0
 8002532:	d1f7      	bne.n	8002524 <_fwalk_sglue+0xc>
 8002534:	4630      	mov	r0, r6
 8002536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800253a:	89ab      	ldrh	r3, [r5, #12]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d907      	bls.n	8002550 <_fwalk_sglue+0x38>
 8002540:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002544:	3301      	adds	r3, #1
 8002546:	d003      	beq.n	8002550 <_fwalk_sglue+0x38>
 8002548:	4629      	mov	r1, r5
 800254a:	4638      	mov	r0, r7
 800254c:	47c0      	blx	r8
 800254e:	4306      	orrs	r6, r0
 8002550:	3568      	adds	r5, #104	@ 0x68
 8002552:	e7e9      	b.n	8002528 <_fwalk_sglue+0x10>

08002554 <__sread>:
 8002554:	b510      	push	{r4, lr}
 8002556:	460c      	mov	r4, r1
 8002558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800255c:	f000 f868 	bl	8002630 <_read_r>
 8002560:	2800      	cmp	r0, #0
 8002562:	bfab      	itete	ge
 8002564:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002566:	89a3      	ldrhlt	r3, [r4, #12]
 8002568:	181b      	addge	r3, r3, r0
 800256a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800256e:	bfac      	ite	ge
 8002570:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002572:	81a3      	strhlt	r3, [r4, #12]
 8002574:	bd10      	pop	{r4, pc}

08002576 <__swrite>:
 8002576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800257a:	461f      	mov	r7, r3
 800257c:	898b      	ldrh	r3, [r1, #12]
 800257e:	4605      	mov	r5, r0
 8002580:	05db      	lsls	r3, r3, #23
 8002582:	460c      	mov	r4, r1
 8002584:	4616      	mov	r6, r2
 8002586:	d505      	bpl.n	8002594 <__swrite+0x1e>
 8002588:	2302      	movs	r3, #2
 800258a:	2200      	movs	r2, #0
 800258c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002590:	f000 f83c 	bl	800260c <_lseek_r>
 8002594:	89a3      	ldrh	r3, [r4, #12]
 8002596:	4632      	mov	r2, r6
 8002598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800259c:	81a3      	strh	r3, [r4, #12]
 800259e:	4628      	mov	r0, r5
 80025a0:	463b      	mov	r3, r7
 80025a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80025aa:	f000 b863 	b.w	8002674 <_write_r>

080025ae <__sseek>:
 80025ae:	b510      	push	{r4, lr}
 80025b0:	460c      	mov	r4, r1
 80025b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b6:	f000 f829 	bl	800260c <_lseek_r>
 80025ba:	1c43      	adds	r3, r0, #1
 80025bc:	89a3      	ldrh	r3, [r4, #12]
 80025be:	bf15      	itete	ne
 80025c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80025c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80025c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80025ca:	81a3      	strheq	r3, [r4, #12]
 80025cc:	bf18      	it	ne
 80025ce:	81a3      	strhne	r3, [r4, #12]
 80025d0:	bd10      	pop	{r4, pc}

080025d2 <__sclose>:
 80025d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025d6:	f000 b809 	b.w	80025ec <_close_r>

080025da <memset>:
 80025da:	4603      	mov	r3, r0
 80025dc:	4402      	add	r2, r0
 80025de:	4293      	cmp	r3, r2
 80025e0:	d100      	bne.n	80025e4 <memset+0xa>
 80025e2:	4770      	bx	lr
 80025e4:	f803 1b01 	strb.w	r1, [r3], #1
 80025e8:	e7f9      	b.n	80025de <memset+0x4>
	...

080025ec <_close_r>:
 80025ec:	b538      	push	{r3, r4, r5, lr}
 80025ee:	2300      	movs	r3, #0
 80025f0:	4d05      	ldr	r5, [pc, #20]	@ (8002608 <_close_r+0x1c>)
 80025f2:	4604      	mov	r4, r0
 80025f4:	4608      	mov	r0, r1
 80025f6:	602b      	str	r3, [r5, #0]
 80025f8:	f7fe fdb3 	bl	8001162 <_close>
 80025fc:	1c43      	adds	r3, r0, #1
 80025fe:	d102      	bne.n	8002606 <_close_r+0x1a>
 8002600:	682b      	ldr	r3, [r5, #0]
 8002602:	b103      	cbz	r3, 8002606 <_close_r+0x1a>
 8002604:	6023      	str	r3, [r4, #0]
 8002606:	bd38      	pop	{r3, r4, r5, pc}
 8002608:	20000230 	.word	0x20000230

0800260c <_lseek_r>:
 800260c:	b538      	push	{r3, r4, r5, lr}
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	2200      	movs	r2, #0
 8002616:	4d05      	ldr	r5, [pc, #20]	@ (800262c <_lseek_r+0x20>)
 8002618:	602a      	str	r2, [r5, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	f7fe fdc5 	bl	80011aa <_lseek>
 8002620:	1c43      	adds	r3, r0, #1
 8002622:	d102      	bne.n	800262a <_lseek_r+0x1e>
 8002624:	682b      	ldr	r3, [r5, #0]
 8002626:	b103      	cbz	r3, 800262a <_lseek_r+0x1e>
 8002628:	6023      	str	r3, [r4, #0]
 800262a:	bd38      	pop	{r3, r4, r5, pc}
 800262c:	20000230 	.word	0x20000230

08002630 <_read_r>:
 8002630:	b538      	push	{r3, r4, r5, lr}
 8002632:	4604      	mov	r4, r0
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	2200      	movs	r2, #0
 800263a:	4d05      	ldr	r5, [pc, #20]	@ (8002650 <_read_r+0x20>)
 800263c:	602a      	str	r2, [r5, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	f7fe fd56 	bl	80010f0 <_read>
 8002644:	1c43      	adds	r3, r0, #1
 8002646:	d102      	bne.n	800264e <_read_r+0x1e>
 8002648:	682b      	ldr	r3, [r5, #0]
 800264a:	b103      	cbz	r3, 800264e <_read_r+0x1e>
 800264c:	6023      	str	r3, [r4, #0]
 800264e:	bd38      	pop	{r3, r4, r5, pc}
 8002650:	20000230 	.word	0x20000230

08002654 <_sbrk_r>:
 8002654:	b538      	push	{r3, r4, r5, lr}
 8002656:	2300      	movs	r3, #0
 8002658:	4d05      	ldr	r5, [pc, #20]	@ (8002670 <_sbrk_r+0x1c>)
 800265a:	4604      	mov	r4, r0
 800265c:	4608      	mov	r0, r1
 800265e:	602b      	str	r3, [r5, #0]
 8002660:	f7fe fdb0 	bl	80011c4 <_sbrk>
 8002664:	1c43      	adds	r3, r0, #1
 8002666:	d102      	bne.n	800266e <_sbrk_r+0x1a>
 8002668:	682b      	ldr	r3, [r5, #0]
 800266a:	b103      	cbz	r3, 800266e <_sbrk_r+0x1a>
 800266c:	6023      	str	r3, [r4, #0]
 800266e:	bd38      	pop	{r3, r4, r5, pc}
 8002670:	20000230 	.word	0x20000230

08002674 <_write_r>:
 8002674:	b538      	push	{r3, r4, r5, lr}
 8002676:	4604      	mov	r4, r0
 8002678:	4608      	mov	r0, r1
 800267a:	4611      	mov	r1, r2
 800267c:	2200      	movs	r2, #0
 800267e:	4d05      	ldr	r5, [pc, #20]	@ (8002694 <_write_r+0x20>)
 8002680:	602a      	str	r2, [r5, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	f7fe fd51 	bl	800112a <_write>
 8002688:	1c43      	adds	r3, r0, #1
 800268a:	d102      	bne.n	8002692 <_write_r+0x1e>
 800268c:	682b      	ldr	r3, [r5, #0]
 800268e:	b103      	cbz	r3, 8002692 <_write_r+0x1e>
 8002690:	6023      	str	r3, [r4, #0]
 8002692:	bd38      	pop	{r3, r4, r5, pc}
 8002694:	20000230 	.word	0x20000230

08002698 <__errno>:
 8002698:	4b01      	ldr	r3, [pc, #4]	@ (80026a0 <__errno+0x8>)
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	2000001c 	.word	0x2000001c

080026a4 <__libc_init_array>:
 80026a4:	b570      	push	{r4, r5, r6, lr}
 80026a6:	2600      	movs	r6, #0
 80026a8:	4d0c      	ldr	r5, [pc, #48]	@ (80026dc <__libc_init_array+0x38>)
 80026aa:	4c0d      	ldr	r4, [pc, #52]	@ (80026e0 <__libc_init_array+0x3c>)
 80026ac:	1b64      	subs	r4, r4, r5
 80026ae:	10a4      	asrs	r4, r4, #2
 80026b0:	42a6      	cmp	r6, r4
 80026b2:	d109      	bne.n	80026c8 <__libc_init_array+0x24>
 80026b4:	f000 fd96 	bl	80031e4 <_init>
 80026b8:	2600      	movs	r6, #0
 80026ba:	4d0a      	ldr	r5, [pc, #40]	@ (80026e4 <__libc_init_array+0x40>)
 80026bc:	4c0a      	ldr	r4, [pc, #40]	@ (80026e8 <__libc_init_array+0x44>)
 80026be:	1b64      	subs	r4, r4, r5
 80026c0:	10a4      	asrs	r4, r4, #2
 80026c2:	42a6      	cmp	r6, r4
 80026c4:	d105      	bne.n	80026d2 <__libc_init_array+0x2e>
 80026c6:	bd70      	pop	{r4, r5, r6, pc}
 80026c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026cc:	4798      	blx	r3
 80026ce:	3601      	adds	r6, #1
 80026d0:	e7ee      	b.n	80026b0 <__libc_init_array+0xc>
 80026d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d6:	4798      	blx	r3
 80026d8:	3601      	adds	r6, #1
 80026da:	e7f2      	b.n	80026c2 <__libc_init_array+0x1e>
 80026dc:	080032fc 	.word	0x080032fc
 80026e0:	080032fc 	.word	0x080032fc
 80026e4:	080032fc 	.word	0x080032fc
 80026e8:	08003300 	.word	0x08003300

080026ec <__retarget_lock_init_recursive>:
 80026ec:	4770      	bx	lr

080026ee <__retarget_lock_acquire_recursive>:
 80026ee:	4770      	bx	lr

080026f0 <__retarget_lock_release_recursive>:
 80026f0:	4770      	bx	lr

080026f2 <memcpy>:
 80026f2:	440a      	add	r2, r1
 80026f4:	4291      	cmp	r1, r2
 80026f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80026fa:	d100      	bne.n	80026fe <memcpy+0xc>
 80026fc:	4770      	bx	lr
 80026fe:	b510      	push	{r4, lr}
 8002700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002704:	4291      	cmp	r1, r2
 8002706:	f803 4f01 	strb.w	r4, [r3, #1]!
 800270a:	d1f9      	bne.n	8002700 <memcpy+0xe>
 800270c:	bd10      	pop	{r4, pc}
	...

08002710 <__assert_func>:
 8002710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002712:	4614      	mov	r4, r2
 8002714:	461a      	mov	r2, r3
 8002716:	4b09      	ldr	r3, [pc, #36]	@ (800273c <__assert_func+0x2c>)
 8002718:	4605      	mov	r5, r0
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68d8      	ldr	r0, [r3, #12]
 800271e:	b954      	cbnz	r4, 8002736 <__assert_func+0x26>
 8002720:	4b07      	ldr	r3, [pc, #28]	@ (8002740 <__assert_func+0x30>)
 8002722:	461c      	mov	r4, r3
 8002724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002728:	9100      	str	r1, [sp, #0]
 800272a:	462b      	mov	r3, r5
 800272c:	4905      	ldr	r1, [pc, #20]	@ (8002744 <__assert_func+0x34>)
 800272e:	f000 f905 	bl	800293c <fiprintf>
 8002732:	f000 f915 	bl	8002960 <abort>
 8002736:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <__assert_func+0x38>)
 8002738:	e7f4      	b.n	8002724 <__assert_func+0x14>
 800273a:	bf00      	nop
 800273c:	2000001c 	.word	0x2000001c
 8002740:	080032c8 	.word	0x080032c8
 8002744:	0800329a 	.word	0x0800329a
 8002748:	0800328d 	.word	0x0800328d

0800274c <_free_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	4605      	mov	r5, r0
 8002750:	2900      	cmp	r1, #0
 8002752:	d040      	beq.n	80027d6 <_free_r+0x8a>
 8002754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002758:	1f0c      	subs	r4, r1, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	bfb8      	it	lt
 800275e:	18e4      	addlt	r4, r4, r3
 8002760:	f7ff fdb6 	bl	80022d0 <__malloc_lock>
 8002764:	4a1c      	ldr	r2, [pc, #112]	@ (80027d8 <_free_r+0x8c>)
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	b933      	cbnz	r3, 8002778 <_free_r+0x2c>
 800276a:	6063      	str	r3, [r4, #4]
 800276c:	6014      	str	r4, [r2, #0]
 800276e:	4628      	mov	r0, r5
 8002770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002774:	f7ff bdb2 	b.w	80022dc <__malloc_unlock>
 8002778:	42a3      	cmp	r3, r4
 800277a:	d908      	bls.n	800278e <_free_r+0x42>
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	1821      	adds	r1, r4, r0
 8002780:	428b      	cmp	r3, r1
 8002782:	bf01      	itttt	eq
 8002784:	6819      	ldreq	r1, [r3, #0]
 8002786:	685b      	ldreq	r3, [r3, #4]
 8002788:	1809      	addeq	r1, r1, r0
 800278a:	6021      	streq	r1, [r4, #0]
 800278c:	e7ed      	b.n	800276a <_free_r+0x1e>
 800278e:	461a      	mov	r2, r3
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	b10b      	cbz	r3, 8002798 <_free_r+0x4c>
 8002794:	42a3      	cmp	r3, r4
 8002796:	d9fa      	bls.n	800278e <_free_r+0x42>
 8002798:	6811      	ldr	r1, [r2, #0]
 800279a:	1850      	adds	r0, r2, r1
 800279c:	42a0      	cmp	r0, r4
 800279e:	d10b      	bne.n	80027b8 <_free_r+0x6c>
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	4401      	add	r1, r0
 80027a4:	1850      	adds	r0, r2, r1
 80027a6:	4283      	cmp	r3, r0
 80027a8:	6011      	str	r1, [r2, #0]
 80027aa:	d1e0      	bne.n	800276e <_free_r+0x22>
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4408      	add	r0, r1
 80027b2:	6010      	str	r0, [r2, #0]
 80027b4:	6053      	str	r3, [r2, #4]
 80027b6:	e7da      	b.n	800276e <_free_r+0x22>
 80027b8:	d902      	bls.n	80027c0 <_free_r+0x74>
 80027ba:	230c      	movs	r3, #12
 80027bc:	602b      	str	r3, [r5, #0]
 80027be:	e7d6      	b.n	800276e <_free_r+0x22>
 80027c0:	6820      	ldr	r0, [r4, #0]
 80027c2:	1821      	adds	r1, r4, r0
 80027c4:	428b      	cmp	r3, r1
 80027c6:	bf01      	itttt	eq
 80027c8:	6819      	ldreq	r1, [r3, #0]
 80027ca:	685b      	ldreq	r3, [r3, #4]
 80027cc:	1809      	addeq	r1, r1, r0
 80027ce:	6021      	streq	r1, [r4, #0]
 80027d0:	6063      	str	r3, [r4, #4]
 80027d2:	6054      	str	r4, [r2, #4]
 80027d4:	e7cb      	b.n	800276e <_free_r+0x22>
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
 80027d8:	200000f0 	.word	0x200000f0

080027dc <_malloc_usable_size_r>:
 80027dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027e0:	1f18      	subs	r0, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bfbc      	itt	lt
 80027e6:	580b      	ldrlt	r3, [r1, r0]
 80027e8:	18c0      	addlt	r0, r0, r3
 80027ea:	4770      	bx	lr

080027ec <__sflush_r>:
 80027ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	0716      	lsls	r6, r2, #28
 80027f4:	4605      	mov	r5, r0
 80027f6:	460c      	mov	r4, r1
 80027f8:	d454      	bmi.n	80028a4 <__sflush_r+0xb8>
 80027fa:	684b      	ldr	r3, [r1, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	dc02      	bgt.n	8002806 <__sflush_r+0x1a>
 8002800:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	dd48      	ble.n	8002898 <__sflush_r+0xac>
 8002806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002808:	2e00      	cmp	r6, #0
 800280a:	d045      	beq.n	8002898 <__sflush_r+0xac>
 800280c:	2300      	movs	r3, #0
 800280e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002812:	682f      	ldr	r7, [r5, #0]
 8002814:	6a21      	ldr	r1, [r4, #32]
 8002816:	602b      	str	r3, [r5, #0]
 8002818:	d030      	beq.n	800287c <__sflush_r+0x90>
 800281a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	0759      	lsls	r1, r3, #29
 8002820:	d505      	bpl.n	800282e <__sflush_r+0x42>
 8002822:	6863      	ldr	r3, [r4, #4]
 8002824:	1ad2      	subs	r2, r2, r3
 8002826:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002828:	b10b      	cbz	r3, 800282e <__sflush_r+0x42>
 800282a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800282c:	1ad2      	subs	r2, r2, r3
 800282e:	2300      	movs	r3, #0
 8002830:	4628      	mov	r0, r5
 8002832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002834:	6a21      	ldr	r1, [r4, #32]
 8002836:	47b0      	blx	r6
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	89a3      	ldrh	r3, [r4, #12]
 800283c:	d106      	bne.n	800284c <__sflush_r+0x60>
 800283e:	6829      	ldr	r1, [r5, #0]
 8002840:	291d      	cmp	r1, #29
 8002842:	d82b      	bhi.n	800289c <__sflush_r+0xb0>
 8002844:	4a28      	ldr	r2, [pc, #160]	@ (80028e8 <__sflush_r+0xfc>)
 8002846:	410a      	asrs	r2, r1
 8002848:	07d6      	lsls	r6, r2, #31
 800284a:	d427      	bmi.n	800289c <__sflush_r+0xb0>
 800284c:	2200      	movs	r2, #0
 800284e:	6062      	str	r2, [r4, #4]
 8002850:	6922      	ldr	r2, [r4, #16]
 8002852:	04d9      	lsls	r1, r3, #19
 8002854:	6022      	str	r2, [r4, #0]
 8002856:	d504      	bpl.n	8002862 <__sflush_r+0x76>
 8002858:	1c42      	adds	r2, r0, #1
 800285a:	d101      	bne.n	8002860 <__sflush_r+0x74>
 800285c:	682b      	ldr	r3, [r5, #0]
 800285e:	b903      	cbnz	r3, 8002862 <__sflush_r+0x76>
 8002860:	6560      	str	r0, [r4, #84]	@ 0x54
 8002862:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002864:	602f      	str	r7, [r5, #0]
 8002866:	b1b9      	cbz	r1, 8002898 <__sflush_r+0xac>
 8002868:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800286c:	4299      	cmp	r1, r3
 800286e:	d002      	beq.n	8002876 <__sflush_r+0x8a>
 8002870:	4628      	mov	r0, r5
 8002872:	f7ff ff6b 	bl	800274c <_free_r>
 8002876:	2300      	movs	r3, #0
 8002878:	6363      	str	r3, [r4, #52]	@ 0x34
 800287a:	e00d      	b.n	8002898 <__sflush_r+0xac>
 800287c:	2301      	movs	r3, #1
 800287e:	4628      	mov	r0, r5
 8002880:	47b0      	blx	r6
 8002882:	4602      	mov	r2, r0
 8002884:	1c50      	adds	r0, r2, #1
 8002886:	d1c9      	bne.n	800281c <__sflush_r+0x30>
 8002888:	682b      	ldr	r3, [r5, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0c6      	beq.n	800281c <__sflush_r+0x30>
 800288e:	2b1d      	cmp	r3, #29
 8002890:	d001      	beq.n	8002896 <__sflush_r+0xaa>
 8002892:	2b16      	cmp	r3, #22
 8002894:	d11d      	bne.n	80028d2 <__sflush_r+0xe6>
 8002896:	602f      	str	r7, [r5, #0]
 8002898:	2000      	movs	r0, #0
 800289a:	e021      	b.n	80028e0 <__sflush_r+0xf4>
 800289c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028a0:	b21b      	sxth	r3, r3
 80028a2:	e01a      	b.n	80028da <__sflush_r+0xee>
 80028a4:	690f      	ldr	r7, [r1, #16]
 80028a6:	2f00      	cmp	r7, #0
 80028a8:	d0f6      	beq.n	8002898 <__sflush_r+0xac>
 80028aa:	0793      	lsls	r3, r2, #30
 80028ac:	bf18      	it	ne
 80028ae:	2300      	movne	r3, #0
 80028b0:	680e      	ldr	r6, [r1, #0]
 80028b2:	bf08      	it	eq
 80028b4:	694b      	ldreq	r3, [r1, #20]
 80028b6:	1bf6      	subs	r6, r6, r7
 80028b8:	600f      	str	r7, [r1, #0]
 80028ba:	608b      	str	r3, [r1, #8]
 80028bc:	2e00      	cmp	r6, #0
 80028be:	ddeb      	ble.n	8002898 <__sflush_r+0xac>
 80028c0:	4633      	mov	r3, r6
 80028c2:	463a      	mov	r2, r7
 80028c4:	4628      	mov	r0, r5
 80028c6:	6a21      	ldr	r1, [r4, #32]
 80028c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80028cc:	47e0      	blx	ip
 80028ce:	2800      	cmp	r0, #0
 80028d0:	dc07      	bgt.n	80028e2 <__sflush_r+0xf6>
 80028d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028da:	f04f 30ff 	mov.w	r0, #4294967295
 80028de:	81a3      	strh	r3, [r4, #12]
 80028e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028e2:	4407      	add	r7, r0
 80028e4:	1a36      	subs	r6, r6, r0
 80028e6:	e7e9      	b.n	80028bc <__sflush_r+0xd0>
 80028e8:	dfbffffe 	.word	0xdfbffffe

080028ec <_fflush_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	690b      	ldr	r3, [r1, #16]
 80028f0:	4605      	mov	r5, r0
 80028f2:	460c      	mov	r4, r1
 80028f4:	b913      	cbnz	r3, 80028fc <_fflush_r+0x10>
 80028f6:	2500      	movs	r5, #0
 80028f8:	4628      	mov	r0, r5
 80028fa:	bd38      	pop	{r3, r4, r5, pc}
 80028fc:	b118      	cbz	r0, 8002906 <_fflush_r+0x1a>
 80028fe:	6a03      	ldr	r3, [r0, #32]
 8002900:	b90b      	cbnz	r3, 8002906 <_fflush_r+0x1a>
 8002902:	f7ff fdf1 	bl	80024e8 <__sinit>
 8002906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f3      	beq.n	80028f6 <_fflush_r+0xa>
 800290e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002910:	07d0      	lsls	r0, r2, #31
 8002912:	d404      	bmi.n	800291e <_fflush_r+0x32>
 8002914:	0599      	lsls	r1, r3, #22
 8002916:	d402      	bmi.n	800291e <_fflush_r+0x32>
 8002918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800291a:	f7ff fee8 	bl	80026ee <__retarget_lock_acquire_recursive>
 800291e:	4628      	mov	r0, r5
 8002920:	4621      	mov	r1, r4
 8002922:	f7ff ff63 	bl	80027ec <__sflush_r>
 8002926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002928:	4605      	mov	r5, r0
 800292a:	07da      	lsls	r2, r3, #31
 800292c:	d4e4      	bmi.n	80028f8 <_fflush_r+0xc>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	059b      	lsls	r3, r3, #22
 8002932:	d4e1      	bmi.n	80028f8 <_fflush_r+0xc>
 8002934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002936:	f7ff fedb 	bl	80026f0 <__retarget_lock_release_recursive>
 800293a:	e7dd      	b.n	80028f8 <_fflush_r+0xc>

0800293c <fiprintf>:
 800293c:	b40e      	push	{r1, r2, r3}
 800293e:	b503      	push	{r0, r1, lr}
 8002940:	4601      	mov	r1, r0
 8002942:	ab03      	add	r3, sp, #12
 8002944:	4805      	ldr	r0, [pc, #20]	@ (800295c <fiprintf+0x20>)
 8002946:	f853 2b04 	ldr.w	r2, [r3], #4
 800294a:	6800      	ldr	r0, [r0, #0]
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	f000 f835 	bl	80029bc <_vfiprintf_r>
 8002952:	b002      	add	sp, #8
 8002954:	f85d eb04 	ldr.w	lr, [sp], #4
 8002958:	b003      	add	sp, #12
 800295a:	4770      	bx	lr
 800295c:	2000001c 	.word	0x2000001c

08002960 <abort>:
 8002960:	2006      	movs	r0, #6
 8002962:	b508      	push	{r3, lr}
 8002964:	f000 fb90 	bl	8003088 <raise>
 8002968:	2001      	movs	r0, #1
 800296a:	f7fe fbb6 	bl	80010da <_exit>

0800296e <__sfputc_r>:
 800296e:	6893      	ldr	r3, [r2, #8]
 8002970:	b410      	push	{r4}
 8002972:	3b01      	subs	r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	6093      	str	r3, [r2, #8]
 8002978:	da07      	bge.n	800298a <__sfputc_r+0x1c>
 800297a:	6994      	ldr	r4, [r2, #24]
 800297c:	42a3      	cmp	r3, r4
 800297e:	db01      	blt.n	8002984 <__sfputc_r+0x16>
 8002980:	290a      	cmp	r1, #10
 8002982:	d102      	bne.n	800298a <__sfputc_r+0x1c>
 8002984:	bc10      	pop	{r4}
 8002986:	f000 bac3 	b.w	8002f10 <__swbuf_r>
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	1c58      	adds	r0, r3, #1
 800298e:	6010      	str	r0, [r2, #0]
 8002990:	7019      	strb	r1, [r3, #0]
 8002992:	4608      	mov	r0, r1
 8002994:	bc10      	pop	{r4}
 8002996:	4770      	bx	lr

08002998 <__sfputs_r>:
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299a:	4606      	mov	r6, r0
 800299c:	460f      	mov	r7, r1
 800299e:	4614      	mov	r4, r2
 80029a0:	18d5      	adds	r5, r2, r3
 80029a2:	42ac      	cmp	r4, r5
 80029a4:	d101      	bne.n	80029aa <__sfputs_r+0x12>
 80029a6:	2000      	movs	r0, #0
 80029a8:	e007      	b.n	80029ba <__sfputs_r+0x22>
 80029aa:	463a      	mov	r2, r7
 80029ac:	4630      	mov	r0, r6
 80029ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029b2:	f7ff ffdc 	bl	800296e <__sfputc_r>
 80029b6:	1c43      	adds	r3, r0, #1
 80029b8:	d1f3      	bne.n	80029a2 <__sfputs_r+0xa>
 80029ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080029bc <_vfiprintf_r>:
 80029bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029c0:	460d      	mov	r5, r1
 80029c2:	4614      	mov	r4, r2
 80029c4:	4698      	mov	r8, r3
 80029c6:	4606      	mov	r6, r0
 80029c8:	b09d      	sub	sp, #116	@ 0x74
 80029ca:	b118      	cbz	r0, 80029d4 <_vfiprintf_r+0x18>
 80029cc:	6a03      	ldr	r3, [r0, #32]
 80029ce:	b90b      	cbnz	r3, 80029d4 <_vfiprintf_r+0x18>
 80029d0:	f7ff fd8a 	bl	80024e8 <__sinit>
 80029d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80029d6:	07d9      	lsls	r1, r3, #31
 80029d8:	d405      	bmi.n	80029e6 <_vfiprintf_r+0x2a>
 80029da:	89ab      	ldrh	r3, [r5, #12]
 80029dc:	059a      	lsls	r2, r3, #22
 80029de:	d402      	bmi.n	80029e6 <_vfiprintf_r+0x2a>
 80029e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80029e2:	f7ff fe84 	bl	80026ee <__retarget_lock_acquire_recursive>
 80029e6:	89ab      	ldrh	r3, [r5, #12]
 80029e8:	071b      	lsls	r3, r3, #28
 80029ea:	d501      	bpl.n	80029f0 <_vfiprintf_r+0x34>
 80029ec:	692b      	ldr	r3, [r5, #16]
 80029ee:	b99b      	cbnz	r3, 8002a18 <_vfiprintf_r+0x5c>
 80029f0:	4629      	mov	r1, r5
 80029f2:	4630      	mov	r0, r6
 80029f4:	f000 faca 	bl	8002f8c <__swsetup_r>
 80029f8:	b170      	cbz	r0, 8002a18 <_vfiprintf_r+0x5c>
 80029fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80029fc:	07dc      	lsls	r4, r3, #31
 80029fe:	d504      	bpl.n	8002a0a <_vfiprintf_r+0x4e>
 8002a00:	f04f 30ff 	mov.w	r0, #4294967295
 8002a04:	b01d      	add	sp, #116	@ 0x74
 8002a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a0a:	89ab      	ldrh	r3, [r5, #12]
 8002a0c:	0598      	lsls	r0, r3, #22
 8002a0e:	d4f7      	bmi.n	8002a00 <_vfiprintf_r+0x44>
 8002a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a12:	f7ff fe6d 	bl	80026f0 <__retarget_lock_release_recursive>
 8002a16:	e7f3      	b.n	8002a00 <_vfiprintf_r+0x44>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a1c:	2320      	movs	r3, #32
 8002a1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a22:	2330      	movs	r3, #48	@ 0x30
 8002a24:	f04f 0901 	mov.w	r9, #1
 8002a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a2c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002bd8 <_vfiprintf_r+0x21c>
 8002a30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a34:	4623      	mov	r3, r4
 8002a36:	469a      	mov	sl, r3
 8002a38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a3c:	b10a      	cbz	r2, 8002a42 <_vfiprintf_r+0x86>
 8002a3e:	2a25      	cmp	r2, #37	@ 0x25
 8002a40:	d1f9      	bne.n	8002a36 <_vfiprintf_r+0x7a>
 8002a42:	ebba 0b04 	subs.w	fp, sl, r4
 8002a46:	d00b      	beq.n	8002a60 <_vfiprintf_r+0xa4>
 8002a48:	465b      	mov	r3, fp
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	4630      	mov	r0, r6
 8002a50:	f7ff ffa2 	bl	8002998 <__sfputs_r>
 8002a54:	3001      	adds	r0, #1
 8002a56:	f000 80a7 	beq.w	8002ba8 <_vfiprintf_r+0x1ec>
 8002a5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a5c:	445a      	add	r2, fp
 8002a5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a60:	f89a 3000 	ldrb.w	r3, [sl]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	f000 809f 	beq.w	8002ba8 <_vfiprintf_r+0x1ec>
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a74:	f10a 0a01 	add.w	sl, sl, #1
 8002a78:	9304      	str	r3, [sp, #16]
 8002a7a:	9307      	str	r3, [sp, #28]
 8002a7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a80:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a82:	4654      	mov	r4, sl
 8002a84:	2205      	movs	r2, #5
 8002a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a8a:	4853      	ldr	r0, [pc, #332]	@ (8002bd8 <_vfiprintf_r+0x21c>)
 8002a8c:	f000 fb18 	bl	80030c0 <memchr>
 8002a90:	9a04      	ldr	r2, [sp, #16]
 8002a92:	b9d8      	cbnz	r0, 8002acc <_vfiprintf_r+0x110>
 8002a94:	06d1      	lsls	r1, r2, #27
 8002a96:	bf44      	itt	mi
 8002a98:	2320      	movmi	r3, #32
 8002a9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a9e:	0713      	lsls	r3, r2, #28
 8002aa0:	bf44      	itt	mi
 8002aa2:	232b      	movmi	r3, #43	@ 0x2b
 8002aa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002aa8:	f89a 3000 	ldrb.w	r3, [sl]
 8002aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8002aae:	d015      	beq.n	8002adc <_vfiprintf_r+0x120>
 8002ab0:	4654      	mov	r4, sl
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f04f 0c0a 	mov.w	ip, #10
 8002ab8:	9a07      	ldr	r2, [sp, #28]
 8002aba:	4621      	mov	r1, r4
 8002abc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ac0:	3b30      	subs	r3, #48	@ 0x30
 8002ac2:	2b09      	cmp	r3, #9
 8002ac4:	d94b      	bls.n	8002b5e <_vfiprintf_r+0x1a2>
 8002ac6:	b1b0      	cbz	r0, 8002af6 <_vfiprintf_r+0x13a>
 8002ac8:	9207      	str	r2, [sp, #28]
 8002aca:	e014      	b.n	8002af6 <_vfiprintf_r+0x13a>
 8002acc:	eba0 0308 	sub.w	r3, r0, r8
 8002ad0:	fa09 f303 	lsl.w	r3, r9, r3
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	46a2      	mov	sl, r4
 8002ad8:	9304      	str	r3, [sp, #16]
 8002ada:	e7d2      	b.n	8002a82 <_vfiprintf_r+0xc6>
 8002adc:	9b03      	ldr	r3, [sp, #12]
 8002ade:	1d19      	adds	r1, r3, #4
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	9103      	str	r1, [sp, #12]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	bfbb      	ittet	lt
 8002ae8:	425b      	neglt	r3, r3
 8002aea:	f042 0202 	orrlt.w	r2, r2, #2
 8002aee:	9307      	strge	r3, [sp, #28]
 8002af0:	9307      	strlt	r3, [sp, #28]
 8002af2:	bfb8      	it	lt
 8002af4:	9204      	strlt	r2, [sp, #16]
 8002af6:	7823      	ldrb	r3, [r4, #0]
 8002af8:	2b2e      	cmp	r3, #46	@ 0x2e
 8002afa:	d10a      	bne.n	8002b12 <_vfiprintf_r+0x156>
 8002afc:	7863      	ldrb	r3, [r4, #1]
 8002afe:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b00:	d132      	bne.n	8002b68 <_vfiprintf_r+0x1ac>
 8002b02:	9b03      	ldr	r3, [sp, #12]
 8002b04:	3402      	adds	r4, #2
 8002b06:	1d1a      	adds	r2, r3, #4
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	9203      	str	r2, [sp, #12]
 8002b0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b10:	9305      	str	r3, [sp, #20]
 8002b12:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002bdc <_vfiprintf_r+0x220>
 8002b16:	2203      	movs	r2, #3
 8002b18:	4650      	mov	r0, sl
 8002b1a:	7821      	ldrb	r1, [r4, #0]
 8002b1c:	f000 fad0 	bl	80030c0 <memchr>
 8002b20:	b138      	cbz	r0, 8002b32 <_vfiprintf_r+0x176>
 8002b22:	2240      	movs	r2, #64	@ 0x40
 8002b24:	9b04      	ldr	r3, [sp, #16]
 8002b26:	eba0 000a 	sub.w	r0, r0, sl
 8002b2a:	4082      	lsls	r2, r0
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	3401      	adds	r4, #1
 8002b30:	9304      	str	r3, [sp, #16]
 8002b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b36:	2206      	movs	r2, #6
 8002b38:	4829      	ldr	r0, [pc, #164]	@ (8002be0 <_vfiprintf_r+0x224>)
 8002b3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b3e:	f000 fabf 	bl	80030c0 <memchr>
 8002b42:	2800      	cmp	r0, #0
 8002b44:	d03f      	beq.n	8002bc6 <_vfiprintf_r+0x20a>
 8002b46:	4b27      	ldr	r3, [pc, #156]	@ (8002be4 <_vfiprintf_r+0x228>)
 8002b48:	bb1b      	cbnz	r3, 8002b92 <_vfiprintf_r+0x1d6>
 8002b4a:	9b03      	ldr	r3, [sp, #12]
 8002b4c:	3307      	adds	r3, #7
 8002b4e:	f023 0307 	bic.w	r3, r3, #7
 8002b52:	3308      	adds	r3, #8
 8002b54:	9303      	str	r3, [sp, #12]
 8002b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b58:	443b      	add	r3, r7
 8002b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b5c:	e76a      	b.n	8002a34 <_vfiprintf_r+0x78>
 8002b5e:	460c      	mov	r4, r1
 8002b60:	2001      	movs	r0, #1
 8002b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b66:	e7a8      	b.n	8002aba <_vfiprintf_r+0xfe>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f04f 0c0a 	mov.w	ip, #10
 8002b6e:	4619      	mov	r1, r3
 8002b70:	3401      	adds	r4, #1
 8002b72:	9305      	str	r3, [sp, #20]
 8002b74:	4620      	mov	r0, r4
 8002b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b7a:	3a30      	subs	r2, #48	@ 0x30
 8002b7c:	2a09      	cmp	r2, #9
 8002b7e:	d903      	bls.n	8002b88 <_vfiprintf_r+0x1cc>
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0c6      	beq.n	8002b12 <_vfiprintf_r+0x156>
 8002b84:	9105      	str	r1, [sp, #20]
 8002b86:	e7c4      	b.n	8002b12 <_vfiprintf_r+0x156>
 8002b88:	4604      	mov	r4, r0
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b90:	e7f0      	b.n	8002b74 <_vfiprintf_r+0x1b8>
 8002b92:	ab03      	add	r3, sp, #12
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	462a      	mov	r2, r5
 8002b98:	4630      	mov	r0, r6
 8002b9a:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <_vfiprintf_r+0x22c>)
 8002b9c:	a904      	add	r1, sp, #16
 8002b9e:	f3af 8000 	nop.w
 8002ba2:	4607      	mov	r7, r0
 8002ba4:	1c78      	adds	r0, r7, #1
 8002ba6:	d1d6      	bne.n	8002b56 <_vfiprintf_r+0x19a>
 8002ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002baa:	07d9      	lsls	r1, r3, #31
 8002bac:	d405      	bmi.n	8002bba <_vfiprintf_r+0x1fe>
 8002bae:	89ab      	ldrh	r3, [r5, #12]
 8002bb0:	059a      	lsls	r2, r3, #22
 8002bb2:	d402      	bmi.n	8002bba <_vfiprintf_r+0x1fe>
 8002bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002bb6:	f7ff fd9b 	bl	80026f0 <__retarget_lock_release_recursive>
 8002bba:	89ab      	ldrh	r3, [r5, #12]
 8002bbc:	065b      	lsls	r3, r3, #25
 8002bbe:	f53f af1f 	bmi.w	8002a00 <_vfiprintf_r+0x44>
 8002bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002bc4:	e71e      	b.n	8002a04 <_vfiprintf_r+0x48>
 8002bc6:	ab03      	add	r3, sp, #12
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	462a      	mov	r2, r5
 8002bcc:	4630      	mov	r0, r6
 8002bce:	4b06      	ldr	r3, [pc, #24]	@ (8002be8 <_vfiprintf_r+0x22c>)
 8002bd0:	a904      	add	r1, sp, #16
 8002bd2:	f000 f87d 	bl	8002cd0 <_printf_i>
 8002bd6:	e7e4      	b.n	8002ba2 <_vfiprintf_r+0x1e6>
 8002bd8:	080032c9 	.word	0x080032c9
 8002bdc:	080032cf 	.word	0x080032cf
 8002be0:	080032d3 	.word	0x080032d3
 8002be4:	00000000 	.word	0x00000000
 8002be8:	08002999 	.word	0x08002999

08002bec <_printf_common>:
 8002bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bf0:	4616      	mov	r6, r2
 8002bf2:	4698      	mov	r8, r3
 8002bf4:	688a      	ldr	r2, [r1, #8]
 8002bf6:	690b      	ldr	r3, [r1, #16]
 8002bf8:	4607      	mov	r7, r0
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	bfb8      	it	lt
 8002bfe:	4613      	movlt	r3, r2
 8002c00:	6033      	str	r3, [r6, #0]
 8002c02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002c06:	460c      	mov	r4, r1
 8002c08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002c0c:	b10a      	cbz	r2, 8002c12 <_printf_common+0x26>
 8002c0e:	3301      	adds	r3, #1
 8002c10:	6033      	str	r3, [r6, #0]
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	0699      	lsls	r1, r3, #26
 8002c16:	bf42      	ittt	mi
 8002c18:	6833      	ldrmi	r3, [r6, #0]
 8002c1a:	3302      	addmi	r3, #2
 8002c1c:	6033      	strmi	r3, [r6, #0]
 8002c1e:	6825      	ldr	r5, [r4, #0]
 8002c20:	f015 0506 	ands.w	r5, r5, #6
 8002c24:	d106      	bne.n	8002c34 <_printf_common+0x48>
 8002c26:	f104 0a19 	add.w	sl, r4, #25
 8002c2a:	68e3      	ldr	r3, [r4, #12]
 8002c2c:	6832      	ldr	r2, [r6, #0]
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	42ab      	cmp	r3, r5
 8002c32:	dc2b      	bgt.n	8002c8c <_printf_common+0xa0>
 8002c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c38:	6822      	ldr	r2, [r4, #0]
 8002c3a:	3b00      	subs	r3, #0
 8002c3c:	bf18      	it	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	0692      	lsls	r2, r2, #26
 8002c42:	d430      	bmi.n	8002ca6 <_printf_common+0xba>
 8002c44:	4641      	mov	r1, r8
 8002c46:	4638      	mov	r0, r7
 8002c48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c4c:	47c8      	blx	r9
 8002c4e:	3001      	adds	r0, #1
 8002c50:	d023      	beq.n	8002c9a <_printf_common+0xae>
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	6922      	ldr	r2, [r4, #16]
 8002c56:	f003 0306 	and.w	r3, r3, #6
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf14      	ite	ne
 8002c5e:	2500      	movne	r5, #0
 8002c60:	6833      	ldreq	r3, [r6, #0]
 8002c62:	f04f 0600 	mov.w	r6, #0
 8002c66:	bf08      	it	eq
 8002c68:	68e5      	ldreq	r5, [r4, #12]
 8002c6a:	f104 041a 	add.w	r4, r4, #26
 8002c6e:	bf08      	it	eq
 8002c70:	1aed      	subeq	r5, r5, r3
 8002c72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c76:	bf08      	it	eq
 8002c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	bfc4      	itt	gt
 8002c80:	1a9b      	subgt	r3, r3, r2
 8002c82:	18ed      	addgt	r5, r5, r3
 8002c84:	42b5      	cmp	r5, r6
 8002c86:	d11a      	bne.n	8002cbe <_printf_common+0xd2>
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e008      	b.n	8002c9e <_printf_common+0xb2>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	4652      	mov	r2, sl
 8002c90:	4641      	mov	r1, r8
 8002c92:	4638      	mov	r0, r7
 8002c94:	47c8      	blx	r9
 8002c96:	3001      	adds	r0, #1
 8002c98:	d103      	bne.n	8002ca2 <_printf_common+0xb6>
 8002c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ca2:	3501      	adds	r5, #1
 8002ca4:	e7c1      	b.n	8002c2a <_printf_common+0x3e>
 8002ca6:	2030      	movs	r0, #48	@ 0x30
 8002ca8:	18e1      	adds	r1, r4, r3
 8002caa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002cb4:	4422      	add	r2, r4
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002cbc:	e7c2      	b.n	8002c44 <_printf_common+0x58>
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	4622      	mov	r2, r4
 8002cc2:	4641      	mov	r1, r8
 8002cc4:	4638      	mov	r0, r7
 8002cc6:	47c8      	blx	r9
 8002cc8:	3001      	adds	r0, #1
 8002cca:	d0e6      	beq.n	8002c9a <_printf_common+0xae>
 8002ccc:	3601      	adds	r6, #1
 8002cce:	e7d9      	b.n	8002c84 <_printf_common+0x98>

08002cd0 <_printf_i>:
 8002cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd4:	7e0f      	ldrb	r7, [r1, #24]
 8002cd6:	4691      	mov	r9, r2
 8002cd8:	2f78      	cmp	r7, #120	@ 0x78
 8002cda:	4680      	mov	r8, r0
 8002cdc:	460c      	mov	r4, r1
 8002cde:	469a      	mov	sl, r3
 8002ce0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ce2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002ce6:	d807      	bhi.n	8002cf8 <_printf_i+0x28>
 8002ce8:	2f62      	cmp	r7, #98	@ 0x62
 8002cea:	d80a      	bhi.n	8002d02 <_printf_i+0x32>
 8002cec:	2f00      	cmp	r7, #0
 8002cee:	f000 80d3 	beq.w	8002e98 <_printf_i+0x1c8>
 8002cf2:	2f58      	cmp	r7, #88	@ 0x58
 8002cf4:	f000 80ba 	beq.w	8002e6c <_printf_i+0x19c>
 8002cf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cfc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002d00:	e03a      	b.n	8002d78 <_printf_i+0xa8>
 8002d02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002d06:	2b15      	cmp	r3, #21
 8002d08:	d8f6      	bhi.n	8002cf8 <_printf_i+0x28>
 8002d0a:	a101      	add	r1, pc, #4	@ (adr r1, 8002d10 <_printf_i+0x40>)
 8002d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002d10:	08002d69 	.word	0x08002d69
 8002d14:	08002d7d 	.word	0x08002d7d
 8002d18:	08002cf9 	.word	0x08002cf9
 8002d1c:	08002cf9 	.word	0x08002cf9
 8002d20:	08002cf9 	.word	0x08002cf9
 8002d24:	08002cf9 	.word	0x08002cf9
 8002d28:	08002d7d 	.word	0x08002d7d
 8002d2c:	08002cf9 	.word	0x08002cf9
 8002d30:	08002cf9 	.word	0x08002cf9
 8002d34:	08002cf9 	.word	0x08002cf9
 8002d38:	08002cf9 	.word	0x08002cf9
 8002d3c:	08002e7f 	.word	0x08002e7f
 8002d40:	08002da7 	.word	0x08002da7
 8002d44:	08002e39 	.word	0x08002e39
 8002d48:	08002cf9 	.word	0x08002cf9
 8002d4c:	08002cf9 	.word	0x08002cf9
 8002d50:	08002ea1 	.word	0x08002ea1
 8002d54:	08002cf9 	.word	0x08002cf9
 8002d58:	08002da7 	.word	0x08002da7
 8002d5c:	08002cf9 	.word	0x08002cf9
 8002d60:	08002cf9 	.word	0x08002cf9
 8002d64:	08002e41 	.word	0x08002e41
 8002d68:	6833      	ldr	r3, [r6, #0]
 8002d6a:	1d1a      	adds	r2, r3, #4
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6032      	str	r2, [r6, #0]
 8002d70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e09e      	b.n	8002eba <_printf_i+0x1ea>
 8002d7c:	6833      	ldr	r3, [r6, #0]
 8002d7e:	6820      	ldr	r0, [r4, #0]
 8002d80:	1d19      	adds	r1, r3, #4
 8002d82:	6031      	str	r1, [r6, #0]
 8002d84:	0606      	lsls	r6, r0, #24
 8002d86:	d501      	bpl.n	8002d8c <_printf_i+0xbc>
 8002d88:	681d      	ldr	r5, [r3, #0]
 8002d8a:	e003      	b.n	8002d94 <_printf_i+0xc4>
 8002d8c:	0645      	lsls	r5, r0, #25
 8002d8e:	d5fb      	bpl.n	8002d88 <_printf_i+0xb8>
 8002d90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d94:	2d00      	cmp	r5, #0
 8002d96:	da03      	bge.n	8002da0 <_printf_i+0xd0>
 8002d98:	232d      	movs	r3, #45	@ 0x2d
 8002d9a:	426d      	negs	r5, r5
 8002d9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002da0:	230a      	movs	r3, #10
 8002da2:	4859      	ldr	r0, [pc, #356]	@ (8002f08 <_printf_i+0x238>)
 8002da4:	e011      	b.n	8002dca <_printf_i+0xfa>
 8002da6:	6821      	ldr	r1, [r4, #0]
 8002da8:	6833      	ldr	r3, [r6, #0]
 8002daa:	0608      	lsls	r0, r1, #24
 8002dac:	f853 5b04 	ldr.w	r5, [r3], #4
 8002db0:	d402      	bmi.n	8002db8 <_printf_i+0xe8>
 8002db2:	0649      	lsls	r1, r1, #25
 8002db4:	bf48      	it	mi
 8002db6:	b2ad      	uxthmi	r5, r5
 8002db8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002dba:	6033      	str	r3, [r6, #0]
 8002dbc:	bf14      	ite	ne
 8002dbe:	230a      	movne	r3, #10
 8002dc0:	2308      	moveq	r3, #8
 8002dc2:	4851      	ldr	r0, [pc, #324]	@ (8002f08 <_printf_i+0x238>)
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002dca:	6866      	ldr	r6, [r4, #4]
 8002dcc:	2e00      	cmp	r6, #0
 8002dce:	bfa8      	it	ge
 8002dd0:	6821      	ldrge	r1, [r4, #0]
 8002dd2:	60a6      	str	r6, [r4, #8]
 8002dd4:	bfa4      	itt	ge
 8002dd6:	f021 0104 	bicge.w	r1, r1, #4
 8002dda:	6021      	strge	r1, [r4, #0]
 8002ddc:	b90d      	cbnz	r5, 8002de2 <_printf_i+0x112>
 8002dde:	2e00      	cmp	r6, #0
 8002de0:	d04b      	beq.n	8002e7a <_printf_i+0x1aa>
 8002de2:	4616      	mov	r6, r2
 8002de4:	fbb5 f1f3 	udiv	r1, r5, r3
 8002de8:	fb03 5711 	mls	r7, r3, r1, r5
 8002dec:	5dc7      	ldrb	r7, [r0, r7]
 8002dee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002df2:	462f      	mov	r7, r5
 8002df4:	42bb      	cmp	r3, r7
 8002df6:	460d      	mov	r5, r1
 8002df8:	d9f4      	bls.n	8002de4 <_printf_i+0x114>
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d10b      	bne.n	8002e16 <_printf_i+0x146>
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	07df      	lsls	r7, r3, #31
 8002e02:	d508      	bpl.n	8002e16 <_printf_i+0x146>
 8002e04:	6923      	ldr	r3, [r4, #16]
 8002e06:	6861      	ldr	r1, [r4, #4]
 8002e08:	4299      	cmp	r1, r3
 8002e0a:	bfde      	ittt	le
 8002e0c:	2330      	movle	r3, #48	@ 0x30
 8002e0e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002e12:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002e16:	1b92      	subs	r2, r2, r6
 8002e18:	6122      	str	r2, [r4, #16]
 8002e1a:	464b      	mov	r3, r9
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	4640      	mov	r0, r8
 8002e20:	f8cd a000 	str.w	sl, [sp]
 8002e24:	aa03      	add	r2, sp, #12
 8002e26:	f7ff fee1 	bl	8002bec <_printf_common>
 8002e2a:	3001      	adds	r0, #1
 8002e2c:	d14a      	bne.n	8002ec4 <_printf_i+0x1f4>
 8002e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8002e32:	b004      	add	sp, #16
 8002e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e38:	6823      	ldr	r3, [r4, #0]
 8002e3a:	f043 0320 	orr.w	r3, r3, #32
 8002e3e:	6023      	str	r3, [r4, #0]
 8002e40:	2778      	movs	r7, #120	@ 0x78
 8002e42:	4832      	ldr	r0, [pc, #200]	@ (8002f0c <_printf_i+0x23c>)
 8002e44:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	6831      	ldr	r1, [r6, #0]
 8002e4c:	061f      	lsls	r7, r3, #24
 8002e4e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e52:	d402      	bmi.n	8002e5a <_printf_i+0x18a>
 8002e54:	065f      	lsls	r7, r3, #25
 8002e56:	bf48      	it	mi
 8002e58:	b2ad      	uxthmi	r5, r5
 8002e5a:	6031      	str	r1, [r6, #0]
 8002e5c:	07d9      	lsls	r1, r3, #31
 8002e5e:	bf44      	itt	mi
 8002e60:	f043 0320 	orrmi.w	r3, r3, #32
 8002e64:	6023      	strmi	r3, [r4, #0]
 8002e66:	b11d      	cbz	r5, 8002e70 <_printf_i+0x1a0>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	e7ab      	b.n	8002dc4 <_printf_i+0xf4>
 8002e6c:	4826      	ldr	r0, [pc, #152]	@ (8002f08 <_printf_i+0x238>)
 8002e6e:	e7e9      	b.n	8002e44 <_printf_i+0x174>
 8002e70:	6823      	ldr	r3, [r4, #0]
 8002e72:	f023 0320 	bic.w	r3, r3, #32
 8002e76:	6023      	str	r3, [r4, #0]
 8002e78:	e7f6      	b.n	8002e68 <_printf_i+0x198>
 8002e7a:	4616      	mov	r6, r2
 8002e7c:	e7bd      	b.n	8002dfa <_printf_i+0x12a>
 8002e7e:	6833      	ldr	r3, [r6, #0]
 8002e80:	6825      	ldr	r5, [r4, #0]
 8002e82:	1d18      	adds	r0, r3, #4
 8002e84:	6961      	ldr	r1, [r4, #20]
 8002e86:	6030      	str	r0, [r6, #0]
 8002e88:	062e      	lsls	r6, r5, #24
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	d501      	bpl.n	8002e92 <_printf_i+0x1c2>
 8002e8e:	6019      	str	r1, [r3, #0]
 8002e90:	e002      	b.n	8002e98 <_printf_i+0x1c8>
 8002e92:	0668      	lsls	r0, r5, #25
 8002e94:	d5fb      	bpl.n	8002e8e <_printf_i+0x1be>
 8002e96:	8019      	strh	r1, [r3, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	4616      	mov	r6, r2
 8002e9c:	6123      	str	r3, [r4, #16]
 8002e9e:	e7bc      	b.n	8002e1a <_printf_i+0x14a>
 8002ea0:	6833      	ldr	r3, [r6, #0]
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	1d1a      	adds	r2, r3, #4
 8002ea6:	6032      	str	r2, [r6, #0]
 8002ea8:	681e      	ldr	r6, [r3, #0]
 8002eaa:	6862      	ldr	r2, [r4, #4]
 8002eac:	4630      	mov	r0, r6
 8002eae:	f000 f907 	bl	80030c0 <memchr>
 8002eb2:	b108      	cbz	r0, 8002eb8 <_printf_i+0x1e8>
 8002eb4:	1b80      	subs	r0, r0, r6
 8002eb6:	6060      	str	r0, [r4, #4]
 8002eb8:	6863      	ldr	r3, [r4, #4]
 8002eba:	6123      	str	r3, [r4, #16]
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ec2:	e7aa      	b.n	8002e1a <_printf_i+0x14a>
 8002ec4:	4632      	mov	r2, r6
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	4640      	mov	r0, r8
 8002eca:	6923      	ldr	r3, [r4, #16]
 8002ecc:	47d0      	blx	sl
 8002ece:	3001      	adds	r0, #1
 8002ed0:	d0ad      	beq.n	8002e2e <_printf_i+0x15e>
 8002ed2:	6823      	ldr	r3, [r4, #0]
 8002ed4:	079b      	lsls	r3, r3, #30
 8002ed6:	d413      	bmi.n	8002f00 <_printf_i+0x230>
 8002ed8:	68e0      	ldr	r0, [r4, #12]
 8002eda:	9b03      	ldr	r3, [sp, #12]
 8002edc:	4298      	cmp	r0, r3
 8002ede:	bfb8      	it	lt
 8002ee0:	4618      	movlt	r0, r3
 8002ee2:	e7a6      	b.n	8002e32 <_printf_i+0x162>
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	4632      	mov	r2, r6
 8002ee8:	4649      	mov	r1, r9
 8002eea:	4640      	mov	r0, r8
 8002eec:	47d0      	blx	sl
 8002eee:	3001      	adds	r0, #1
 8002ef0:	d09d      	beq.n	8002e2e <_printf_i+0x15e>
 8002ef2:	3501      	adds	r5, #1
 8002ef4:	68e3      	ldr	r3, [r4, #12]
 8002ef6:	9903      	ldr	r1, [sp, #12]
 8002ef8:	1a5b      	subs	r3, r3, r1
 8002efa:	42ab      	cmp	r3, r5
 8002efc:	dcf2      	bgt.n	8002ee4 <_printf_i+0x214>
 8002efe:	e7eb      	b.n	8002ed8 <_printf_i+0x208>
 8002f00:	2500      	movs	r5, #0
 8002f02:	f104 0619 	add.w	r6, r4, #25
 8002f06:	e7f5      	b.n	8002ef4 <_printf_i+0x224>
 8002f08:	080032da 	.word	0x080032da
 8002f0c:	080032eb 	.word	0x080032eb

08002f10 <__swbuf_r>:
 8002f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f12:	460e      	mov	r6, r1
 8002f14:	4614      	mov	r4, r2
 8002f16:	4605      	mov	r5, r0
 8002f18:	b118      	cbz	r0, 8002f22 <__swbuf_r+0x12>
 8002f1a:	6a03      	ldr	r3, [r0, #32]
 8002f1c:	b90b      	cbnz	r3, 8002f22 <__swbuf_r+0x12>
 8002f1e:	f7ff fae3 	bl	80024e8 <__sinit>
 8002f22:	69a3      	ldr	r3, [r4, #24]
 8002f24:	60a3      	str	r3, [r4, #8]
 8002f26:	89a3      	ldrh	r3, [r4, #12]
 8002f28:	071a      	lsls	r2, r3, #28
 8002f2a:	d501      	bpl.n	8002f30 <__swbuf_r+0x20>
 8002f2c:	6923      	ldr	r3, [r4, #16]
 8002f2e:	b943      	cbnz	r3, 8002f42 <__swbuf_r+0x32>
 8002f30:	4621      	mov	r1, r4
 8002f32:	4628      	mov	r0, r5
 8002f34:	f000 f82a 	bl	8002f8c <__swsetup_r>
 8002f38:	b118      	cbz	r0, 8002f42 <__swbuf_r+0x32>
 8002f3a:	f04f 37ff 	mov.w	r7, #4294967295
 8002f3e:	4638      	mov	r0, r7
 8002f40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	6922      	ldr	r2, [r4, #16]
 8002f46:	b2f6      	uxtb	r6, r6
 8002f48:	1a98      	subs	r0, r3, r2
 8002f4a:	6963      	ldr	r3, [r4, #20]
 8002f4c:	4637      	mov	r7, r6
 8002f4e:	4283      	cmp	r3, r0
 8002f50:	dc05      	bgt.n	8002f5e <__swbuf_r+0x4e>
 8002f52:	4621      	mov	r1, r4
 8002f54:	4628      	mov	r0, r5
 8002f56:	f7ff fcc9 	bl	80028ec <_fflush_r>
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d1ed      	bne.n	8002f3a <__swbuf_r+0x2a>
 8002f5e:	68a3      	ldr	r3, [r4, #8]
 8002f60:	3b01      	subs	r3, #1
 8002f62:	60a3      	str	r3, [r4, #8]
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	6022      	str	r2, [r4, #0]
 8002f6a:	701e      	strb	r6, [r3, #0]
 8002f6c:	6962      	ldr	r2, [r4, #20]
 8002f6e:	1c43      	adds	r3, r0, #1
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d004      	beq.n	8002f7e <__swbuf_r+0x6e>
 8002f74:	89a3      	ldrh	r3, [r4, #12]
 8002f76:	07db      	lsls	r3, r3, #31
 8002f78:	d5e1      	bpl.n	8002f3e <__swbuf_r+0x2e>
 8002f7a:	2e0a      	cmp	r6, #10
 8002f7c:	d1df      	bne.n	8002f3e <__swbuf_r+0x2e>
 8002f7e:	4621      	mov	r1, r4
 8002f80:	4628      	mov	r0, r5
 8002f82:	f7ff fcb3 	bl	80028ec <_fflush_r>
 8002f86:	2800      	cmp	r0, #0
 8002f88:	d0d9      	beq.n	8002f3e <__swbuf_r+0x2e>
 8002f8a:	e7d6      	b.n	8002f3a <__swbuf_r+0x2a>

08002f8c <__swsetup_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4b29      	ldr	r3, [pc, #164]	@ (8003034 <__swsetup_r+0xa8>)
 8002f90:	4605      	mov	r5, r0
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	460c      	mov	r4, r1
 8002f96:	b118      	cbz	r0, 8002fa0 <__swsetup_r+0x14>
 8002f98:	6a03      	ldr	r3, [r0, #32]
 8002f9a:	b90b      	cbnz	r3, 8002fa0 <__swsetup_r+0x14>
 8002f9c:	f7ff faa4 	bl	80024e8 <__sinit>
 8002fa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fa4:	0719      	lsls	r1, r3, #28
 8002fa6:	d422      	bmi.n	8002fee <__swsetup_r+0x62>
 8002fa8:	06da      	lsls	r2, r3, #27
 8002faa:	d407      	bmi.n	8002fbc <__swsetup_r+0x30>
 8002fac:	2209      	movs	r2, #9
 8002fae:	602a      	str	r2, [r5, #0]
 8002fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	81a3      	strh	r3, [r4, #12]
 8002fba:	e033      	b.n	8003024 <__swsetup_r+0x98>
 8002fbc:	0758      	lsls	r0, r3, #29
 8002fbe:	d512      	bpl.n	8002fe6 <__swsetup_r+0x5a>
 8002fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fc2:	b141      	cbz	r1, 8002fd6 <__swsetup_r+0x4a>
 8002fc4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fc8:	4299      	cmp	r1, r3
 8002fca:	d002      	beq.n	8002fd2 <__swsetup_r+0x46>
 8002fcc:	4628      	mov	r0, r5
 8002fce:	f7ff fbbd 	bl	800274c <_free_r>
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002fd6:	89a3      	ldrh	r3, [r4, #12]
 8002fd8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	6063      	str	r3, [r4, #4]
 8002fe2:	6923      	ldr	r3, [r4, #16]
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	89a3      	ldrh	r3, [r4, #12]
 8002fe8:	f043 0308 	orr.w	r3, r3, #8
 8002fec:	81a3      	strh	r3, [r4, #12]
 8002fee:	6923      	ldr	r3, [r4, #16]
 8002ff0:	b94b      	cbnz	r3, 8003006 <__swsetup_r+0x7a>
 8002ff2:	89a3      	ldrh	r3, [r4, #12]
 8002ff4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ff8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ffc:	d003      	beq.n	8003006 <__swsetup_r+0x7a>
 8002ffe:	4621      	mov	r1, r4
 8003000:	4628      	mov	r0, r5
 8003002:	f000 f890 	bl	8003126 <__smakebuf_r>
 8003006:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800300a:	f013 0201 	ands.w	r2, r3, #1
 800300e:	d00a      	beq.n	8003026 <__swsetup_r+0x9a>
 8003010:	2200      	movs	r2, #0
 8003012:	60a2      	str	r2, [r4, #8]
 8003014:	6962      	ldr	r2, [r4, #20]
 8003016:	4252      	negs	r2, r2
 8003018:	61a2      	str	r2, [r4, #24]
 800301a:	6922      	ldr	r2, [r4, #16]
 800301c:	b942      	cbnz	r2, 8003030 <__swsetup_r+0xa4>
 800301e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003022:	d1c5      	bne.n	8002fb0 <__swsetup_r+0x24>
 8003024:	bd38      	pop	{r3, r4, r5, pc}
 8003026:	0799      	lsls	r1, r3, #30
 8003028:	bf58      	it	pl
 800302a:	6962      	ldrpl	r2, [r4, #20]
 800302c:	60a2      	str	r2, [r4, #8]
 800302e:	e7f4      	b.n	800301a <__swsetup_r+0x8e>
 8003030:	2000      	movs	r0, #0
 8003032:	e7f7      	b.n	8003024 <__swsetup_r+0x98>
 8003034:	2000001c 	.word	0x2000001c

08003038 <_raise_r>:
 8003038:	291f      	cmp	r1, #31
 800303a:	b538      	push	{r3, r4, r5, lr}
 800303c:	4605      	mov	r5, r0
 800303e:	460c      	mov	r4, r1
 8003040:	d904      	bls.n	800304c <_raise_r+0x14>
 8003042:	2316      	movs	r3, #22
 8003044:	6003      	str	r3, [r0, #0]
 8003046:	f04f 30ff 	mov.w	r0, #4294967295
 800304a:	bd38      	pop	{r3, r4, r5, pc}
 800304c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800304e:	b112      	cbz	r2, 8003056 <_raise_r+0x1e>
 8003050:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003054:	b94b      	cbnz	r3, 800306a <_raise_r+0x32>
 8003056:	4628      	mov	r0, r5
 8003058:	f000 f830 	bl	80030bc <_getpid_r>
 800305c:	4622      	mov	r2, r4
 800305e:	4601      	mov	r1, r0
 8003060:	4628      	mov	r0, r5
 8003062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003066:	f000 b817 	b.w	8003098 <_kill_r>
 800306a:	2b01      	cmp	r3, #1
 800306c:	d00a      	beq.n	8003084 <_raise_r+0x4c>
 800306e:	1c59      	adds	r1, r3, #1
 8003070:	d103      	bne.n	800307a <_raise_r+0x42>
 8003072:	2316      	movs	r3, #22
 8003074:	6003      	str	r3, [r0, #0]
 8003076:	2001      	movs	r0, #1
 8003078:	e7e7      	b.n	800304a <_raise_r+0x12>
 800307a:	2100      	movs	r1, #0
 800307c:	4620      	mov	r0, r4
 800307e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003082:	4798      	blx	r3
 8003084:	2000      	movs	r0, #0
 8003086:	e7e0      	b.n	800304a <_raise_r+0x12>

08003088 <raise>:
 8003088:	4b02      	ldr	r3, [pc, #8]	@ (8003094 <raise+0xc>)
 800308a:	4601      	mov	r1, r0
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	f7ff bfd3 	b.w	8003038 <_raise_r>
 8003092:	bf00      	nop
 8003094:	2000001c 	.word	0x2000001c

08003098 <_kill_r>:
 8003098:	b538      	push	{r3, r4, r5, lr}
 800309a:	2300      	movs	r3, #0
 800309c:	4d06      	ldr	r5, [pc, #24]	@ (80030b8 <_kill_r+0x20>)
 800309e:	4604      	mov	r4, r0
 80030a0:	4608      	mov	r0, r1
 80030a2:	4611      	mov	r1, r2
 80030a4:	602b      	str	r3, [r5, #0]
 80030a6:	f7fe f808 	bl	80010ba <_kill>
 80030aa:	1c43      	adds	r3, r0, #1
 80030ac:	d102      	bne.n	80030b4 <_kill_r+0x1c>
 80030ae:	682b      	ldr	r3, [r5, #0]
 80030b0:	b103      	cbz	r3, 80030b4 <_kill_r+0x1c>
 80030b2:	6023      	str	r3, [r4, #0]
 80030b4:	bd38      	pop	{r3, r4, r5, pc}
 80030b6:	bf00      	nop
 80030b8:	20000230 	.word	0x20000230

080030bc <_getpid_r>:
 80030bc:	f7fd bff6 	b.w	80010ac <_getpid>

080030c0 <memchr>:
 80030c0:	4603      	mov	r3, r0
 80030c2:	b510      	push	{r4, lr}
 80030c4:	b2c9      	uxtb	r1, r1
 80030c6:	4402      	add	r2, r0
 80030c8:	4293      	cmp	r3, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	d101      	bne.n	80030d2 <memchr+0x12>
 80030ce:	2000      	movs	r0, #0
 80030d0:	e003      	b.n	80030da <memchr+0x1a>
 80030d2:	7804      	ldrb	r4, [r0, #0]
 80030d4:	3301      	adds	r3, #1
 80030d6:	428c      	cmp	r4, r1
 80030d8:	d1f6      	bne.n	80030c8 <memchr+0x8>
 80030da:	bd10      	pop	{r4, pc}

080030dc <__swhatbuf_r>:
 80030dc:	b570      	push	{r4, r5, r6, lr}
 80030de:	460c      	mov	r4, r1
 80030e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030e4:	4615      	mov	r5, r2
 80030e6:	2900      	cmp	r1, #0
 80030e8:	461e      	mov	r6, r3
 80030ea:	b096      	sub	sp, #88	@ 0x58
 80030ec:	da0c      	bge.n	8003108 <__swhatbuf_r+0x2c>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	2100      	movs	r1, #0
 80030f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030f6:	bf14      	ite	ne
 80030f8:	2340      	movne	r3, #64	@ 0x40
 80030fa:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80030fe:	2000      	movs	r0, #0
 8003100:	6031      	str	r1, [r6, #0]
 8003102:	602b      	str	r3, [r5, #0]
 8003104:	b016      	add	sp, #88	@ 0x58
 8003106:	bd70      	pop	{r4, r5, r6, pc}
 8003108:	466a      	mov	r2, sp
 800310a:	f000 f849 	bl	80031a0 <_fstat_r>
 800310e:	2800      	cmp	r0, #0
 8003110:	dbed      	blt.n	80030ee <__swhatbuf_r+0x12>
 8003112:	9901      	ldr	r1, [sp, #4]
 8003114:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003118:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800311c:	4259      	negs	r1, r3
 800311e:	4159      	adcs	r1, r3
 8003120:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003124:	e7eb      	b.n	80030fe <__swhatbuf_r+0x22>

08003126 <__smakebuf_r>:
 8003126:	898b      	ldrh	r3, [r1, #12]
 8003128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800312a:	079d      	lsls	r5, r3, #30
 800312c:	4606      	mov	r6, r0
 800312e:	460c      	mov	r4, r1
 8003130:	d507      	bpl.n	8003142 <__smakebuf_r+0x1c>
 8003132:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003136:	6023      	str	r3, [r4, #0]
 8003138:	6123      	str	r3, [r4, #16]
 800313a:	2301      	movs	r3, #1
 800313c:	6163      	str	r3, [r4, #20]
 800313e:	b003      	add	sp, #12
 8003140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003142:	466a      	mov	r2, sp
 8003144:	ab01      	add	r3, sp, #4
 8003146:	f7ff ffc9 	bl	80030dc <__swhatbuf_r>
 800314a:	9f00      	ldr	r7, [sp, #0]
 800314c:	4605      	mov	r5, r0
 800314e:	4639      	mov	r1, r7
 8003150:	4630      	mov	r0, r6
 8003152:	f7ff f83d 	bl	80021d0 <_malloc_r>
 8003156:	b948      	cbnz	r0, 800316c <__smakebuf_r+0x46>
 8003158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800315c:	059a      	lsls	r2, r3, #22
 800315e:	d4ee      	bmi.n	800313e <__smakebuf_r+0x18>
 8003160:	f023 0303 	bic.w	r3, r3, #3
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	81a3      	strh	r3, [r4, #12]
 800316a:	e7e2      	b.n	8003132 <__smakebuf_r+0xc>
 800316c:	89a3      	ldrh	r3, [r4, #12]
 800316e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003176:	81a3      	strh	r3, [r4, #12]
 8003178:	9b01      	ldr	r3, [sp, #4]
 800317a:	6020      	str	r0, [r4, #0]
 800317c:	b15b      	cbz	r3, 8003196 <__smakebuf_r+0x70>
 800317e:	4630      	mov	r0, r6
 8003180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003184:	f000 f81e 	bl	80031c4 <_isatty_r>
 8003188:	b128      	cbz	r0, 8003196 <__smakebuf_r+0x70>
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	f023 0303 	bic.w	r3, r3, #3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	81a3      	strh	r3, [r4, #12]
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	431d      	orrs	r5, r3
 800319a:	81a5      	strh	r5, [r4, #12]
 800319c:	e7cf      	b.n	800313e <__smakebuf_r+0x18>
	...

080031a0 <_fstat_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	2300      	movs	r3, #0
 80031a4:	4d06      	ldr	r5, [pc, #24]	@ (80031c0 <_fstat_r+0x20>)
 80031a6:	4604      	mov	r4, r0
 80031a8:	4608      	mov	r0, r1
 80031aa:	4611      	mov	r1, r2
 80031ac:	602b      	str	r3, [r5, #0]
 80031ae:	f7fd ffe3 	bl	8001178 <_fstat>
 80031b2:	1c43      	adds	r3, r0, #1
 80031b4:	d102      	bne.n	80031bc <_fstat_r+0x1c>
 80031b6:	682b      	ldr	r3, [r5, #0]
 80031b8:	b103      	cbz	r3, 80031bc <_fstat_r+0x1c>
 80031ba:	6023      	str	r3, [r4, #0]
 80031bc:	bd38      	pop	{r3, r4, r5, pc}
 80031be:	bf00      	nop
 80031c0:	20000230 	.word	0x20000230

080031c4 <_isatty_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	2300      	movs	r3, #0
 80031c8:	4d05      	ldr	r5, [pc, #20]	@ (80031e0 <_isatty_r+0x1c>)
 80031ca:	4604      	mov	r4, r0
 80031cc:	4608      	mov	r0, r1
 80031ce:	602b      	str	r3, [r5, #0]
 80031d0:	f7fd ffe1 	bl	8001196 <_isatty>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d102      	bne.n	80031de <_isatty_r+0x1a>
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	b103      	cbz	r3, 80031de <_isatty_r+0x1a>
 80031dc:	6023      	str	r3, [r4, #0]
 80031de:	bd38      	pop	{r3, r4, r5, pc}
 80031e0:	20000230 	.word	0x20000230

080031e4 <_init>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr

080031f0 <_fini>:
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	bf00      	nop
 80031f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031f6:	bc08      	pop	{r3}
 80031f8:	469e      	mov	lr, r3
 80031fa:	4770      	bx	lr
