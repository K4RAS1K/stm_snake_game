
snacke_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bfc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002d08  08002d08  00003d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e08  08002e08  0000406c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e08  08002e08  0000406c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e08  08002e08  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e08  08002e08  00003e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e0c  08002e0c  00003e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002e10  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000006c  08002e7c  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08002e7c  0000423c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005717  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001660  00000000  00000000  000097ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000b4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017827  00000000  00000000  0000ba09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008208  00000000  00000000  00023230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081347  00000000  00000000  0002b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac77f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002398  00000000  00000000  000ac7c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000aeb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cf0 	.word	0x08002cf0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002cf0 	.word	0x08002cf0

0800014c <initialize_body>:
    uint8_t x1;
    uint8_t y1;
} Snake;


Snake* initialize_body() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
uint8_t size = 2;
 8000152:	2302      	movs	r3, #2
 8000154:	71bb      	strb	r3, [r7, #6]
Snake *body = malloc(size * sizeof(Snake));
 8000156:	79bb      	ldrb	r3, [r7, #6]
 8000158:	009b      	lsls	r3, r3, #2
 800015a:	4618      	mov	r0, r3
 800015c:	f001 fdb2 	bl	8001cc4 <malloc>
 8000160:	4603      	mov	r3, r0
 8000162:	603b      	str	r3, [r7, #0]
for (uint8_t i = 0; i < size; i++) {
 8000164:	2300      	movs	r3, #0
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	e022      	b.n	80001b0 <initialize_body+0x64>
	  body[i].x0 = 5+i;
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	009b      	lsls	r3, r3, #2
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	4413      	add	r3, r2
 8000172:	79fa      	ldrb	r2, [r7, #7]
 8000174:	3205      	adds	r2, #5
 8000176:	b2d2      	uxtb	r2, r2
 8000178:	701a      	strb	r2, [r3, #0]
	  body[i].y0 = 5+i;
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	683a      	ldr	r2, [r7, #0]
 8000180:	4413      	add	r3, r2
 8000182:	79fa      	ldrb	r2, [r7, #7]
 8000184:	3205      	adds	r2, #5
 8000186:	b2d2      	uxtb	r2, r2
 8000188:	705a      	strb	r2, [r3, #1]
	  body[i].x1 = 5+i;
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	683a      	ldr	r2, [r7, #0]
 8000190:	4413      	add	r3, r2
 8000192:	79fa      	ldrb	r2, [r7, #7]
 8000194:	3205      	adds	r2, #5
 8000196:	b2d2      	uxtb	r2, r2
 8000198:	709a      	strb	r2, [r3, #2]
	  body[i].y1 = 5+i;
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	683a      	ldr	r2, [r7, #0]
 80001a0:	4413      	add	r3, r2
 80001a2:	79fa      	ldrb	r2, [r7, #7]
 80001a4:	3205      	adds	r2, #5
 80001a6:	b2d2      	uxtb	r2, r2
 80001a8:	70da      	strb	r2, [r3, #3]
for (uint8_t i = 0; i < size; i++) {
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	3301      	adds	r3, #1
 80001ae:	71fb      	strb	r3, [r7, #7]
 80001b0:	79fa      	ldrb	r2, [r7, #7]
 80001b2:	79bb      	ldrb	r3, [r7, #6]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d3d8      	bcc.n	800016a <initialize_body+0x1e>
	}
	return body;
 80001b8:	683b      	ldr	r3, [r7, #0]
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
	...

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b590      	push	{r4, r7, lr}
 80001c6:	b087      	sub	sp, #28
 80001c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ca:	f000 fe19 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ce:	f000 f96f 	bl	80004b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d2:	f000 f9e9 	bl	80005a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d6:	f000 f9b1 	bl	800053c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80001da:	f000 fab5 	bl	8000748 <ST7735_Init>

  ST7735_DrawRect(0, 0, 140, 140, ST7735_COLOR_WHITE);
 80001de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	238c      	movs	r3, #140	@ 0x8c
 80001e6:	228c      	movs	r2, #140	@ 0x8c
 80001e8:	2100      	movs	r1, #0
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 fc1e 	bl	8000a2c <ST7735_DrawRect>

  Snake head;

  head.x0 = 70;
 80001f0:	2346      	movs	r3, #70	@ 0x46
 80001f2:	713b      	strb	r3, [r7, #4]
  head.y0 = 70;
 80001f4:	2346      	movs	r3, #70	@ 0x46
 80001f6:	717b      	strb	r3, [r7, #5]
  head.x1 = 74;
 80001f8:	234a      	movs	r3, #74	@ 0x4a
 80001fa:	71bb      	strb	r3, [r7, #6]
  head.y1 = 74;
 80001fc:	234a      	movs	r3, #74	@ 0x4a
 80001fe:	71fb      	strb	r3, [r7, #7]

  Snake *body = initialize_body();
 8000200:	f7ff ffa4 	bl	800014c <initialize_body>
 8000204:	60f8      	str	r0, [r7, #12]

  Snake after_tail;

  after_tail.x0 = 15;
 8000206:	230f      	movs	r3, #15
 8000208:	703b      	strb	r3, [r7, #0]
  after_tail.y0 = 15;
 800020a:	230f      	movs	r3, #15
 800020c:	707b      	strb	r3, [r7, #1]
  after_tail.x1 = 15;
 800020e:	230f      	movs	r3, #15
 8000210:	70bb      	strb	r3, [r7, #2]
  after_tail.y1 = 15;
 8000212:	230f      	movs	r3, #15
 8000214:	70fb      	strb	r3, [r7, #3]

  srand(10);
 8000216:	200a      	movs	r0, #10
 8000218:	f001 fe0a 	bl	8001e30 <srand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ST7735_DrawRect(after_tail.x0, after_tail.y0, after_tail.x1, after_tail.y1, ST7735_COLOR_WHITE);
 800021c:	783b      	ldrb	r3, [r7, #0]
 800021e:	4618      	mov	r0, r3
 8000220:	787b      	ldrb	r3, [r7, #1]
 8000222:	4619      	mov	r1, r3
 8000224:	78bb      	ldrb	r3, [r7, #2]
 8000226:	461a      	mov	r2, r3
 8000228:	78fb      	ldrb	r3, [r7, #3]
 800022a:	461c      	mov	r4, r3
 800022c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	4623      	mov	r3, r4
 8000234:	f000 fbfa 	bl	8000a2c <ST7735_DrawRect>
	  ST7735_DrawRect(body[0].x0, body[0].y0, body[0].x1, body[0].y1, ST7735_COLOR_GREEN);
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	4618      	mov	r0, r3
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	785b      	ldrb	r3, [r3, #1]
 8000242:	4619      	mov	r1, r3
 8000244:	68fb      	ldr	r3, [r7, #12]
 8000246:	789b      	ldrb	r3, [r3, #2]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	78db      	ldrb	r3, [r3, #3]
 800024e:	461c      	mov	r4, r3
 8000250:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	4623      	mov	r3, r4
 8000258:	f000 fbe8 	bl	8000a2c <ST7735_DrawRect>
	  ST7735_DrawRect(body[1].x0, body[1].y0, body[1].x1, body[1].y1, ST7735_COLOR_GREEN);
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3304      	adds	r3, #4
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	4618      	mov	r0, r3
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	3304      	adds	r3, #4
 8000268:	785b      	ldrb	r3, [r3, #1]
 800026a:	4619      	mov	r1, r3
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	3304      	adds	r3, #4
 8000270:	789b      	ldrb	r3, [r3, #2]
 8000272:	461a      	mov	r2, r3
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	3304      	adds	r3, #4
 8000278:	78db      	ldrb	r3, [r3, #3]
 800027a:	461c      	mov	r4, r3
 800027c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000280:	9300      	str	r3, [sp, #0]
 8000282:	4623      	mov	r3, r4
 8000284:	f000 fbd2 	bl	8000a2c <ST7735_DrawRect>
	  ST7735_DrawRect(head.x0, head.y0, head.x1, head.y1, ST7735_COLOR_RED);
 8000288:	793b      	ldrb	r3, [r7, #4]
 800028a:	4618      	mov	r0, r3
 800028c:	797b      	ldrb	r3, [r7, #5]
 800028e:	4619      	mov	r1, r3
 8000290:	79bb      	ldrb	r3, [r7, #6]
 8000292:	461a      	mov	r2, r3
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	461c      	mov	r4, r3
 8000298:	231f      	movs	r3, #31
 800029a:	9300      	str	r3, [sp, #0]
 800029c:	4623      	mov	r3, r4
 800029e:	f000 fbc5 	bl	8000a2c <ST7735_DrawRect>
	  uint8_t move_num = rand()%4;
 80002a2:	f001 fdf3 	bl	8001e8c <rand>
 80002a6:	4603      	mov	r3, r0
 80002a8:	425a      	negs	r2, r3
 80002aa:	f003 0303 	and.w	r3, r3, #3
 80002ae:	f002 0203 	and.w	r2, r2, #3
 80002b2:	bf58      	it	pl
 80002b4:	4253      	negpl	r3, r2
 80002b6:	72fb      	strb	r3, [r7, #11]

	  after_tail.x0 = body[0].x0;
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	703b      	strb	r3, [r7, #0]
	  after_tail.y0 = body[0].y0;
 80002be:	68fb      	ldr	r3, [r7, #12]
 80002c0:	785b      	ldrb	r3, [r3, #1]
 80002c2:	707b      	strb	r3, [r7, #1]
	  after_tail.x1 = body[0].x1;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	789b      	ldrb	r3, [r3, #2]
 80002c8:	70bb      	strb	r3, [r7, #2]
	  after_tail.y1 = body[0].y1;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	78db      	ldrb	r3, [r3, #3]
 80002ce:	70fb      	strb	r3, [r7, #3]

	  body[0].x0 = body[1].x0;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	3304      	adds	r3, #4
 80002d4:	781a      	ldrb	r2, [r3, #0]
 80002d6:	68fb      	ldr	r3, [r7, #12]
 80002d8:	701a      	strb	r2, [r3, #0]
	  body[0].y0 = body[1].y0;
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	3304      	adds	r3, #4
 80002de:	785a      	ldrb	r2, [r3, #1]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	705a      	strb	r2, [r3, #1]
	  body[0].x1 = body[1].x1;
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	3304      	adds	r3, #4
 80002e8:	789a      	ldrb	r2, [r3, #2]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	709a      	strb	r2, [r3, #2]
	  body[0].y1 = body[1].y1;
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	3304      	adds	r3, #4
 80002f2:	78da      	ldrb	r2, [r3, #3]
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	70da      	strb	r2, [r3, #3]


	  body[1].x0 = head.x0;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	3304      	adds	r3, #4
 80002fc:	793a      	ldrb	r2, [r7, #4]
 80002fe:	701a      	strb	r2, [r3, #0]
	  body[1].y0 = head.y0;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3304      	adds	r3, #4
 8000304:	797a      	ldrb	r2, [r7, #5]
 8000306:	705a      	strb	r2, [r3, #1]
	  body[1].x1 = head.x1;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3304      	adds	r3, #4
 800030c:	79ba      	ldrb	r2, [r7, #6]
 800030e:	709a      	strb	r2, [r3, #2]
	  body[1].y1 = head.y1;
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	3304      	adds	r3, #4
 8000314:	79fa      	ldrb	r2, [r7, #7]
 8000316:	70da      	strb	r2, [r3, #3]

	  switch (move_num){
 8000318:	7afb      	ldrb	r3, [r7, #11]
 800031a:	2b03      	cmp	r3, #3
 800031c:	f200 8093 	bhi.w	8000446 <main+0x282>
 8000320:	a201      	add	r2, pc, #4	@ (adr r2, 8000328 <main+0x164>)
 8000322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000326:	bf00      	nop
 8000328:	08000339 	.word	0x08000339
 800032c:	08000379 	.word	0x08000379
 8000330:	080003b9 	.word	0x080003b9
 8000334:	080003f9 	.word	0x080003f9
	  	  case 0://move_right
	  		  if (flag_move_left == false) {
 8000338:	4b55      	ldr	r3, [pc, #340]	@ (8000490 <main+0x2cc>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	f083 0301 	eor.w	r3, r3, #1
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d078      	beq.n	8000438 <main+0x274>
	  			  move_num_x0 = 5;
 8000346:	4b53      	ldr	r3, [pc, #332]	@ (8000494 <main+0x2d0>)
 8000348:	2205      	movs	r2, #5
 800034a:	701a      	strb	r2, [r3, #0]
	  			  move_num_x1 = 5;
 800034c:	4b52      	ldr	r3, [pc, #328]	@ (8000498 <main+0x2d4>)
 800034e:	2205      	movs	r2, #5
 8000350:	701a      	strb	r2, [r3, #0]
	  			  move_num_y0 = 0;
 8000352:	4b52      	ldr	r3, [pc, #328]	@ (800049c <main+0x2d8>)
 8000354:	2200      	movs	r2, #0
 8000356:	701a      	strb	r2, [r3, #0]
	  			  move_num_y1 = 0;
 8000358:	4b51      	ldr	r3, [pc, #324]	@ (80004a0 <main+0x2dc>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]

	  			  flag_move_right = true;
 800035e:	4b51      	ldr	r3, [pc, #324]	@ (80004a4 <main+0x2e0>)
 8000360:	2201      	movs	r2, #1
 8000362:	701a      	strb	r2, [r3, #0]
	  			  flag_move_left = false;
 8000364:	4b4a      	ldr	r3, [pc, #296]	@ (8000490 <main+0x2cc>)
 8000366:	2200      	movs	r2, #0
 8000368:	701a      	strb	r2, [r3, #0]
	  			  flag_move_down = false;
 800036a:	4b4f      	ldr	r3, [pc, #316]	@ (80004a8 <main+0x2e4>)
 800036c:	2200      	movs	r2, #0
 800036e:	701a      	strb	r2, [r3, #0]
	  			  flag_move_up = false;
 8000370:	4b4e      	ldr	r3, [pc, #312]	@ (80004ac <main+0x2e8>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8000376:	e05f      	b.n	8000438 <main+0x274>
	  	  case 1://move_left
	  		if (flag_move_right == false) {
 8000378:	4b4a      	ldr	r3, [pc, #296]	@ (80004a4 <main+0x2e0>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	f083 0301 	eor.w	r3, r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	2b00      	cmp	r3, #0
 8000384:	d05a      	beq.n	800043c <main+0x278>
	  			move_num_x0 = -5;
 8000386:	4b43      	ldr	r3, [pc, #268]	@ (8000494 <main+0x2d0>)
 8000388:	22fb      	movs	r2, #251	@ 0xfb
 800038a:	701a      	strb	r2, [r3, #0]
	  			move_num_x1 = -5;
 800038c:	4b42      	ldr	r3, [pc, #264]	@ (8000498 <main+0x2d4>)
 800038e:	22fb      	movs	r2, #251	@ 0xfb
 8000390:	701a      	strb	r2, [r3, #0]
	  			move_num_y0 = 0;
 8000392:	4b42      	ldr	r3, [pc, #264]	@ (800049c <main+0x2d8>)
 8000394:	2200      	movs	r2, #0
 8000396:	701a      	strb	r2, [r3, #0]
	  			move_num_y1 = 0;
 8000398:	4b41      	ldr	r3, [pc, #260]	@ (80004a0 <main+0x2dc>)
 800039a:	2200      	movs	r2, #0
 800039c:	701a      	strb	r2, [r3, #0]

	  			flag_move_right = false;
 800039e:	4b41      	ldr	r3, [pc, #260]	@ (80004a4 <main+0x2e0>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	701a      	strb	r2, [r3, #0]
	  			flag_move_left = true;
 80003a4:	4b3a      	ldr	r3, [pc, #232]	@ (8000490 <main+0x2cc>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	701a      	strb	r2, [r3, #0]
	  			flag_move_down = false;
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <main+0x2e4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
	  			flag_move_up = false;
 80003b0:	4b3e      	ldr	r3, [pc, #248]	@ (80004ac <main+0x2e8>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80003b6:	e041      	b.n	800043c <main+0x278>
	  	  case 2://move_down
	  		if (flag_move_up == false) {
 80003b8:	4b3c      	ldr	r3, [pc, #240]	@ (80004ac <main+0x2e8>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	f083 0301 	eor.w	r3, r3, #1
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d03c      	beq.n	8000440 <main+0x27c>
	  			move_num_x0 = 0;
 80003c6:	4b33      	ldr	r3, [pc, #204]	@ (8000494 <main+0x2d0>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
	  			move_num_x1 = 0;
 80003cc:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <main+0x2d4>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]
	  			move_num_y0 = 5;
 80003d2:	4b32      	ldr	r3, [pc, #200]	@ (800049c <main+0x2d8>)
 80003d4:	2205      	movs	r2, #5
 80003d6:	701a      	strb	r2, [r3, #0]
	  			move_num_y1 = 5;
 80003d8:	4b31      	ldr	r3, [pc, #196]	@ (80004a0 <main+0x2dc>)
 80003da:	2205      	movs	r2, #5
 80003dc:	701a      	strb	r2, [r3, #0]

	  			flag_move_right = false;
 80003de:	4b31      	ldr	r3, [pc, #196]	@ (80004a4 <main+0x2e0>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
	  			flag_move_left = false;
 80003e4:	4b2a      	ldr	r3, [pc, #168]	@ (8000490 <main+0x2cc>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	  			flag_move_down = true;
 80003ea:	4b2f      	ldr	r3, [pc, #188]	@ (80004a8 <main+0x2e4>)
 80003ec:	2201      	movs	r2, #1
 80003ee:	701a      	strb	r2, [r3, #0]
	  			flag_move_up = false;
 80003f0:	4b2e      	ldr	r3, [pc, #184]	@ (80004ac <main+0x2e8>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80003f6:	e023      	b.n	8000440 <main+0x27c>
	  	  case 3://move_up
	  		if (flag_move_down == false) {
 80003f8:	4b2b      	ldr	r3, [pc, #172]	@ (80004a8 <main+0x2e4>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	f083 0301 	eor.w	r3, r3, #1
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d01e      	beq.n	8000444 <main+0x280>
	  			move_num_x0 = 0;
 8000406:	4b23      	ldr	r3, [pc, #140]	@ (8000494 <main+0x2d0>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	  			move_num_x1 = 0;
 800040c:	4b22      	ldr	r3, [pc, #136]	@ (8000498 <main+0x2d4>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]
	  			move_num_y0 = -5;
 8000412:	4b22      	ldr	r3, [pc, #136]	@ (800049c <main+0x2d8>)
 8000414:	22fb      	movs	r2, #251	@ 0xfb
 8000416:	701a      	strb	r2, [r3, #0]
	  			move_num_y1 = -5;
 8000418:	4b21      	ldr	r3, [pc, #132]	@ (80004a0 <main+0x2dc>)
 800041a:	22fb      	movs	r2, #251	@ 0xfb
 800041c:	701a      	strb	r2, [r3, #0]

	  			flag_move_right = false;
 800041e:	4b21      	ldr	r3, [pc, #132]	@ (80004a4 <main+0x2e0>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
	  			flag_move_left = false;
 8000424:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <main+0x2cc>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
	  			flag_move_down = false;
 800042a:	4b1f      	ldr	r3, [pc, #124]	@ (80004a8 <main+0x2e4>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
	  			flag_move_up = true;
 8000430:	4b1e      	ldr	r3, [pc, #120]	@ (80004ac <main+0x2e8>)
 8000432:	2201      	movs	r2, #1
 8000434:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 8000436:	e005      	b.n	8000444 <main+0x280>
	  		  break;
 8000438:	bf00      	nop
 800043a:	e004      	b.n	8000446 <main+0x282>
	  		  break;
 800043c:	bf00      	nop
 800043e:	e002      	b.n	8000446 <main+0x282>
	  		  break;
 8000440:	bf00      	nop
 8000442:	e000      	b.n	8000446 <main+0x282>
	  		  break;
 8000444:	bf00      	nop
	  }


	  head.x0 = head.x0 + move_num_x0;
 8000446:	793a      	ldrb	r2, [r7, #4]
 8000448:	4b12      	ldr	r3, [pc, #72]	@ (8000494 <main+0x2d0>)
 800044a:	f993 3000 	ldrsb.w	r3, [r3]
 800044e:	b2db      	uxtb	r3, r3
 8000450:	4413      	add	r3, r2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	713b      	strb	r3, [r7, #4]
	  head.x1 = head.x1 + move_num_x1;
 8000456:	79ba      	ldrb	r2, [r7, #6]
 8000458:	4b0f      	ldr	r3, [pc, #60]	@ (8000498 <main+0x2d4>)
 800045a:	f993 3000 	ldrsb.w	r3, [r3]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4413      	add	r3, r2
 8000462:	b2db      	uxtb	r3, r3
 8000464:	71bb      	strb	r3, [r7, #6]
	  head.y0 = head.y0 + move_num_y0;
 8000466:	797a      	ldrb	r2, [r7, #5]
 8000468:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <main+0x2d8>)
 800046a:	f993 3000 	ldrsb.w	r3, [r3]
 800046e:	b2db      	uxtb	r3, r3
 8000470:	4413      	add	r3, r2
 8000472:	b2db      	uxtb	r3, r3
 8000474:	717b      	strb	r3, [r7, #5]
	  head.y1 = head.y1 + move_num_y1;
 8000476:	79fa      	ldrb	r2, [r7, #7]
 8000478:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <main+0x2dc>)
 800047a:	f993 3000 	ldrsb.w	r3, [r3]
 800047e:	b2db      	uxtb	r3, r3
 8000480:	4413      	add	r3, r2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	71fb      	strb	r3, [r7, #7]

	  HAL_Delay(500);
 8000486:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800048a:	f000 fd1b 	bl	8000ec4 <HAL_Delay>
  {
 800048e:	e6c5      	b.n	800021c <main+0x58>
 8000490:	200000e1 	.word	0x200000e1
 8000494:	20000000 	.word	0x20000000
 8000498:	20000001 	.word	0x20000001
 800049c:	200000e4 	.word	0x200000e4
 80004a0:	200000e5 	.word	0x200000e5
 80004a4:	200000e0 	.word	0x200000e0
 80004a8:	200000e2 	.word	0x200000e2
 80004ac:	200000e3 	.word	0x200000e3

080004b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b090      	sub	sp, #64	@ 0x40
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0318 	add.w	r3, r7, #24
 80004ba:	2228      	movs	r2, #40	@ 0x28
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f001 fe27 	bl	8002112 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d2:	2301      	movs	r3, #1
 80004d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004dc:	2300      	movs	r3, #0
 80004de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e0:	2301      	movs	r3, #1
 80004e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e4:	2302      	movs	r3, #2
 80004e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004ee:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80004f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004f4:	f107 0318 	add.w	r3, r7, #24
 80004f8:	4618      	mov	r0, r3
 80004fa:	f000 ff7f 	bl	80013fc <HAL_RCC_OscConfig>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d001      	beq.n	8000508 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000504:	f000 f89c 	bl	8000640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000508:	230f      	movs	r3, #15
 800050a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800050c:	2302      	movs	r3, #2
 800050e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000510:	2300      	movs	r3, #0
 8000512:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000514:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	2102      	movs	r1, #2
 8000522:	4618      	mov	r0, r3
 8000524:	f001 f9ec 	bl	8001900 <HAL_RCC_ClockConfig>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800052e:	f000 f887 	bl	8000640 <Error_Handler>
  }
}
 8000532:	bf00      	nop
 8000534:	3740      	adds	r7, #64	@ 0x40
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}
	...

0800053c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000540:	4b17      	ldr	r3, [pc, #92]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000542:	4a18      	ldr	r2, [pc, #96]	@ (80005a4 <MX_SPI1_Init+0x68>)
 8000544:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000546:	4b16      	ldr	r3, [pc, #88]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000548:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800054c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800054e:	4b14      	ldr	r3, [pc, #80]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000554:	4b12      	ldr	r3, [pc, #72]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800055a:	4b11      	ldr	r3, [pc, #68]	@ (80005a0 <MX_SPI1_Init+0x64>)
 800055c:	2200      	movs	r2, #0
 800055e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000560:	4b0f      	ldr	r3, [pc, #60]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000562:	2200      	movs	r2, #0
 8000564:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000566:	4b0e      	ldr	r3, [pc, #56]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800056c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000570:	2208      	movs	r2, #8
 8000572:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000576:	2200      	movs	r2, #0
 8000578:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <MX_SPI1_Init+0x64>)
 800057c:	2200      	movs	r2, #0
 800057e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <MX_SPI1_Init+0x64>)
 8000588:	220a      	movs	r2, #10
 800058a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800058c:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <MX_SPI1_Init+0x64>)
 800058e:	f001 fb15 	bl	8001bbc <HAL_SPI_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000598:	f000 f852 	bl	8000640 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000088 	.word	0x20000088
 80005a4:	40013000 	.word	0x40013000

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0310 	add.w	r3, r7, #16
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005c2:	f043 0320 	orr.w	r3, r3, #32
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0320 	and.w	r3, r3, #32
 80005d0:	60fb      	str	r3, [r7, #12]
 80005d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	4b18      	ldr	r3, [pc, #96]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a17      	ldr	r2, [pc, #92]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005da:	f043 0304 	orr.w	r3, r3, #4
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f003 0304 	and.w	r3, r3, #4
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a11      	ldr	r2, [pc, #68]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005f2:	f043 0308 	orr.w	r3, r3, #8
 80005f6:	6193      	str	r3, [r2, #24]
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_GPIO_Init+0x90>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	f003 0308 	and.w	r3, r3, #8
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800060a:	480c      	ldr	r0, [pc, #48]	@ (800063c <MX_GPIO_Init+0x94>)
 800060c:	f000 fede 	bl	80013cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000610:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	2301      	movs	r3, #1
 8000618:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	2300      	movs	r3, #0
 800061c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	2302      	movs	r3, #2
 8000620:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	4619      	mov	r1, r3
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_GPIO_Init+0x94>)
 800062a:	f000 fd53 	bl	80010d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800062e:	bf00      	nop
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40010c00 	.word	0x40010c00

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <Error_Handler+0x8>

0800064c <ST7735_SendByte>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
void ST7735_SendByte(uint8_t data)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  // HAL_SPI_Transmit(&hspi1, &data, 1, ST7735_SPI_TIMEOUT);
  while((SPI1->SR & SPI_SR_TXE) == RESET);
 8000656:	bf00      	nop
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <ST7735_SendByte+0x28>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	f003 0302 	and.w	r3, r3, #2
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0f9      	beq.n	8000658 <ST7735_SendByte+0xc>
  SPI1->DR = data;
 8000664:	4a03      	ldr	r2, [pc, #12]	@ (8000674 <ST7735_SendByte+0x28>)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	60d3      	str	r3, [r2, #12]
}
 800066a:	bf00      	nop
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr
 8000674:	40013000 	.word	0x40013000

08000678 <ST7735_WaitLastData>:



/*----------------------------------------------------------------------------*/
void ST7735_WaitLastData()
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  while((SPI1->SR & SPI_SR_TXE) == RESET);
 800067c:	bf00      	nop
 800067e:	4b09      	ldr	r3, [pc, #36]	@ (80006a4 <ST7735_WaitLastData+0x2c>)
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f9      	beq.n	800067e <ST7735_WaitLastData+0x6>
  while((SPI1->SR & SPI_SR_BSY) != RESET);
 800068a:	bf00      	nop
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <ST7735_WaitLastData+0x2c>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f9      	bne.n	800068c <ST7735_WaitLastData+0x14>
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40013000 	.word	0x40013000

080006a8 <ST7735_SendCommand>:



/*----------------------------------------------------------------------------*/
void ST7735_SendCommand(uint8_t data)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2140      	movs	r1, #64	@ 0x40
 80006b6:	4806      	ldr	r0, [pc, #24]	@ (80006d0 <ST7735_SendCommand+0x28>)
 80006b8:	f000 fe88 	bl	80013cc <HAL_GPIO_WritePin>
  ST7735_SendByte(data);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ffc4 	bl	800064c <ST7735_SendByte>
  ST7735_WaitLastData();
 80006c4:	f7ff ffd8 	bl	8000678 <ST7735_WaitLastData>
}
 80006c8:	bf00      	nop
 80006ca:	3708      	adds	r7, #8
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40010c00 	.word	0x40010c00

080006d4 <ST7735_SendData>:



/*----------------------------------------------------------------------------*/
void ST7735_SendData(uint8_t data)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <ST7735_SendData+0x28>)
 80006e4:	f000 fe72 	bl	80013cc <HAL_GPIO_WritePin>
  ST7735_SendByte(data);
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffae 	bl	800064c <ST7735_SendByte>
  ST7735_WaitLastData();
 80006f0:	f7ff ffc2 	bl	8000678 <ST7735_WaitLastData>
}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40010c00 	.word	0x40010c00

08000700 <ST7735_SendDataMultiple>:



/*----------------------------------------------------------------------------*/
void ST7735_SendDataMultiple(uint8_t *data, uint32_t num)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 800070a:	2201      	movs	r2, #1
 800070c:	2140      	movs	r1, #64	@ 0x40
 800070e:	480d      	ldr	r0, [pc, #52]	@ (8000744 <ST7735_SendDataMultiple+0x44>)
 8000710:	f000 fe5c 	bl	80013cc <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < num; i++)
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	e00a      	b.n	8000730 <ST7735_SendDataMultiple+0x30>
  {
    ST7735_SendByte(*data);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff ff94 	bl	800064c <ST7735_SendByte>
    data++;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
  for (uint32_t i = 0; i < num; i++)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	3301      	adds	r3, #1
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	429a      	cmp	r2, r3
 8000736:	d3f0      	bcc.n	800071a <ST7735_SendDataMultiple+0x1a>
  }

  ST7735_WaitLastData();
 8000738:	f7ff ff9e 	bl	8000678 <ST7735_WaitLastData>
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40010c00 	.word	0x40010c00

08000748 <ST7735_Init>:



/*----------------------------------------------------------------------------*/
void ST7735_Init()
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  SPI1->CR1 |= SPI_CR1_SPE;
 800074c:	4b8f      	ldr	r3, [pc, #572]	@ (800098c <ST7735_Init+0x244>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a8e      	ldr	r2, [pc, #568]	@ (800098c <ST7735_Init+0x244>)
 8000752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000756:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800075e:	488c      	ldr	r0, [pc, #560]	@ (8000990 <ST7735_Init+0x248>)
 8000760:	f000 fe34 	bl	80013cc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2180      	movs	r1, #128	@ 0x80
 8000768:	488a      	ldr	r0, [pc, #552]	@ (8000994 <ST7735_Init+0x24c>)
 800076a:	f000 fe2f 	bl	80013cc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800076e:	2005      	movs	r0, #5
 8000770:	f000 fba8 	bl	8000ec4 <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	2180      	movs	r1, #128	@ 0x80
 8000778:	4886      	ldr	r0, [pc, #536]	@ (8000994 <ST7735_Init+0x24c>)
 800077a:	f000 fe27 	bl	80013cc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800077e:	2005      	movs	r0, #5
 8000780:	f000 fba0 	bl	8000ec4 <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2180      	movs	r1, #128	@ 0x80
 8000788:	4882      	ldr	r0, [pc, #520]	@ (8000994 <ST7735_Init+0x24c>)
 800078a:	f000 fe1f 	bl	80013cc <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800078e:	2005      	movs	r0, #5
 8000790:	f000 fb98 	bl	8000ec4 <HAL_Delay>

  ST7735_SendCommand(ST7735_SWRESET);
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff ff87 	bl	80006a8 <ST7735_SendCommand>
  HAL_Delay(150);
 800079a:	2096      	movs	r0, #150	@ 0x96
 800079c:	f000 fb92 	bl	8000ec4 <HAL_Delay>

  ST7735_SendCommand(ST7735_SLPOUT);
 80007a0:	2011      	movs	r0, #17
 80007a2:	f7ff ff81 	bl	80006a8 <ST7735_SendCommand>
  HAL_Delay(500);
 80007a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007aa:	f000 fb8b 	bl	8000ec4 <HAL_Delay>

  ST7735_SendCommand(ST7735_FRMCTR1);
 80007ae:	20b1      	movs	r0, #177	@ 0xb1
 80007b0:	f7ff ff7a 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ff8d 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2C);
 80007ba:	202c      	movs	r0, #44	@ 0x2c
 80007bc:	f7ff ff8a 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2D);
 80007c0:	202d      	movs	r0, #45	@ 0x2d
 80007c2:	f7ff ff87 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_FRMCTR2);
 80007c6:	20b2      	movs	r0, #178	@ 0xb2
 80007c8:	f7ff ff6e 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f7ff ff81 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2C);
 80007d2:	202c      	movs	r0, #44	@ 0x2c
 80007d4:	f7ff ff7e 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2D);
 80007d8:	202d      	movs	r0, #45	@ 0x2d
 80007da:	f7ff ff7b 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_FRMCTR3);
 80007de:	20b3      	movs	r0, #179	@ 0xb3
 80007e0:	f7ff ff62 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 80007e4:	2001      	movs	r0, #1
 80007e6:	f7ff ff75 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2C);
 80007ea:	202c      	movs	r0, #44	@ 0x2c
 80007ec:	f7ff ff72 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2D);
 80007f0:	202d      	movs	r0, #45	@ 0x2d
 80007f2:	f7ff ff6f 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x01);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff ff6c 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2C);
 80007fc:	202c      	movs	r0, #44	@ 0x2c
 80007fe:	f7ff ff69 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000802:	202d      	movs	r0, #45	@ 0x2d
 8000804:	f7ff ff66 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_INVCTR);
 8000808:	20b4      	movs	r0, #180	@ 0xb4
 800080a:	f7ff ff4d 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x07);
 800080e:	2007      	movs	r0, #7
 8000810:	f7ff ff60 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR1);
 8000814:	20c0      	movs	r0, #192	@ 0xc0
 8000816:	f7ff ff47 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0xA2);
 800081a:	20a2      	movs	r0, #162	@ 0xa2
 800081c:	f7ff ff5a 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x02);
 8000820:	2002      	movs	r0, #2
 8000822:	f7ff ff57 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x84);
 8000826:	2084      	movs	r0, #132	@ 0x84
 8000828:	f7ff ff54 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR2);
 800082c:	20c1      	movs	r0, #193	@ 0xc1
 800082e:	f7ff ff3b 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0xC5);
 8000832:	20c5      	movs	r0, #197	@ 0xc5
 8000834:	f7ff ff4e 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR3);
 8000838:	20c2      	movs	r0, #194	@ 0xc2
 800083a:	f7ff ff35 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x0A);
 800083e:	200a      	movs	r0, #10
 8000840:	f7ff ff48 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x00);
 8000844:	2000      	movs	r0, #0
 8000846:	f7ff ff45 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR4);
 800084a:	20c3      	movs	r0, #195	@ 0xc3
 800084c:	f7ff ff2c 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x8A);
 8000850:	208a      	movs	r0, #138	@ 0x8a
 8000852:	f7ff ff3f 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2A);
 8000856:	202a      	movs	r0, #42	@ 0x2a
 8000858:	f7ff ff3c 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR5);
 800085c:	20c4      	movs	r0, #196	@ 0xc4
 800085e:	f7ff ff23 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x8A);
 8000862:	208a      	movs	r0, #138	@ 0x8a
 8000864:	f7ff ff36 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0xEE);
 8000868:	20ee      	movs	r0, #238	@ 0xee
 800086a:	f7ff ff33 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_VMCTR1);
 800086e:	20c5      	movs	r0, #197	@ 0xc5
 8000870:	f7ff ff1a 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x0E);
 8000874:	200e      	movs	r0, #14
 8000876:	f7ff ff2d 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_INVOFF);
 800087a:	2020      	movs	r0, #32
 800087c:	f7ff ff14 	bl	80006a8 <ST7735_SendCommand>

  ST7735_SendCommand(ST7735_MADCTL);
 8000880:	2036      	movs	r0, #54	@ 0x36
 8000882:	f7ff ff11 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0xC0);
 8000886:	20c0      	movs	r0, #192	@ 0xc0
 8000888:	f7ff ff24 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_COLMOD);
 800088c:	203a      	movs	r0, #58	@ 0x3a
 800088e:	f7ff ff0b 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x05);
 8000892:	2005      	movs	r0, #5
 8000894:	f7ff ff1e 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_GMCTRP1);
 8000898:	20e0      	movs	r0, #224	@ 0xe0
 800089a:	f7ff ff05 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x02);
 800089e:	2002      	movs	r0, #2
 80008a0:	f7ff ff18 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x1c);
 80008a4:	201c      	movs	r0, #28
 80008a6:	f7ff ff15 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x07);
 80008aa:	2007      	movs	r0, #7
 80008ac:	f7ff ff12 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x12);
 80008b0:	2012      	movs	r0, #18
 80008b2:	f7ff ff0f 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x37);
 80008b6:	2037      	movs	r0, #55	@ 0x37
 80008b8:	f7ff ff0c 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x32);
 80008bc:	2032      	movs	r0, #50	@ 0x32
 80008be:	f7ff ff09 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x29);
 80008c2:	2029      	movs	r0, #41	@ 0x29
 80008c4:	f7ff ff06 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2d);
 80008c8:	202d      	movs	r0, #45	@ 0x2d
 80008ca:	f7ff ff03 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x29);
 80008ce:	2029      	movs	r0, #41	@ 0x29
 80008d0:	f7ff ff00 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x25);
 80008d4:	2025      	movs	r0, #37	@ 0x25
 80008d6:	f7ff fefd 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2B);
 80008da:	202b      	movs	r0, #43	@ 0x2b
 80008dc:	f7ff fefa 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x39);
 80008e0:	2039      	movs	r0, #57	@ 0x39
 80008e2:	f7ff fef7 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x00);
 80008e6:	2000      	movs	r0, #0
 80008e8:	f7ff fef4 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x01);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fef1 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x03);
 80008f2:	2003      	movs	r0, #3
 80008f4:	f7ff feee 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x10);
 80008f8:	2010      	movs	r0, #16
 80008fa:	f7ff feeb 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_GMCTRN1);
 80008fe:	20e1      	movs	r0, #225	@ 0xe1
 8000900:	f7ff fed2 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendData(0x03);
 8000904:	2003      	movs	r0, #3
 8000906:	f7ff fee5 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x1d);
 800090a:	201d      	movs	r0, #29
 800090c:	f7ff fee2 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x07);
 8000910:	2007      	movs	r0, #7
 8000912:	f7ff fedf 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x06);
 8000916:	2006      	movs	r0, #6
 8000918:	f7ff fedc 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2E);
 800091c:	202e      	movs	r0, #46	@ 0x2e
 800091e:	f7ff fed9 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000922:	202c      	movs	r0, #44	@ 0x2c
 8000924:	f7ff fed6 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x29);
 8000928:	2029      	movs	r0, #41	@ 0x29
 800092a:	f7ff fed3 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2D);
 800092e:	202d      	movs	r0, #45	@ 0x2d
 8000930:	f7ff fed0 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2E);
 8000934:	202e      	movs	r0, #46	@ 0x2e
 8000936:	f7ff fecd 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x2E);
 800093a:	202e      	movs	r0, #46	@ 0x2e
 800093c:	f7ff feca 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x37);
 8000940:	2037      	movs	r0, #55	@ 0x37
 8000942:	f7ff fec7 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x3F);
 8000946:	203f      	movs	r0, #63	@ 0x3f
 8000948:	f7ff fec4 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x00);
 800094c:	2000      	movs	r0, #0
 800094e:	f7ff fec1 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x00);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff febe 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x02);
 8000958:	2002      	movs	r0, #2
 800095a:	f7ff febb 	bl	80006d4 <ST7735_SendData>
  ST7735_SendData(0x10);
 800095e:	2010      	movs	r0, #16
 8000960:	f7ff feb8 	bl	80006d4 <ST7735_SendData>

  ST7735_SendCommand(ST7735_NORON);
 8000964:	2013      	movs	r0, #19
 8000966:	f7ff fe9f 	bl	80006a8 <ST7735_SendCommand>
  HAL_Delay(10);
 800096a:	200a      	movs	r0, #10
 800096c:	f000 faaa 	bl	8000ec4 <HAL_Delay>

  ST7735_SendCommand(ST7735_DISPON);
 8000970:	2029      	movs	r0, #41	@ 0x29
 8000972:	f7ff fe99 	bl	80006a8 <ST7735_SendCommand>
  HAL_Delay(100);
 8000976:	2064      	movs	r0, #100	@ 0x64
 8000978:	f000 faa4 	bl	8000ec4 <HAL_Delay>

  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000982:	4803      	ldr	r0, [pc, #12]	@ (8000990 <ST7735_Init+0x248>)
 8000984:	f000 fd22 	bl	80013cc <HAL_GPIO_WritePin>
}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013000 	.word	0x40013000
 8000990:	40011000 	.word	0x40011000
 8000994:	40010c00 	.word	0x40010c00

08000998 <ST7735_SetColAddr>:



/*----------------------------------------------------------------------------*/
void ST7735_SetColAddr(uint16_t cStart, uint16_t cStop)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	80fb      	strh	r3, [r7, #6]
 80009a4:	4613      	mov	r3, r2
 80009a6:	80bb      	strh	r3, [r7, #4]
  uint8_t data[4];

  data[0] = (cStart & 0xFF00) >> 8;
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	0a1b      	lsrs	r3, r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	733b      	strb	r3, [r7, #12]
  data[1] = cStart & 0x00FF;
 80009b2:	88fb      	ldrh	r3, [r7, #6]
 80009b4:	b2db      	uxtb	r3, r3
 80009b6:	737b      	strb	r3, [r7, #13]
  data[2] = (cStop & 0xFF00) >> 8;
 80009b8:	88bb      	ldrh	r3, [r7, #4]
 80009ba:	0a1b      	lsrs	r3, r3, #8
 80009bc:	b29b      	uxth	r3, r3
 80009be:	b2db      	uxtb	r3, r3
 80009c0:	73bb      	strb	r3, [r7, #14]
  data[3] = cStop & 0x00FF;
 80009c2:	88bb      	ldrh	r3, [r7, #4]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	73fb      	strb	r3, [r7, #15]

  ST7735_SendCommand(ST7735_CASET);
 80009c8:	202a      	movs	r0, #42	@ 0x2a
 80009ca:	f7ff fe6d 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendDataMultiple(data, 4);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	2104      	movs	r1, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fe93 	bl	8000700 <ST7735_SendDataMultiple>
}
 80009da:	bf00      	nop
 80009dc:	3710      	adds	r7, #16
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}

080009e2 <ST7735_SetRowAddr>:



/*----------------------------------------------------------------------------*/
void ST7735_SetRowAddr(uint16_t rStart, uint16_t rStop)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b084      	sub	sp, #16
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4603      	mov	r3, r0
 80009ea:	460a      	mov	r2, r1
 80009ec:	80fb      	strh	r3, [r7, #6]
 80009ee:	4613      	mov	r3, r2
 80009f0:	80bb      	strh	r3, [r7, #4]
  uint8_t data[4];

  data[0] = (rStart & 0xFF00) >> 8;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	0a1b      	lsrs	r3, r3, #8
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	733b      	strb	r3, [r7, #12]
  data[1] = rStart & 0x00FF;
 80009fc:	88fb      	ldrh	r3, [r7, #6]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	737b      	strb	r3, [r7, #13]
  data[2] = (rStop & 0xFF00) >> 8;
 8000a02:	88bb      	ldrh	r3, [r7, #4]
 8000a04:	0a1b      	lsrs	r3, r3, #8
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	73bb      	strb	r3, [r7, #14]
  data[3] = rStop & 0x00FF;
 8000a0c:	88bb      	ldrh	r3, [r7, #4]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	73fb      	strb	r3, [r7, #15]

  ST7735_SendCommand(ST7735_RASET);
 8000a12:	202b      	movs	r0, #43	@ 0x2b
 8000a14:	f7ff fe48 	bl	80006a8 <ST7735_SendCommand>
  ST7735_SendDataMultiple(data, 4);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fe6e 	bl	8000700 <ST7735_SendDataMultiple>
}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <ST7735_DrawRect>:



/*----------------------------------------------------------------------------*/
void ST7735_DrawRect(uint16_t cStart, uint16_t rStart, uint16_t cStop, uint16_t rStop, uint16_t color)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4604      	mov	r4, r0
 8000a34:	4608      	mov	r0, r1
 8000a36:	4611      	mov	r1, r2
 8000a38:	461a      	mov	r2, r3
 8000a3a:	4623      	mov	r3, r4
 8000a3c:	80fb      	strh	r3, [r7, #6]
 8000a3e:	4603      	mov	r3, r0
 8000a40:	80bb      	strh	r3, [r7, #4]
 8000a42:	460b      	mov	r3, r1
 8000a44:	807b      	strh	r3, [r7, #2]
 8000a46:	4613      	mov	r3, r2
 8000a48:	803b      	strh	r3, [r7, #0]
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a50:	4824      	ldr	r0, [pc, #144]	@ (8000ae4 <ST7735_DrawRect+0xb8>)
 8000a52:	f000 fcbb 	bl	80013cc <HAL_GPIO_WritePin>
  ST7735_SetColAddr(cStart, cStop - 1);
 8000a56:	887b      	ldrh	r3, [r7, #2]
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	88fb      	ldrh	r3, [r7, #6]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff ff99 	bl	8000998 <ST7735_SetColAddr>
  ST7735_SetRowAddr(rStart, rStop - 1);
 8000a66:	883b      	ldrh	r3, [r7, #0]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	88bb      	ldrh	r3, [r7, #4]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffb6 	bl	80009e2 <ST7735_SetRowAddr>

  ST7735_SendCommand(ST7735_RAMWR);
 8000a76:	202c      	movs	r0, #44	@ 0x2c
 8000a78:	f7ff fe16 	bl	80006a8 <ST7735_SendCommand>

  uint32_t size = (cStop - cStart) * (rStop - rStart);
 8000a7c:	887a      	ldrh	r2, [r7, #2]
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	8839      	ldrh	r1, [r7, #0]
 8000a84:	88ba      	ldrh	r2, [r7, #4]
 8000a86:	1a8a      	subs	r2, r1, r2
 8000a88:	fb02 f303 	mul.w	r3, r2, r3
 8000a8c:	613b      	str	r3, [r7, #16]
  uint8_t colorBytes[2];
  colorBytes[0] = (color & 0xFF00) >> 8;
 8000a8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	733b      	strb	r3, [r7, #12]
  colorBytes[1] = color & 0x00FF;
 8000a98:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	737b      	strb	r3, [r7, #13]

  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2140      	movs	r1, #64	@ 0x40
 8000aa2:	4811      	ldr	r0, [pc, #68]	@ (8000ae8 <ST7735_DrawRect+0xbc>)
 8000aa4:	f000 fc92 	bl	80013cc <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < size; i++)
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e00a      	b.n	8000ac4 <ST7735_DrawRect+0x98>
  {
    ST7735_SendByte(colorBytes[0]);
 8000aae:	7b3b      	ldrb	r3, [r7, #12]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fdcb 	bl	800064c <ST7735_SendByte>
    ST7735_SendByte(colorBytes[1]);
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff fdc7 	bl	800064c <ST7735_SendByte>
  for (uint32_t i = 0; i < size; i++)
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697a      	ldr	r2, [r7, #20]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d3f0      	bcc.n	8000aae <ST7735_DrawRect+0x82>
  }

  ST7735_WaitLastData();
 8000acc:	f7ff fdd4 	bl	8000678 <ST7735_WaitLastData>
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ad6:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <ST7735_DrawRect+0xb8>)
 8000ad8:	f000 fc78 	bl	80013cc <HAL_GPIO_WritePin>
}
 8000adc:	bf00      	nop
 8000ade:	371c      	adds	r7, #28
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000af2:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	4a14      	ldr	r2, [pc, #80]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6193      	str	r3, [r2, #24]
 8000afe:	4b12      	ldr	r3, [pc, #72]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b14:	61d3      	str	r3, [r2, #28]
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <HAL_MspInit+0x5c>)
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000b22:	4b0a      	ldr	r3, [pc, #40]	@ (8000b4c <HAL_MspInit+0x60>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4a04      	ldr	r2, [pc, #16]	@ (8000b4c <HAL_MspInit+0x60>)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bc80      	pop	{r7}
 8000b46:	4770      	bx	lr
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010000 	.word	0x40010000

08000b50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b088      	sub	sp, #32
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0310 	add.w	r3, r7, #16
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a15      	ldr	r2, [pc, #84]	@ (8000bc0 <HAL_SPI_MspInit+0x70>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d123      	bne.n	8000bb8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b70:	4b14      	ldr	r3, [pc, #80]	@ (8000bc4 <HAL_SPI_MspInit+0x74>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	4a13      	ldr	r2, [pc, #76]	@ (8000bc4 <HAL_SPI_MspInit+0x74>)
 8000b76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b7a:	6193      	str	r3, [r2, #24]
 8000b7c:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_SPI_MspInit+0x74>)
 8000b7e:	699b      	ldr	r3, [r3, #24]
 8000b80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_SPI_MspInit+0x74>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000bc4 <HAL_SPI_MspInit+0x74>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	6193      	str	r3, [r2, #24]
 8000b94:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_SPI_MspInit+0x74>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	f003 0304 	and.w	r3, r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ba0:	23a0      	movs	r3, #160	@ 0xa0
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4805      	ldr	r0, [pc, #20]	@ (8000bc8 <HAL_SPI_MspInit+0x78>)
 8000bb4:	f000 fa8e 	bl	80010d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	3720      	adds	r7, #32
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40013000 	.word	0x40013000
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40010800 	.word	0x40010800

08000bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <NMI_Handler+0x4>

08000bd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <MemManage_Handler+0x4>

08000be4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1c:	f000 f936 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return 1;
 8000c28:	2301      	movs	r3, #1
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <_kill>:

int _kill(int pid, int sig)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c3c:	f001 fac8 	bl	80021d0 <__errno>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2216      	movs	r2, #22
 8000c44:	601a      	str	r2, [r3, #0]
  return -1;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_exit>:

void _exit (int status)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000c5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000c5e:	6878      	ldr	r0, [r7, #4]
 8000c60:	f7ff ffe7 	bl	8000c32 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <_exit+0x12>

08000c68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	e00a      	b.n	8000c90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c7a:	f3af 8000 	nop.w
 8000c7e:	4601      	mov	r1, r0
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	1c5a      	adds	r2, r3, #1
 8000c84:	60ba      	str	r2, [r7, #8]
 8000c86:	b2ca      	uxtb	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	697a      	ldr	r2, [r7, #20]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	dbf0      	blt.n	8000c7a <_read+0x12>
  }

  return len;
 8000c98:	687b      	ldr	r3, [r7, #4]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3718      	adds	r7, #24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	60b9      	str	r1, [r7, #8]
 8000cac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
 8000cb2:	e009      	b.n	8000cc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	dbf1      	blt.n	8000cb4 <_write+0x12>
  }
  return len;
 8000cd0:	687b      	ldr	r3, [r7, #4]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <_close>:

int _close(int file)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d00:	605a      	str	r2, [r3, #4]
  return 0;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <_isatty>:

int _isatty(int file)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d16:	2301      	movs	r3, #1
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d22:	b480      	push	{r7}
 8000d24:	b085      	sub	sp, #20
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d2e:	2300      	movs	r3, #0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr
	...

08000d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d44:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <_sbrk+0x5c>)
 8000d46:	4b15      	ldr	r3, [pc, #84]	@ (8000d9c <_sbrk+0x60>)
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <_sbrk+0x64>)
 8000d5a:	4a12      	ldr	r2, [pc, #72]	@ (8000da4 <_sbrk+0x68>)
 8000d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	429a      	cmp	r2, r3
 8000d6a:	d207      	bcs.n	8000d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d6c:	f001 fa30 	bl	80021d0 <__errno>
 8000d70:	4603      	mov	r3, r0
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	e009      	b.n	8000d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d82:	4b07      	ldr	r3, [pc, #28]	@ (8000da0 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <_sbrk+0x64>)
 8000d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20002800 	.word	0x20002800
 8000d9c:	00000400 	.word	0x00000400
 8000da0:	200000e8 	.word	0x200000e8
 8000da4:	20000240 	.word	0x20000240

08000da8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db4:	f7ff fff8 	bl	8000da8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480b      	ldr	r0, [pc, #44]	@ (8000de8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dba:	490c      	ldr	r1, [pc, #48]	@ (8000dec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000df0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a09      	ldr	r2, [pc, #36]	@ (8000df4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dd0:	4c09      	ldr	r4, [pc, #36]	@ (8000df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dde:	f001 f9fd 	bl	80021dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff f9ef 	bl	80001c4 <main>
  bx lr
 8000de6:	4770      	bx	lr
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000df0:	08002e10 	.word	0x08002e10
  ldr r2, =_sbss
 8000df4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000df8:	2000023c 	.word	0x2000023c

08000dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_2_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <HAL_Init+0x28>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <HAL_Init+0x28>)
 8000e0a:	f043 0310 	orr.w	r3, r3, #16
 8000e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f92b 	bl	800106c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe66 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40022000 	.word	0x40022000

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f935 	bl	80010ba <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f90b 	bl	8001082 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000004 	.word	0x20000004
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <HAL_IncTick+0x1c>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <HAL_IncTick+0x20>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a03      	ldr	r2, [pc, #12]	@ (8000eac <HAL_IncTick+0x20>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	2000000c 	.word	0x2000000c
 8000eac:	200000ec 	.word	0x200000ec

08000eb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb4:	4b02      	ldr	r3, [pc, #8]	@ (8000ec0 <HAL_GetTick+0x10>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr
 8000ec0:	200000ec 	.word	0x200000ec

08000ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ecc:	f7ff fff0 	bl	8000eb0 <HAL_GetTick>
 8000ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000edc:	d005      	beq.n	8000eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_Delay+0x44>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eea:	bf00      	nop
 8000eec:	f7ff ffe0 	bl	8000eb0 <HAL_GetTick>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d8f7      	bhi.n	8000eec <HAL_Delay+0x28>
  {
  }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000000c 	.word	0x2000000c

08000f0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f22:	68ba      	ldr	r2, [r7, #8]
 8000f24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f28:	4013      	ands	r3, r2
 8000f2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3e:	4a04      	ldr	r2, [pc, #16]	@ (8000f50 <__NVIC_SetPriorityGrouping+0x44>)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	60d3      	str	r3, [r2, #12]
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <__NVIC_GetPriorityGrouping+0x18>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	0a1b      	lsrs	r3, r3, #8
 8000f5e:	f003 0307 	and.w	r3, r3, #7
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bc80      	pop	{r7}
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	@ (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	@ (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001038:	d301      	bcc.n	800103e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800103a:	2301      	movs	r3, #1
 800103c:	e00f      	b.n	800105e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <SysTick_Config+0x40>)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001046:	210f      	movs	r1, #15
 8001048:	f04f 30ff 	mov.w	r0, #4294967295
 800104c:	f7ff ff90 	bl	8000f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001050:	4b05      	ldr	r3, [pc, #20]	@ (8001068 <SysTick_Config+0x40>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001056:	4b04      	ldr	r3, [pc, #16]	@ (8001068 <SysTick_Config+0x40>)
 8001058:	2207      	movs	r2, #7
 800105a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	e000e010 	.word	0xe000e010

0800106c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff49 	bl	8000f0c <__NVIC_SetPriorityGrouping>
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001094:	f7ff ff5e 	bl	8000f54 <__NVIC_GetPriorityGrouping>
 8001098:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	6978      	ldr	r0, [r7, #20]
 80010a0:	f7ff ff90 	bl	8000fc4 <NVIC_EncodePriority>
 80010a4:	4602      	mov	r2, r0
 80010a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff5f 	bl	8000f70 <__NVIC_SetPriority>
}
 80010b2:	bf00      	nop
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffb0 	bl	8001028 <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b08b      	sub	sp, #44	@ 0x2c
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e6:	e161      	b.n	80013ac <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e8:	2201      	movs	r2, #1
 80010ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	69fa      	ldr	r2, [r7, #28]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	429a      	cmp	r2, r3
 8001102:	f040 8150 	bne.w	80013a6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4a97      	ldr	r2, [pc, #604]	@ (8001368 <HAL_GPIO_Init+0x294>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d05e      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 8001110:	4a95      	ldr	r2, [pc, #596]	@ (8001368 <HAL_GPIO_Init+0x294>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d875      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 8001116:	4a95      	ldr	r2, [pc, #596]	@ (800136c <HAL_GPIO_Init+0x298>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d058      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 800111c:	4a93      	ldr	r2, [pc, #588]	@ (800136c <HAL_GPIO_Init+0x298>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d86f      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 8001122:	4a93      	ldr	r2, [pc, #588]	@ (8001370 <HAL_GPIO_Init+0x29c>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d052      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 8001128:	4a91      	ldr	r2, [pc, #580]	@ (8001370 <HAL_GPIO_Init+0x29c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d869      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 800112e:	4a91      	ldr	r2, [pc, #580]	@ (8001374 <HAL_GPIO_Init+0x2a0>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d04c      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 8001134:	4a8f      	ldr	r2, [pc, #572]	@ (8001374 <HAL_GPIO_Init+0x2a0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d863      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 800113a:	4a8f      	ldr	r2, [pc, #572]	@ (8001378 <HAL_GPIO_Init+0x2a4>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d046      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
 8001140:	4a8d      	ldr	r2, [pc, #564]	@ (8001378 <HAL_GPIO_Init+0x2a4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d85d      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 8001146:	2b12      	cmp	r3, #18
 8001148:	d82a      	bhi.n	80011a0 <HAL_GPIO_Init+0xcc>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d859      	bhi.n	8001202 <HAL_GPIO_Init+0x12e>
 800114e:	a201      	add	r2, pc, #4	@ (adr r2, 8001154 <HAL_GPIO_Init+0x80>)
 8001150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001154:	080011cf 	.word	0x080011cf
 8001158:	080011a9 	.word	0x080011a9
 800115c:	080011bb 	.word	0x080011bb
 8001160:	080011fd 	.word	0x080011fd
 8001164:	08001203 	.word	0x08001203
 8001168:	08001203 	.word	0x08001203
 800116c:	08001203 	.word	0x08001203
 8001170:	08001203 	.word	0x08001203
 8001174:	08001203 	.word	0x08001203
 8001178:	08001203 	.word	0x08001203
 800117c:	08001203 	.word	0x08001203
 8001180:	08001203 	.word	0x08001203
 8001184:	08001203 	.word	0x08001203
 8001188:	08001203 	.word	0x08001203
 800118c:	08001203 	.word	0x08001203
 8001190:	08001203 	.word	0x08001203
 8001194:	08001203 	.word	0x08001203
 8001198:	080011b1 	.word	0x080011b1
 800119c:	080011c5 	.word	0x080011c5
 80011a0:	4a76      	ldr	r2, [pc, #472]	@ (800137c <HAL_GPIO_Init+0x2a8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d013      	beq.n	80011ce <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011a6:	e02c      	b.n	8001202 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	623b      	str	r3, [r7, #32]
          break;
 80011ae:	e029      	b.n	8001204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	3304      	adds	r3, #4
 80011b6:	623b      	str	r3, [r7, #32]
          break;
 80011b8:	e024      	b.n	8001204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	3308      	adds	r3, #8
 80011c0:	623b      	str	r3, [r7, #32]
          break;
 80011c2:	e01f      	b.n	8001204 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	330c      	adds	r3, #12
 80011ca:	623b      	str	r3, [r7, #32]
          break;
 80011cc:	e01a      	b.n	8001204 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d102      	bne.n	80011dc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011d6:	2304      	movs	r3, #4
 80011d8:	623b      	str	r3, [r7, #32]
          break;
 80011da:	e013      	b.n	8001204 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d105      	bne.n	80011f0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e4:	2308      	movs	r3, #8
 80011e6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	611a      	str	r2, [r3, #16]
          break;
 80011ee:	e009      	b.n	8001204 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	615a      	str	r2, [r3, #20]
          break;
 80011fa:	e003      	b.n	8001204 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
          break;
 8001200:	e000      	b.n	8001204 <HAL_GPIO_Init+0x130>
          break;
 8001202:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	2bff      	cmp	r3, #255	@ 0xff
 8001208:	d801      	bhi.n	800120e <HAL_GPIO_Init+0x13a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	e001      	b.n	8001212 <HAL_GPIO_Init+0x13e>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3304      	adds	r3, #4
 8001212:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2bff      	cmp	r3, #255	@ 0xff
 8001218:	d802      	bhi.n	8001220 <HAL_GPIO_Init+0x14c>
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	e002      	b.n	8001226 <HAL_GPIO_Init+0x152>
 8001220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001222:	3b08      	subs	r3, #8
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	210f      	movs	r1, #15
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	fa01 f303 	lsl.w	r3, r1, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	401a      	ands	r2, r3
 8001238:	6a39      	ldr	r1, [r7, #32]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	431a      	orrs	r2, r3
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	f000 80a9 	beq.w	80013a6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001254:	4b4a      	ldr	r3, [pc, #296]	@ (8001380 <HAL_GPIO_Init+0x2ac>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	4a49      	ldr	r2, [pc, #292]	@ (8001380 <HAL_GPIO_Init+0x2ac>)
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	6193      	str	r3, [r2, #24]
 8001260:	4b47      	ldr	r3, [pc, #284]	@ (8001380 <HAL_GPIO_Init+0x2ac>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800126c:	4a45      	ldr	r2, [pc, #276]	@ (8001384 <HAL_GPIO_Init+0x2b0>)
 800126e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4013      	ands	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a3d      	ldr	r2, [pc, #244]	@ (8001388 <HAL_GPIO_Init+0x2b4>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d00d      	beq.n	80012b4 <HAL_GPIO_Init+0x1e0>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a3c      	ldr	r2, [pc, #240]	@ (800138c <HAL_GPIO_Init+0x2b8>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_Init+0x1dc>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a3b      	ldr	r2, [pc, #236]	@ (8001390 <HAL_GPIO_Init+0x2bc>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d101      	bne.n	80012ac <HAL_GPIO_Init+0x1d8>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e004      	b.n	80012b6 <HAL_GPIO_Init+0x1e2>
 80012ac:	2303      	movs	r3, #3
 80012ae:	e002      	b.n	80012b6 <HAL_GPIO_Init+0x1e2>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <HAL_GPIO_Init+0x1e2>
 80012b4:	2300      	movs	r3, #0
 80012b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4093      	lsls	r3, r2
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012c6:	492f      	ldr	r1, [pc, #188]	@ (8001384 <HAL_GPIO_Init+0x2b0>)
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d006      	beq.n	80012ee <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	492b      	ldr	r1, [pc, #172]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	608b      	str	r3, [r1, #8]
 80012ec:	e006      	b.n	80012fc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012ee:	4b29      	ldr	r3, [pc, #164]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	43db      	mvns	r3, r3
 80012f6:	4927      	ldr	r1, [pc, #156]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 80012f8:	4013      	ands	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001304:	2b00      	cmp	r3, #0
 8001306:	d006      	beq.n	8001316 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001308:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4921      	ldr	r1, [pc, #132]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	4313      	orrs	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
 8001314:	e006      	b.n	8001324 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	43db      	mvns	r3, r3
 800131e:	491d      	ldr	r1, [pc, #116]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 8001320:	4013      	ands	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001330:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	4917      	ldr	r1, [pc, #92]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
 800133c:	e006      	b.n	800134c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	43db      	mvns	r3, r3
 8001346:	4913      	ldr	r1, [pc, #76]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 8001348:	4013      	ands	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01f      	beq.n	8001398 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	490d      	ldr	r1, [pc, #52]	@ (8001394 <HAL_GPIO_Init+0x2c0>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
 8001364:	e01f      	b.n	80013a6 <HAL_GPIO_Init+0x2d2>
 8001366:	bf00      	nop
 8001368:	10320000 	.word	0x10320000
 800136c:	10310000 	.word	0x10310000
 8001370:	10220000 	.word	0x10220000
 8001374:	10210000 	.word	0x10210000
 8001378:	10120000 	.word	0x10120000
 800137c:	10110000 	.word	0x10110000
 8001380:	40021000 	.word	0x40021000
 8001384:	40010000 	.word	0x40010000
 8001388:	40010800 	.word	0x40010800
 800138c:	40010c00 	.word	0x40010c00
 8001390:	40011000 	.word	0x40011000
 8001394:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <HAL_GPIO_Init+0x2f4>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	43db      	mvns	r3, r3
 80013a0:	4909      	ldr	r1, [pc, #36]	@ (80013c8 <HAL_GPIO_Init+0x2f4>)
 80013a2:	4013      	ands	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a8:	3301      	adds	r3, #1
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f47f ae96 	bne.w	80010e8 <HAL_GPIO_Init+0x14>
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	372c      	adds	r7, #44	@ 0x2c
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bc80      	pop	{r7}
 80013c6:	4770      	bx	lr
 80013c8:	40010400 	.word	0x40010400

080013cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	460b      	mov	r3, r1
 80013d6:	807b      	strh	r3, [r7, #2]
 80013d8:	4613      	mov	r3, r2
 80013da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013dc:	787b      	ldrb	r3, [r7, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e2:	887a      	ldrh	r2, [r7, #2]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013e8:	e003      	b.n	80013f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	041a      	lsls	r2, r3, #16
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	611a      	str	r2, [r3, #16]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e272      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	f000 8087 	beq.w	800152a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800141c:	4b92      	ldr	r3, [pc, #584]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 030c 	and.w	r3, r3, #12
 8001424:	2b04      	cmp	r3, #4
 8001426:	d00c      	beq.n	8001442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001428:	4b8f      	ldr	r3, [pc, #572]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 030c 	and.w	r3, r3, #12
 8001430:	2b08      	cmp	r3, #8
 8001432:	d112      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
 8001434:	4b8c      	ldr	r3, [pc, #560]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001440:	d10b      	bne.n	800145a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001442:	4b89      	ldr	r3, [pc, #548]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d06c      	beq.n	8001528 <HAL_RCC_OscConfig+0x12c>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d168      	bne.n	8001528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e24c      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001462:	d106      	bne.n	8001472 <HAL_RCC_OscConfig+0x76>
 8001464:	4b80      	ldr	r3, [pc, #512]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a7f      	ldr	r2, [pc, #508]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800146a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e02e      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10c      	bne.n	8001494 <HAL_RCC_OscConfig+0x98>
 800147a:	4b7b      	ldr	r3, [pc, #492]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7a      	ldr	r2, [pc, #488]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b78      	ldr	r3, [pc, #480]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a77      	ldr	r2, [pc, #476]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800148c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e01d      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800149c:	d10c      	bne.n	80014b8 <HAL_RCC_OscConfig+0xbc>
 800149e:	4b72      	ldr	r3, [pc, #456]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a71      	ldr	r2, [pc, #452]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b4:	6013      	str	r3, [r2, #0]
 80014b6:	e00b      	b.n	80014d0 <HAL_RCC_OscConfig+0xd4>
 80014b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a6a      	ldr	r2, [pc, #424]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b68      	ldr	r3, [pc, #416]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a67      	ldr	r2, [pc, #412]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d013      	beq.n	8001500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcea 	bl	8000eb0 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fce6 	bl	8000eb0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e200      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b5d      	ldr	r3, [pc, #372]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0xe4>
 80014fe:	e014      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fcd6 	bl	8000eb0 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fcd2 	bl	8000eb0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	@ 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1ec      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	4b53      	ldr	r3, [pc, #332]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x10c>
 8001526:	e000      	b.n	800152a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001536:	4b4c      	ldr	r3, [pc, #304]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001542:	4b49      	ldr	r3, [pc, #292]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b08      	cmp	r3, #8
 800154c:	d11c      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
 800154e:	4b46      	ldr	r3, [pc, #280]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d116      	bne.n	8001588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	4b43      	ldr	r3, [pc, #268]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	691b      	ldr	r3, [r3, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d001      	beq.n	8001572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e1c0      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001572:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4939      	ldr	r1, [pc, #228]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001582:	4313      	orrs	r3, r2
 8001584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	e03a      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d020      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001590:	4b36      	ldr	r3, [pc, #216]	@ (800166c <HAL_RCC_OscConfig+0x270>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fc8b 	bl	8000eb0 <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800159e:	f7ff fc87 	bl	8000eb0 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e1a1      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	4927      	ldr	r1, [pc, #156]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	600b      	str	r3, [r1, #0]
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015d2:	4b26      	ldr	r3, [pc, #152]	@ (800166c <HAL_RCC_OscConfig+0x270>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc6a 	bl	8000eb0 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc66 	bl	8000eb0 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e180      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	2b00      	cmp	r3, #0
 8001608:	d03a      	beq.n	8001680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d019      	beq.n	8001646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001612:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <HAL_RCC_OscConfig+0x274>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fc4a 	bl	8000eb0 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fc46 	bl	8000eb0 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e160      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	4b0d      	ldr	r3, [pc, #52]	@ (8001668 <HAL_RCC_OscConfig+0x26c>)
 8001634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0f0      	beq.n	8001620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800163e:	2001      	movs	r0, #1
 8001640:	f000 fa9e 	bl	8001b80 <RCC_Delay>
 8001644:	e01c      	b.n	8001680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_RCC_OscConfig+0x274>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff fc30 	bl	8000eb0 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001652:	e00f      	b.n	8001674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fc2c 	bl	8000eb0 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d908      	bls.n	8001674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e146      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
 8001666:	bf00      	nop
 8001668:	40021000 	.word	0x40021000
 800166c:	42420000 	.word	0x42420000
 8001670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b92      	ldr	r3, [pc, #584]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1e9      	bne.n	8001654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 80a6 	beq.w	80017da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b8b      	ldr	r3, [pc, #556]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10d      	bne.n	80016ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b88      	ldr	r3, [pc, #544]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a87      	ldr	r2, [pc, #540]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b85      	ldr	r3, [pc, #532]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b6:	2301      	movs	r3, #1
 80016b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ba:	4b82      	ldr	r3, [pc, #520]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d118      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016c6:	4b7f      	ldr	r3, [pc, #508]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a7e      	ldr	r2, [pc, #504]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d2:	f7ff fbed 	bl	8000eb0 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016da:	f7ff fbe9 	bl	8000eb0 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b64      	cmp	r3, #100	@ 0x64
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e103      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	4b75      	ldr	r3, [pc, #468]	@ (80018c4 <HAL_RCC_OscConfig+0x4c8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0f0      	beq.n	80016da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x312>
 8001700:	4b6f      	ldr	r3, [pc, #444]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	6a1b      	ldr	r3, [r3, #32]
 8001704:	4a6e      	ldr	r2, [pc, #440]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	6213      	str	r3, [r2, #32]
 800170c:	e02d      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x334>
 8001716:	4b6a      	ldr	r3, [pc, #424]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a69      	ldr	r2, [pc, #420]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b67      	ldr	r3, [pc, #412]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a66      	ldr	r2, [pc, #408]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x356>
 8001738:	4b61      	ldr	r3, [pc, #388]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a60      	ldr	r2, [pc, #384]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800173e:	f043 0304 	orr.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
 8001744:	4b5e      	ldr	r3, [pc, #376]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4a5d      	ldr	r2, [pc, #372]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6213      	str	r3, [r2, #32]
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x36e>
 8001752:	4b5b      	ldr	r3, [pc, #364]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4a5a      	ldr	r2, [pc, #360]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6213      	str	r3, [r2, #32]
 800175e:	4b58      	ldr	r3, [pc, #352]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a57      	ldr	r2, [pc, #348]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 0304 	bic.w	r3, r3, #4
 8001768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d015      	beq.n	800179e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001772:	f7ff fb9d 	bl	8000eb0 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001778:	e00a      	b.n	8001790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177a:	f7ff fb99 	bl	8000eb0 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e0b1      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001790:	4b4b      	ldr	r3, [pc, #300]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ee      	beq.n	800177a <HAL_RCC_OscConfig+0x37e>
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179e:	f7ff fb87 	bl	8000eb0 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017a4:	e00a      	b.n	80017bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a6:	f7ff fb83 	bl	8000eb0 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e09b      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017bc:	4b40      	ldr	r3, [pc, #256]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ee      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017c8:	7dfb      	ldrb	r3, [r7, #23]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d105      	bne.n	80017da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ce:	4b3c      	ldr	r3, [pc, #240]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	4a3b      	ldr	r2, [pc, #236]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8087 	beq.w	80018f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017e4:	4b36      	ldr	r3, [pc, #216]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d061      	beq.n	80018b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d146      	bne.n	8001886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017f8:	4b33      	ldr	r3, [pc, #204]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fb57 	bl	8000eb0 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001806:	f7ff fb53 	bl	8000eb0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e06d      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	4b29      	ldr	r3, [pc, #164]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1f0      	bne.n	8001806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800182c:	d108      	bne.n	8001840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800182e:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	4921      	ldr	r1, [pc, #132]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001840:	4b1f      	ldr	r3, [pc, #124]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a19      	ldr	r1, [r3, #32]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	430b      	orrs	r3, r1
 8001852:	491b      	ldr	r1, [pc, #108]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 800185a:	2201      	movs	r2, #1
 800185c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185e:	f7ff fb27 	bl	8000eb0 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001866:	f7ff fb23 	bl	8000eb0 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e03d      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	4b11      	ldr	r3, [pc, #68]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x46a>
 8001884:	e035      	b.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_RCC_OscConfig+0x4cc>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fb10 	bl	8000eb0 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001894:	f7ff fb0c 	bl	8000eb0 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b02      	cmp	r3, #2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e026      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	4b06      	ldr	r3, [pc, #24]	@ (80018c0 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x498>
 80018b2:	e01e      	b.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69db      	ldr	r3, [r3, #28]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d107      	bne.n	80018cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e019      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40007000 	.word	0x40007000
 80018c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_RCC_OscConfig+0x500>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d106      	bne.n	80018ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40021000 	.word	0x40021000

08001900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0d0      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001914:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d910      	bls.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b67      	ldr	r3, [pc, #412]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f023 0207 	bic.w	r2, r3, #7
 800192a:	4965      	ldr	r1, [pc, #404]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001932:	4b63      	ldr	r3, [pc, #396]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	683a      	ldr	r2, [r7, #0]
 800193c:	429a      	cmp	r2, r3
 800193e:	d001      	beq.n	8001944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0b8      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d020      	beq.n	8001992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800195c:	4b59      	ldr	r3, [pc, #356]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a58      	ldr	r2, [pc, #352]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d005      	beq.n	8001980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001974:	4b53      	ldr	r3, [pc, #332]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	4a52      	ldr	r2, [pc, #328]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800197e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001980:	4b50      	ldr	r3, [pc, #320]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	494d      	ldr	r1, [pc, #308]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d040      	beq.n	8001a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a6:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d115      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e07f      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d107      	bne.n	80019ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019be:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e073      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ce:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e06b      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019de:	4b39      	ldr	r3, [pc, #228]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f023 0203 	bic.w	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4936      	ldr	r1, [pc, #216]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	4313      	orrs	r3, r2
 80019ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f0:	f7ff fa5e 	bl	8000eb0 <HAL_GetTick>
 80019f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019f8:	f7ff fa5a 	bl	8000eb0 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e053      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f003 020c 	and.w	r2, r3, #12
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d1eb      	bne.n	80019f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a20:	4b27      	ldr	r3, [pc, #156]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d210      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2e:	4b24      	ldr	r3, [pc, #144]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 0207 	bic.w	r2, r3, #7
 8001a36:	4922      	ldr	r1, [pc, #136]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	@ (8001ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e032      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4916      	ldr	r1, [pc, #88]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7a:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	490e      	ldr	r1, [pc, #56]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a8e:	f000 f821 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a92:	4602      	mov	r2, r0
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	091b      	lsrs	r3, r3, #4
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	490a      	ldr	r1, [pc, #40]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa0:	5ccb      	ldrb	r3, [r1, r3]
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a09      	ldr	r2, [pc, #36]	@ (8001acc <HAL_RCC_ClockConfig+0x1cc>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff f9bc 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	08002d08 	.word	0x08002d08
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b087      	sub	sp, #28
 8001ad8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aee:	4b1e      	ldr	r3, [pc, #120]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 030c 	and.w	r3, r3, #12
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d002      	beq.n	8001b04 <HAL_RCC_GetSysClockFreq+0x30>
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d003      	beq.n	8001b0a <HAL_RCC_GetSysClockFreq+0x36>
 8001b02:	e027      	b.n	8001b54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b06:	613b      	str	r3, [r7, #16]
      break;
 8001b08:	e027      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	0c9b      	lsrs	r3, r3, #18
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	4a17      	ldr	r2, [pc, #92]	@ (8001b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b14:	5cd3      	ldrb	r3, [r2, r3]
 8001b16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d010      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b22:	4b11      	ldr	r3, [pc, #68]	@ (8001b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	0c5b      	lsrs	r3, r3, #17
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	4a11      	ldr	r2, [pc, #68]	@ (8001b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a0d      	ldr	r2, [pc, #52]	@ (8001b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8001b36:	fb03 f202 	mul.w	r2, r3, r2
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e004      	b.n	8001b4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a0c      	ldr	r2, [pc, #48]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	613b      	str	r3, [r7, #16]
      break;
 8001b52:	e002      	b.n	8001b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b54:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001b56:	613b      	str	r3, [r7, #16]
      break;
 8001b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b5a:	693b      	ldr	r3, [r7, #16]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	00b71b00 	.word	0x00b71b00
 8001b70:	08002d18 	.word	0x08002d18
 8001b74:	08002d28 	.word	0x08002d28
 8001b78:	003d0900 	.word	0x003d0900
 8001b7c:	007a1200 	.word	0x007a1200

08001b80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b88:	4b0a      	ldr	r3, [pc, #40]	@ (8001bb4 <RCC_Delay+0x34>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb8 <RCC_Delay+0x38>)
 8001b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b92:	0a5b      	lsrs	r3, r3, #9
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b9c:	bf00      	nop
  }
  while (Delay --);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1e5a      	subs	r2, r3, #1
 8001ba2:	60fa      	str	r2, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f9      	bne.n	8001b9c <RCC_Delay+0x1c>
}
 8001ba8:	bf00      	nop
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	20000004 	.word	0x20000004
 8001bb8:	10624dd3 	.word	0x10624dd3

08001bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e076      	b.n	8001cbc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d108      	bne.n	8001be8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bde:	d009      	beq.n	8001bf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
 8001be6:	e005      	b.n	8001bf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe ff9e 	bl	8000b50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c64:	431a      	orrs	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c78:	ea42 0103 	orr.w	r1, r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	0c1a      	lsrs	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f002 0204 	and.w	r2, r2, #4
 8001c9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001caa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <malloc>:
 8001cc4:	4b02      	ldr	r3, [pc, #8]	@ (8001cd0 <malloc+0xc>)
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	6818      	ldr	r0, [r3, #0]
 8001cca:	f000 b825 	b.w	8001d18 <_malloc_r>
 8001cce:	bf00      	nop
 8001cd0:	2000001c 	.word	0x2000001c

08001cd4 <sbrk_aligned>:
 8001cd4:	b570      	push	{r4, r5, r6, lr}
 8001cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8001d14 <sbrk_aligned+0x40>)
 8001cd8:	460c      	mov	r4, r1
 8001cda:	6831      	ldr	r1, [r6, #0]
 8001cdc:	4605      	mov	r5, r0
 8001cde:	b911      	cbnz	r1, 8001ce6 <sbrk_aligned+0x12>
 8001ce0:	f000 fa54 	bl	800218c <_sbrk_r>
 8001ce4:	6030      	str	r0, [r6, #0]
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	4628      	mov	r0, r5
 8001cea:	f000 fa4f 	bl	800218c <_sbrk_r>
 8001cee:	1c43      	adds	r3, r0, #1
 8001cf0:	d103      	bne.n	8001cfa <sbrk_aligned+0x26>
 8001cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}
 8001cfa:	1cc4      	adds	r4, r0, #3
 8001cfc:	f024 0403 	bic.w	r4, r4, #3
 8001d00:	42a0      	cmp	r0, r4
 8001d02:	d0f8      	beq.n	8001cf6 <sbrk_aligned+0x22>
 8001d04:	1a21      	subs	r1, r4, r0
 8001d06:	4628      	mov	r0, r5
 8001d08:	f000 fa40 	bl	800218c <_sbrk_r>
 8001d0c:	3001      	adds	r0, #1
 8001d0e:	d1f2      	bne.n	8001cf6 <sbrk_aligned+0x22>
 8001d10:	e7ef      	b.n	8001cf2 <sbrk_aligned+0x1e>
 8001d12:	bf00      	nop
 8001d14:	200000f0 	.word	0x200000f0

08001d18 <_malloc_r>:
 8001d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d1c:	1ccd      	adds	r5, r1, #3
 8001d1e:	f025 0503 	bic.w	r5, r5, #3
 8001d22:	3508      	adds	r5, #8
 8001d24:	2d0c      	cmp	r5, #12
 8001d26:	bf38      	it	cc
 8001d28:	250c      	movcc	r5, #12
 8001d2a:	2d00      	cmp	r5, #0
 8001d2c:	4606      	mov	r6, r0
 8001d2e:	db01      	blt.n	8001d34 <_malloc_r+0x1c>
 8001d30:	42a9      	cmp	r1, r5
 8001d32:	d904      	bls.n	8001d3e <_malloc_r+0x26>
 8001d34:	230c      	movs	r3, #12
 8001d36:	6033      	str	r3, [r6, #0]
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e14 <_malloc_r+0xfc>
 8001d42:	f000 f869 	bl	8001e18 <__malloc_lock>
 8001d46:	f8d8 3000 	ldr.w	r3, [r8]
 8001d4a:	461c      	mov	r4, r3
 8001d4c:	bb44      	cbnz	r4, 8001da0 <_malloc_r+0x88>
 8001d4e:	4629      	mov	r1, r5
 8001d50:	4630      	mov	r0, r6
 8001d52:	f7ff ffbf 	bl	8001cd4 <sbrk_aligned>
 8001d56:	1c43      	adds	r3, r0, #1
 8001d58:	4604      	mov	r4, r0
 8001d5a:	d158      	bne.n	8001e0e <_malloc_r+0xf6>
 8001d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8001d60:	4627      	mov	r7, r4
 8001d62:	2f00      	cmp	r7, #0
 8001d64:	d143      	bne.n	8001dee <_malloc_r+0xd6>
 8001d66:	2c00      	cmp	r4, #0
 8001d68:	d04b      	beq.n	8001e02 <_malloc_r+0xea>
 8001d6a:	6823      	ldr	r3, [r4, #0]
 8001d6c:	4639      	mov	r1, r7
 8001d6e:	4630      	mov	r0, r6
 8001d70:	eb04 0903 	add.w	r9, r4, r3
 8001d74:	f000 fa0a 	bl	800218c <_sbrk_r>
 8001d78:	4581      	cmp	r9, r0
 8001d7a:	d142      	bne.n	8001e02 <_malloc_r+0xea>
 8001d7c:	6821      	ldr	r1, [r4, #0]
 8001d7e:	4630      	mov	r0, r6
 8001d80:	1a6d      	subs	r5, r5, r1
 8001d82:	4629      	mov	r1, r5
 8001d84:	f7ff ffa6 	bl	8001cd4 <sbrk_aligned>
 8001d88:	3001      	adds	r0, #1
 8001d8a:	d03a      	beq.n	8001e02 <_malloc_r+0xea>
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	442b      	add	r3, r5
 8001d90:	6023      	str	r3, [r4, #0]
 8001d92:	f8d8 3000 	ldr.w	r3, [r8]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	bb62      	cbnz	r2, 8001df4 <_malloc_r+0xdc>
 8001d9a:	f8c8 7000 	str.w	r7, [r8]
 8001d9e:	e00f      	b.n	8001dc0 <_malloc_r+0xa8>
 8001da0:	6822      	ldr	r2, [r4, #0]
 8001da2:	1b52      	subs	r2, r2, r5
 8001da4:	d420      	bmi.n	8001de8 <_malloc_r+0xd0>
 8001da6:	2a0b      	cmp	r2, #11
 8001da8:	d917      	bls.n	8001dda <_malloc_r+0xc2>
 8001daa:	1961      	adds	r1, r4, r5
 8001dac:	42a3      	cmp	r3, r4
 8001dae:	6025      	str	r5, [r4, #0]
 8001db0:	bf18      	it	ne
 8001db2:	6059      	strne	r1, [r3, #4]
 8001db4:	6863      	ldr	r3, [r4, #4]
 8001db6:	bf08      	it	eq
 8001db8:	f8c8 1000 	streq.w	r1, [r8]
 8001dbc:	5162      	str	r2, [r4, r5]
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f000 f82f 	bl	8001e24 <__malloc_unlock>
 8001dc6:	f104 000b 	add.w	r0, r4, #11
 8001dca:	1d23      	adds	r3, r4, #4
 8001dcc:	f020 0007 	bic.w	r0, r0, #7
 8001dd0:	1ac2      	subs	r2, r0, r3
 8001dd2:	bf1c      	itt	ne
 8001dd4:	1a1b      	subne	r3, r3, r0
 8001dd6:	50a3      	strne	r3, [r4, r2]
 8001dd8:	e7af      	b.n	8001d3a <_malloc_r+0x22>
 8001dda:	6862      	ldr	r2, [r4, #4]
 8001ddc:	42a3      	cmp	r3, r4
 8001dde:	bf0c      	ite	eq
 8001de0:	f8c8 2000 	streq.w	r2, [r8]
 8001de4:	605a      	strne	r2, [r3, #4]
 8001de6:	e7eb      	b.n	8001dc0 <_malloc_r+0xa8>
 8001de8:	4623      	mov	r3, r4
 8001dea:	6864      	ldr	r4, [r4, #4]
 8001dec:	e7ae      	b.n	8001d4c <_malloc_r+0x34>
 8001dee:	463c      	mov	r4, r7
 8001df0:	687f      	ldr	r7, [r7, #4]
 8001df2:	e7b6      	b.n	8001d62 <_malloc_r+0x4a>
 8001df4:	461a      	mov	r2, r3
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	42a3      	cmp	r3, r4
 8001dfa:	d1fb      	bne.n	8001df4 <_malloc_r+0xdc>
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	6053      	str	r3, [r2, #4]
 8001e00:	e7de      	b.n	8001dc0 <_malloc_r+0xa8>
 8001e02:	230c      	movs	r3, #12
 8001e04:	4630      	mov	r0, r6
 8001e06:	6033      	str	r3, [r6, #0]
 8001e08:	f000 f80c 	bl	8001e24 <__malloc_unlock>
 8001e0c:	e794      	b.n	8001d38 <_malloc_r+0x20>
 8001e0e:	6005      	str	r5, [r0, #0]
 8001e10:	e7d6      	b.n	8001dc0 <_malloc_r+0xa8>
 8001e12:	bf00      	nop
 8001e14:	200000f4 	.word	0x200000f4

08001e18 <__malloc_lock>:
 8001e18:	4801      	ldr	r0, [pc, #4]	@ (8001e20 <__malloc_lock+0x8>)
 8001e1a:	f000 ba04 	b.w	8002226 <__retarget_lock_acquire_recursive>
 8001e1e:	bf00      	nop
 8001e20:	20000238 	.word	0x20000238

08001e24 <__malloc_unlock>:
 8001e24:	4801      	ldr	r0, [pc, #4]	@ (8001e2c <__malloc_unlock+0x8>)
 8001e26:	f000 b9ff 	b.w	8002228 <__retarget_lock_release_recursive>
 8001e2a:	bf00      	nop
 8001e2c:	20000238 	.word	0x20000238

08001e30 <srand>:
 8001e30:	b538      	push	{r3, r4, r5, lr}
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <srand+0x44>)
 8001e34:	4604      	mov	r4, r0
 8001e36:	681d      	ldr	r5, [r3, #0]
 8001e38:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001e3a:	b9b3      	cbnz	r3, 8001e6a <srand+0x3a>
 8001e3c:	2018      	movs	r0, #24
 8001e3e:	f7ff ff41 	bl	8001cc4 <malloc>
 8001e42:	4602      	mov	r2, r0
 8001e44:	6328      	str	r0, [r5, #48]	@ 0x30
 8001e46:	b920      	cbnz	r0, 8001e52 <srand+0x22>
 8001e48:	2146      	movs	r1, #70	@ 0x46
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e78 <srand+0x48>)
 8001e4c:	480b      	ldr	r0, [pc, #44]	@ (8001e7c <srand+0x4c>)
 8001e4e:	f000 f9ed 	bl	800222c <__assert_func>
 8001e52:	490b      	ldr	r1, [pc, #44]	@ (8001e80 <srand+0x50>)
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <srand+0x54>)
 8001e56:	e9c0 1300 	strd	r1, r3, [r0]
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <srand+0x58>)
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	6083      	str	r3, [r0, #8]
 8001e60:	230b      	movs	r3, #11
 8001e62:	8183      	strh	r3, [r0, #12]
 8001e64:	2001      	movs	r0, #1
 8001e66:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001e6e:	611c      	str	r4, [r3, #16]
 8001e70:	615a      	str	r2, [r3, #20]
 8001e72:	bd38      	pop	{r3, r4, r5, pc}
 8001e74:	2000001c 	.word	0x2000001c
 8001e78:	08002d2a 	.word	0x08002d2a
 8001e7c:	08002d41 	.word	0x08002d41
 8001e80:	abcd330e 	.word	0xabcd330e
 8001e84:	e66d1234 	.word	0xe66d1234
 8001e88:	0005deec 	.word	0x0005deec

08001e8c <rand>:
 8001e8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <rand+0x5c>)
 8001e8e:	b510      	push	{r4, lr}
 8001e90:	681c      	ldr	r4, [r3, #0]
 8001e92:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001e94:	b9b3      	cbnz	r3, 8001ec4 <rand+0x38>
 8001e96:	2018      	movs	r0, #24
 8001e98:	f7ff ff14 	bl	8001cc4 <malloc>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	6320      	str	r0, [r4, #48]	@ 0x30
 8001ea0:	b920      	cbnz	r0, 8001eac <rand+0x20>
 8001ea2:	2152      	movs	r1, #82	@ 0x52
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <rand+0x60>)
 8001ea6:	4812      	ldr	r0, [pc, #72]	@ (8001ef0 <rand+0x64>)
 8001ea8:	f000 f9c0 	bl	800222c <__assert_func>
 8001eac:	4911      	ldr	r1, [pc, #68]	@ (8001ef4 <rand+0x68>)
 8001eae:	4b12      	ldr	r3, [pc, #72]	@ (8001ef8 <rand+0x6c>)
 8001eb0:	e9c0 1300 	strd	r1, r3, [r0]
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <rand+0x70>)
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	6083      	str	r3, [r0, #8]
 8001eba:	230b      	movs	r3, #11
 8001ebc:	8183      	strh	r3, [r0, #12]
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001ec4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001ec6:	480e      	ldr	r0, [pc, #56]	@ (8001f00 <rand+0x74>)
 8001ec8:	690b      	ldr	r3, [r1, #16]
 8001eca:	694c      	ldr	r4, [r1, #20]
 8001ecc:	4358      	muls	r0, r3
 8001ece:	4a0d      	ldr	r2, [pc, #52]	@ (8001f04 <rand+0x78>)
 8001ed0:	fb02 0004 	mla	r0, r2, r4, r0
 8001ed4:	fba3 3202 	umull	r3, r2, r3, r2
 8001ed8:	3301      	adds	r3, #1
 8001eda:	eb40 0002 	adc.w	r0, r0, r2
 8001ede:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001ee2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001ee6:	bd10      	pop	{r4, pc}
 8001ee8:	2000001c 	.word	0x2000001c
 8001eec:	08002d2a 	.word	0x08002d2a
 8001ef0:	08002d41 	.word	0x08002d41
 8001ef4:	abcd330e 	.word	0xabcd330e
 8001ef8:	e66d1234 	.word	0xe66d1234
 8001efc:	0005deec 	.word	0x0005deec
 8001f00:	5851f42d 	.word	0x5851f42d
 8001f04:	4c957f2d 	.word	0x4c957f2d

08001f08 <std>:
 8001f08:	2300      	movs	r3, #0
 8001f0a:	b510      	push	{r4, lr}
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	e9c0 3300 	strd	r3, r3, [r0]
 8001f12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f16:	6083      	str	r3, [r0, #8]
 8001f18:	8181      	strh	r1, [r0, #12]
 8001f1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f1c:	81c2      	strh	r2, [r0, #14]
 8001f1e:	6183      	str	r3, [r0, #24]
 8001f20:	4619      	mov	r1, r3
 8001f22:	2208      	movs	r2, #8
 8001f24:	305c      	adds	r0, #92	@ 0x5c
 8001f26:	f000 f8f4 	bl	8002112 <memset>
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <std+0x58>)
 8001f2c:	6224      	str	r4, [r4, #32]
 8001f2e:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <std+0x5c>)
 8001f32:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f34:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <std+0x60>)
 8001f36:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <std+0x64>)
 8001f3a:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <std+0x68>)
 8001f3e:	429c      	cmp	r4, r3
 8001f40:	d006      	beq.n	8001f50 <std+0x48>
 8001f42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001f46:	4294      	cmp	r4, r2
 8001f48:	d002      	beq.n	8001f50 <std+0x48>
 8001f4a:	33d0      	adds	r3, #208	@ 0xd0
 8001f4c:	429c      	cmp	r4, r3
 8001f4e:	d105      	bne.n	8001f5c <std+0x54>
 8001f50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f58:	f000 b964 	b.w	8002224 <__retarget_lock_init_recursive>
 8001f5c:	bd10      	pop	{r4, pc}
 8001f5e:	bf00      	nop
 8001f60:	0800208d 	.word	0x0800208d
 8001f64:	080020af 	.word	0x080020af
 8001f68:	080020e7 	.word	0x080020e7
 8001f6c:	0800210b 	.word	0x0800210b
 8001f70:	200000f8 	.word	0x200000f8

08001f74 <stdio_exit_handler>:
 8001f74:	4a02      	ldr	r2, [pc, #8]	@ (8001f80 <stdio_exit_handler+0xc>)
 8001f76:	4903      	ldr	r1, [pc, #12]	@ (8001f84 <stdio_exit_handler+0x10>)
 8001f78:	4803      	ldr	r0, [pc, #12]	@ (8001f88 <stdio_exit_handler+0x14>)
 8001f7a:	f000 b869 	b.w	8002050 <_fwalk_sglue>
 8001f7e:	bf00      	nop
 8001f80:	20000010 	.word	0x20000010
 8001f84:	080023f9 	.word	0x080023f9
 8001f88:	20000020 	.word	0x20000020

08001f8c <cleanup_stdio>:
 8001f8c:	6841      	ldr	r1, [r0, #4]
 8001f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <cleanup_stdio+0x34>)
 8001f90:	b510      	push	{r4, lr}
 8001f92:	4299      	cmp	r1, r3
 8001f94:	4604      	mov	r4, r0
 8001f96:	d001      	beq.n	8001f9c <cleanup_stdio+0x10>
 8001f98:	f000 fa2e 	bl	80023f8 <_fflush_r>
 8001f9c:	68a1      	ldr	r1, [r4, #8]
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <cleanup_stdio+0x38>)
 8001fa0:	4299      	cmp	r1, r3
 8001fa2:	d002      	beq.n	8001faa <cleanup_stdio+0x1e>
 8001fa4:	4620      	mov	r0, r4
 8001fa6:	f000 fa27 	bl	80023f8 <_fflush_r>
 8001faa:	68e1      	ldr	r1, [r4, #12]
 8001fac:	4b06      	ldr	r3, [pc, #24]	@ (8001fc8 <cleanup_stdio+0x3c>)
 8001fae:	4299      	cmp	r1, r3
 8001fb0:	d004      	beq.n	8001fbc <cleanup_stdio+0x30>
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fb8:	f000 ba1e 	b.w	80023f8 <_fflush_r>
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	bf00      	nop
 8001fc0:	200000f8 	.word	0x200000f8
 8001fc4:	20000160 	.word	0x20000160
 8001fc8:	200001c8 	.word	0x200001c8

08001fcc <global_stdio_init.part.0>:
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <global_stdio_init.part.0+0x30>)
 8001fd0:	4c0b      	ldr	r4, [pc, #44]	@ (8002000 <global_stdio_init.part.0+0x34>)
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	@ (8002004 <global_stdio_init.part.0+0x38>)
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	2104      	movs	r1, #4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f7ff ff94 	bl	8001f08 <std>
 8001fe0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	2109      	movs	r1, #9
 8001fe8:	f7ff ff8e 	bl	8001f08 <std>
 8001fec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ff6:	2112      	movs	r1, #18
 8001ff8:	f7ff bf86 	b.w	8001f08 <std>
 8001ffc:	20000230 	.word	0x20000230
 8002000:	200000f8 	.word	0x200000f8
 8002004:	08001f75 	.word	0x08001f75

08002008 <__sfp_lock_acquire>:
 8002008:	4801      	ldr	r0, [pc, #4]	@ (8002010 <__sfp_lock_acquire+0x8>)
 800200a:	f000 b90c 	b.w	8002226 <__retarget_lock_acquire_recursive>
 800200e:	bf00      	nop
 8002010:	20000239 	.word	0x20000239

08002014 <__sfp_lock_release>:
 8002014:	4801      	ldr	r0, [pc, #4]	@ (800201c <__sfp_lock_release+0x8>)
 8002016:	f000 b907 	b.w	8002228 <__retarget_lock_release_recursive>
 800201a:	bf00      	nop
 800201c:	20000239 	.word	0x20000239

08002020 <__sinit>:
 8002020:	b510      	push	{r4, lr}
 8002022:	4604      	mov	r4, r0
 8002024:	f7ff fff0 	bl	8002008 <__sfp_lock_acquire>
 8002028:	6a23      	ldr	r3, [r4, #32]
 800202a:	b11b      	cbz	r3, 8002034 <__sinit+0x14>
 800202c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002030:	f7ff bff0 	b.w	8002014 <__sfp_lock_release>
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <__sinit+0x28>)
 8002036:	6223      	str	r3, [r4, #32]
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__sinit+0x2c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f5      	bne.n	800202c <__sinit+0xc>
 8002040:	f7ff ffc4 	bl	8001fcc <global_stdio_init.part.0>
 8002044:	e7f2      	b.n	800202c <__sinit+0xc>
 8002046:	bf00      	nop
 8002048:	08001f8d 	.word	0x08001f8d
 800204c:	20000230 	.word	0x20000230

08002050 <_fwalk_sglue>:
 8002050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002054:	4607      	mov	r7, r0
 8002056:	4688      	mov	r8, r1
 8002058:	4614      	mov	r4, r2
 800205a:	2600      	movs	r6, #0
 800205c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002060:	f1b9 0901 	subs.w	r9, r9, #1
 8002064:	d505      	bpl.n	8002072 <_fwalk_sglue+0x22>
 8002066:	6824      	ldr	r4, [r4, #0]
 8002068:	2c00      	cmp	r4, #0
 800206a:	d1f7      	bne.n	800205c <_fwalk_sglue+0xc>
 800206c:	4630      	mov	r0, r6
 800206e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002072:	89ab      	ldrh	r3, [r5, #12]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d907      	bls.n	8002088 <_fwalk_sglue+0x38>
 8002078:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800207c:	3301      	adds	r3, #1
 800207e:	d003      	beq.n	8002088 <_fwalk_sglue+0x38>
 8002080:	4629      	mov	r1, r5
 8002082:	4638      	mov	r0, r7
 8002084:	47c0      	blx	r8
 8002086:	4306      	orrs	r6, r0
 8002088:	3568      	adds	r5, #104	@ 0x68
 800208a:	e7e9      	b.n	8002060 <_fwalk_sglue+0x10>

0800208c <__sread>:
 800208c:	b510      	push	{r4, lr}
 800208e:	460c      	mov	r4, r1
 8002090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002094:	f000 f868 	bl	8002168 <_read_r>
 8002098:	2800      	cmp	r0, #0
 800209a:	bfab      	itete	ge
 800209c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800209e:	89a3      	ldrhlt	r3, [r4, #12]
 80020a0:	181b      	addge	r3, r3, r0
 80020a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80020a6:	bfac      	ite	ge
 80020a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80020aa:	81a3      	strhlt	r3, [r4, #12]
 80020ac:	bd10      	pop	{r4, pc}

080020ae <__swrite>:
 80020ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020b2:	461f      	mov	r7, r3
 80020b4:	898b      	ldrh	r3, [r1, #12]
 80020b6:	4605      	mov	r5, r0
 80020b8:	05db      	lsls	r3, r3, #23
 80020ba:	460c      	mov	r4, r1
 80020bc:	4616      	mov	r6, r2
 80020be:	d505      	bpl.n	80020cc <__swrite+0x1e>
 80020c0:	2302      	movs	r3, #2
 80020c2:	2200      	movs	r2, #0
 80020c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020c8:	f000 f83c 	bl	8002144 <_lseek_r>
 80020cc:	89a3      	ldrh	r3, [r4, #12]
 80020ce:	4632      	mov	r2, r6
 80020d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020d4:	81a3      	strh	r3, [r4, #12]
 80020d6:	4628      	mov	r0, r5
 80020d8:	463b      	mov	r3, r7
 80020da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020e2:	f000 b863 	b.w	80021ac <_write_r>

080020e6 <__sseek>:
 80020e6:	b510      	push	{r4, lr}
 80020e8:	460c      	mov	r4, r1
 80020ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020ee:	f000 f829 	bl	8002144 <_lseek_r>
 80020f2:	1c43      	adds	r3, r0, #1
 80020f4:	89a3      	ldrh	r3, [r4, #12]
 80020f6:	bf15      	itete	ne
 80020f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80020fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80020fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002102:	81a3      	strheq	r3, [r4, #12]
 8002104:	bf18      	it	ne
 8002106:	81a3      	strhne	r3, [r4, #12]
 8002108:	bd10      	pop	{r4, pc}

0800210a <__sclose>:
 800210a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800210e:	f000 b809 	b.w	8002124 <_close_r>

08002112 <memset>:
 8002112:	4603      	mov	r3, r0
 8002114:	4402      	add	r2, r0
 8002116:	4293      	cmp	r3, r2
 8002118:	d100      	bne.n	800211c <memset+0xa>
 800211a:	4770      	bx	lr
 800211c:	f803 1b01 	strb.w	r1, [r3], #1
 8002120:	e7f9      	b.n	8002116 <memset+0x4>
	...

08002124 <_close_r>:
 8002124:	b538      	push	{r3, r4, r5, lr}
 8002126:	2300      	movs	r3, #0
 8002128:	4d05      	ldr	r5, [pc, #20]	@ (8002140 <_close_r+0x1c>)
 800212a:	4604      	mov	r4, r0
 800212c:	4608      	mov	r0, r1
 800212e:	602b      	str	r3, [r5, #0]
 8002130:	f7fe fdd3 	bl	8000cda <_close>
 8002134:	1c43      	adds	r3, r0, #1
 8002136:	d102      	bne.n	800213e <_close_r+0x1a>
 8002138:	682b      	ldr	r3, [r5, #0]
 800213a:	b103      	cbz	r3, 800213e <_close_r+0x1a>
 800213c:	6023      	str	r3, [r4, #0]
 800213e:	bd38      	pop	{r3, r4, r5, pc}
 8002140:	20000234 	.word	0x20000234

08002144 <_lseek_r>:
 8002144:	b538      	push	{r3, r4, r5, lr}
 8002146:	4604      	mov	r4, r0
 8002148:	4608      	mov	r0, r1
 800214a:	4611      	mov	r1, r2
 800214c:	2200      	movs	r2, #0
 800214e:	4d05      	ldr	r5, [pc, #20]	@ (8002164 <_lseek_r+0x20>)
 8002150:	602a      	str	r2, [r5, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	f7fe fde5 	bl	8000d22 <_lseek>
 8002158:	1c43      	adds	r3, r0, #1
 800215a:	d102      	bne.n	8002162 <_lseek_r+0x1e>
 800215c:	682b      	ldr	r3, [r5, #0]
 800215e:	b103      	cbz	r3, 8002162 <_lseek_r+0x1e>
 8002160:	6023      	str	r3, [r4, #0]
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	20000234 	.word	0x20000234

08002168 <_read_r>:
 8002168:	b538      	push	{r3, r4, r5, lr}
 800216a:	4604      	mov	r4, r0
 800216c:	4608      	mov	r0, r1
 800216e:	4611      	mov	r1, r2
 8002170:	2200      	movs	r2, #0
 8002172:	4d05      	ldr	r5, [pc, #20]	@ (8002188 <_read_r+0x20>)
 8002174:	602a      	str	r2, [r5, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	f7fe fd76 	bl	8000c68 <_read>
 800217c:	1c43      	adds	r3, r0, #1
 800217e:	d102      	bne.n	8002186 <_read_r+0x1e>
 8002180:	682b      	ldr	r3, [r5, #0]
 8002182:	b103      	cbz	r3, 8002186 <_read_r+0x1e>
 8002184:	6023      	str	r3, [r4, #0]
 8002186:	bd38      	pop	{r3, r4, r5, pc}
 8002188:	20000234 	.word	0x20000234

0800218c <_sbrk_r>:
 800218c:	b538      	push	{r3, r4, r5, lr}
 800218e:	2300      	movs	r3, #0
 8002190:	4d05      	ldr	r5, [pc, #20]	@ (80021a8 <_sbrk_r+0x1c>)
 8002192:	4604      	mov	r4, r0
 8002194:	4608      	mov	r0, r1
 8002196:	602b      	str	r3, [r5, #0]
 8002198:	f7fe fdd0 	bl	8000d3c <_sbrk>
 800219c:	1c43      	adds	r3, r0, #1
 800219e:	d102      	bne.n	80021a6 <_sbrk_r+0x1a>
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	b103      	cbz	r3, 80021a6 <_sbrk_r+0x1a>
 80021a4:	6023      	str	r3, [r4, #0]
 80021a6:	bd38      	pop	{r3, r4, r5, pc}
 80021a8:	20000234 	.word	0x20000234

080021ac <_write_r>:
 80021ac:	b538      	push	{r3, r4, r5, lr}
 80021ae:	4604      	mov	r4, r0
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	2200      	movs	r2, #0
 80021b6:	4d05      	ldr	r5, [pc, #20]	@ (80021cc <_write_r+0x20>)
 80021b8:	602a      	str	r2, [r5, #0]
 80021ba:	461a      	mov	r2, r3
 80021bc:	f7fe fd71 	bl	8000ca2 <_write>
 80021c0:	1c43      	adds	r3, r0, #1
 80021c2:	d102      	bne.n	80021ca <_write_r+0x1e>
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	b103      	cbz	r3, 80021ca <_write_r+0x1e>
 80021c8:	6023      	str	r3, [r4, #0]
 80021ca:	bd38      	pop	{r3, r4, r5, pc}
 80021cc:	20000234 	.word	0x20000234

080021d0 <__errno>:
 80021d0:	4b01      	ldr	r3, [pc, #4]	@ (80021d8 <__errno+0x8>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	2000001c 	.word	0x2000001c

080021dc <__libc_init_array>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	2600      	movs	r6, #0
 80021e0:	4d0c      	ldr	r5, [pc, #48]	@ (8002214 <__libc_init_array+0x38>)
 80021e2:	4c0d      	ldr	r4, [pc, #52]	@ (8002218 <__libc_init_array+0x3c>)
 80021e4:	1b64      	subs	r4, r4, r5
 80021e6:	10a4      	asrs	r4, r4, #2
 80021e8:	42a6      	cmp	r6, r4
 80021ea:	d109      	bne.n	8002200 <__libc_init_array+0x24>
 80021ec:	f000 fd80 	bl	8002cf0 <_init>
 80021f0:	2600      	movs	r6, #0
 80021f2:	4d0a      	ldr	r5, [pc, #40]	@ (800221c <__libc_init_array+0x40>)
 80021f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002220 <__libc_init_array+0x44>)
 80021f6:	1b64      	subs	r4, r4, r5
 80021f8:	10a4      	asrs	r4, r4, #2
 80021fa:	42a6      	cmp	r6, r4
 80021fc:	d105      	bne.n	800220a <__libc_init_array+0x2e>
 80021fe:	bd70      	pop	{r4, r5, r6, pc}
 8002200:	f855 3b04 	ldr.w	r3, [r5], #4
 8002204:	4798      	blx	r3
 8002206:	3601      	adds	r6, #1
 8002208:	e7ee      	b.n	80021e8 <__libc_init_array+0xc>
 800220a:	f855 3b04 	ldr.w	r3, [r5], #4
 800220e:	4798      	blx	r3
 8002210:	3601      	adds	r6, #1
 8002212:	e7f2      	b.n	80021fa <__libc_init_array+0x1e>
 8002214:	08002e08 	.word	0x08002e08
 8002218:	08002e08 	.word	0x08002e08
 800221c:	08002e08 	.word	0x08002e08
 8002220:	08002e0c 	.word	0x08002e0c

08002224 <__retarget_lock_init_recursive>:
 8002224:	4770      	bx	lr

08002226 <__retarget_lock_acquire_recursive>:
 8002226:	4770      	bx	lr

08002228 <__retarget_lock_release_recursive>:
 8002228:	4770      	bx	lr
	...

0800222c <__assert_func>:
 800222c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800222e:	4614      	mov	r4, r2
 8002230:	461a      	mov	r2, r3
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <__assert_func+0x2c>)
 8002234:	4605      	mov	r5, r0
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	68d8      	ldr	r0, [r3, #12]
 800223a:	b954      	cbnz	r4, 8002252 <__assert_func+0x26>
 800223c:	4b07      	ldr	r3, [pc, #28]	@ (800225c <__assert_func+0x30>)
 800223e:	461c      	mov	r4, r3
 8002240:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002244:	9100      	str	r1, [sp, #0]
 8002246:	462b      	mov	r3, r5
 8002248:	4905      	ldr	r1, [pc, #20]	@ (8002260 <__assert_func+0x34>)
 800224a:	f000 f8fd 	bl	8002448 <fiprintf>
 800224e:	f000 f90d 	bl	800246c <abort>
 8002252:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <__assert_func+0x38>)
 8002254:	e7f4      	b.n	8002240 <__assert_func+0x14>
 8002256:	bf00      	nop
 8002258:	2000001c 	.word	0x2000001c
 800225c:	08002dd4 	.word	0x08002dd4
 8002260:	08002da6 	.word	0x08002da6
 8002264:	08002d99 	.word	0x08002d99

08002268 <_free_r>:
 8002268:	b538      	push	{r3, r4, r5, lr}
 800226a:	4605      	mov	r5, r0
 800226c:	2900      	cmp	r1, #0
 800226e:	d040      	beq.n	80022f2 <_free_r+0x8a>
 8002270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002274:	1f0c      	subs	r4, r1, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	bfb8      	it	lt
 800227a:	18e4      	addlt	r4, r4, r3
 800227c:	f7ff fdcc 	bl	8001e18 <__malloc_lock>
 8002280:	4a1c      	ldr	r2, [pc, #112]	@ (80022f4 <_free_r+0x8c>)
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	b933      	cbnz	r3, 8002294 <_free_r+0x2c>
 8002286:	6063      	str	r3, [r4, #4]
 8002288:	6014      	str	r4, [r2, #0]
 800228a:	4628      	mov	r0, r5
 800228c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002290:	f7ff bdc8 	b.w	8001e24 <__malloc_unlock>
 8002294:	42a3      	cmp	r3, r4
 8002296:	d908      	bls.n	80022aa <_free_r+0x42>
 8002298:	6820      	ldr	r0, [r4, #0]
 800229a:	1821      	adds	r1, r4, r0
 800229c:	428b      	cmp	r3, r1
 800229e:	bf01      	itttt	eq
 80022a0:	6819      	ldreq	r1, [r3, #0]
 80022a2:	685b      	ldreq	r3, [r3, #4]
 80022a4:	1809      	addeq	r1, r1, r0
 80022a6:	6021      	streq	r1, [r4, #0]
 80022a8:	e7ed      	b.n	8002286 <_free_r+0x1e>
 80022aa:	461a      	mov	r2, r3
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	b10b      	cbz	r3, 80022b4 <_free_r+0x4c>
 80022b0:	42a3      	cmp	r3, r4
 80022b2:	d9fa      	bls.n	80022aa <_free_r+0x42>
 80022b4:	6811      	ldr	r1, [r2, #0]
 80022b6:	1850      	adds	r0, r2, r1
 80022b8:	42a0      	cmp	r0, r4
 80022ba:	d10b      	bne.n	80022d4 <_free_r+0x6c>
 80022bc:	6820      	ldr	r0, [r4, #0]
 80022be:	4401      	add	r1, r0
 80022c0:	1850      	adds	r0, r2, r1
 80022c2:	4283      	cmp	r3, r0
 80022c4:	6011      	str	r1, [r2, #0]
 80022c6:	d1e0      	bne.n	800228a <_free_r+0x22>
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	4408      	add	r0, r1
 80022ce:	6010      	str	r0, [r2, #0]
 80022d0:	6053      	str	r3, [r2, #4]
 80022d2:	e7da      	b.n	800228a <_free_r+0x22>
 80022d4:	d902      	bls.n	80022dc <_free_r+0x74>
 80022d6:	230c      	movs	r3, #12
 80022d8:	602b      	str	r3, [r5, #0]
 80022da:	e7d6      	b.n	800228a <_free_r+0x22>
 80022dc:	6820      	ldr	r0, [r4, #0]
 80022de:	1821      	adds	r1, r4, r0
 80022e0:	428b      	cmp	r3, r1
 80022e2:	bf01      	itttt	eq
 80022e4:	6819      	ldreq	r1, [r3, #0]
 80022e6:	685b      	ldreq	r3, [r3, #4]
 80022e8:	1809      	addeq	r1, r1, r0
 80022ea:	6021      	streq	r1, [r4, #0]
 80022ec:	6063      	str	r3, [r4, #4]
 80022ee:	6054      	str	r4, [r2, #4]
 80022f0:	e7cb      	b.n	800228a <_free_r+0x22>
 80022f2:	bd38      	pop	{r3, r4, r5, pc}
 80022f4:	200000f4 	.word	0x200000f4

080022f8 <__sflush_r>:
 80022f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80022fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022fe:	0716      	lsls	r6, r2, #28
 8002300:	4605      	mov	r5, r0
 8002302:	460c      	mov	r4, r1
 8002304:	d454      	bmi.n	80023b0 <__sflush_r+0xb8>
 8002306:	684b      	ldr	r3, [r1, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	dc02      	bgt.n	8002312 <__sflush_r+0x1a>
 800230c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	dd48      	ble.n	80023a4 <__sflush_r+0xac>
 8002312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002314:	2e00      	cmp	r6, #0
 8002316:	d045      	beq.n	80023a4 <__sflush_r+0xac>
 8002318:	2300      	movs	r3, #0
 800231a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800231e:	682f      	ldr	r7, [r5, #0]
 8002320:	6a21      	ldr	r1, [r4, #32]
 8002322:	602b      	str	r3, [r5, #0]
 8002324:	d030      	beq.n	8002388 <__sflush_r+0x90>
 8002326:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002328:	89a3      	ldrh	r3, [r4, #12]
 800232a:	0759      	lsls	r1, r3, #29
 800232c:	d505      	bpl.n	800233a <__sflush_r+0x42>
 800232e:	6863      	ldr	r3, [r4, #4]
 8002330:	1ad2      	subs	r2, r2, r3
 8002332:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002334:	b10b      	cbz	r3, 800233a <__sflush_r+0x42>
 8002336:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002338:	1ad2      	subs	r2, r2, r3
 800233a:	2300      	movs	r3, #0
 800233c:	4628      	mov	r0, r5
 800233e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002340:	6a21      	ldr	r1, [r4, #32]
 8002342:	47b0      	blx	r6
 8002344:	1c43      	adds	r3, r0, #1
 8002346:	89a3      	ldrh	r3, [r4, #12]
 8002348:	d106      	bne.n	8002358 <__sflush_r+0x60>
 800234a:	6829      	ldr	r1, [r5, #0]
 800234c:	291d      	cmp	r1, #29
 800234e:	d82b      	bhi.n	80023a8 <__sflush_r+0xb0>
 8002350:	4a28      	ldr	r2, [pc, #160]	@ (80023f4 <__sflush_r+0xfc>)
 8002352:	410a      	asrs	r2, r1
 8002354:	07d6      	lsls	r6, r2, #31
 8002356:	d427      	bmi.n	80023a8 <__sflush_r+0xb0>
 8002358:	2200      	movs	r2, #0
 800235a:	6062      	str	r2, [r4, #4]
 800235c:	6922      	ldr	r2, [r4, #16]
 800235e:	04d9      	lsls	r1, r3, #19
 8002360:	6022      	str	r2, [r4, #0]
 8002362:	d504      	bpl.n	800236e <__sflush_r+0x76>
 8002364:	1c42      	adds	r2, r0, #1
 8002366:	d101      	bne.n	800236c <__sflush_r+0x74>
 8002368:	682b      	ldr	r3, [r5, #0]
 800236a:	b903      	cbnz	r3, 800236e <__sflush_r+0x76>
 800236c:	6560      	str	r0, [r4, #84]	@ 0x54
 800236e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002370:	602f      	str	r7, [r5, #0]
 8002372:	b1b9      	cbz	r1, 80023a4 <__sflush_r+0xac>
 8002374:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002378:	4299      	cmp	r1, r3
 800237a:	d002      	beq.n	8002382 <__sflush_r+0x8a>
 800237c:	4628      	mov	r0, r5
 800237e:	f7ff ff73 	bl	8002268 <_free_r>
 8002382:	2300      	movs	r3, #0
 8002384:	6363      	str	r3, [r4, #52]	@ 0x34
 8002386:	e00d      	b.n	80023a4 <__sflush_r+0xac>
 8002388:	2301      	movs	r3, #1
 800238a:	4628      	mov	r0, r5
 800238c:	47b0      	blx	r6
 800238e:	4602      	mov	r2, r0
 8002390:	1c50      	adds	r0, r2, #1
 8002392:	d1c9      	bne.n	8002328 <__sflush_r+0x30>
 8002394:	682b      	ldr	r3, [r5, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0c6      	beq.n	8002328 <__sflush_r+0x30>
 800239a:	2b1d      	cmp	r3, #29
 800239c:	d001      	beq.n	80023a2 <__sflush_r+0xaa>
 800239e:	2b16      	cmp	r3, #22
 80023a0:	d11d      	bne.n	80023de <__sflush_r+0xe6>
 80023a2:	602f      	str	r7, [r5, #0]
 80023a4:	2000      	movs	r0, #0
 80023a6:	e021      	b.n	80023ec <__sflush_r+0xf4>
 80023a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ac:	b21b      	sxth	r3, r3
 80023ae:	e01a      	b.n	80023e6 <__sflush_r+0xee>
 80023b0:	690f      	ldr	r7, [r1, #16]
 80023b2:	2f00      	cmp	r7, #0
 80023b4:	d0f6      	beq.n	80023a4 <__sflush_r+0xac>
 80023b6:	0793      	lsls	r3, r2, #30
 80023b8:	bf18      	it	ne
 80023ba:	2300      	movne	r3, #0
 80023bc:	680e      	ldr	r6, [r1, #0]
 80023be:	bf08      	it	eq
 80023c0:	694b      	ldreq	r3, [r1, #20]
 80023c2:	1bf6      	subs	r6, r6, r7
 80023c4:	600f      	str	r7, [r1, #0]
 80023c6:	608b      	str	r3, [r1, #8]
 80023c8:	2e00      	cmp	r6, #0
 80023ca:	ddeb      	ble.n	80023a4 <__sflush_r+0xac>
 80023cc:	4633      	mov	r3, r6
 80023ce:	463a      	mov	r2, r7
 80023d0:	4628      	mov	r0, r5
 80023d2:	6a21      	ldr	r1, [r4, #32]
 80023d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80023d8:	47e0      	blx	ip
 80023da:	2800      	cmp	r0, #0
 80023dc:	dc07      	bgt.n	80023ee <__sflush_r+0xf6>
 80023de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023e6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ea:	81a3      	strh	r3, [r4, #12]
 80023ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ee:	4407      	add	r7, r0
 80023f0:	1a36      	subs	r6, r6, r0
 80023f2:	e7e9      	b.n	80023c8 <__sflush_r+0xd0>
 80023f4:	dfbffffe 	.word	0xdfbffffe

080023f8 <_fflush_r>:
 80023f8:	b538      	push	{r3, r4, r5, lr}
 80023fa:	690b      	ldr	r3, [r1, #16]
 80023fc:	4605      	mov	r5, r0
 80023fe:	460c      	mov	r4, r1
 8002400:	b913      	cbnz	r3, 8002408 <_fflush_r+0x10>
 8002402:	2500      	movs	r5, #0
 8002404:	4628      	mov	r0, r5
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	b118      	cbz	r0, 8002412 <_fflush_r+0x1a>
 800240a:	6a03      	ldr	r3, [r0, #32]
 800240c:	b90b      	cbnz	r3, 8002412 <_fflush_r+0x1a>
 800240e:	f7ff fe07 	bl	8002020 <__sinit>
 8002412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f3      	beq.n	8002402 <_fflush_r+0xa>
 800241a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800241c:	07d0      	lsls	r0, r2, #31
 800241e:	d404      	bmi.n	800242a <_fflush_r+0x32>
 8002420:	0599      	lsls	r1, r3, #22
 8002422:	d402      	bmi.n	800242a <_fflush_r+0x32>
 8002424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002426:	f7ff fefe 	bl	8002226 <__retarget_lock_acquire_recursive>
 800242a:	4628      	mov	r0, r5
 800242c:	4621      	mov	r1, r4
 800242e:	f7ff ff63 	bl	80022f8 <__sflush_r>
 8002432:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002434:	4605      	mov	r5, r0
 8002436:	07da      	lsls	r2, r3, #31
 8002438:	d4e4      	bmi.n	8002404 <_fflush_r+0xc>
 800243a:	89a3      	ldrh	r3, [r4, #12]
 800243c:	059b      	lsls	r3, r3, #22
 800243e:	d4e1      	bmi.n	8002404 <_fflush_r+0xc>
 8002440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002442:	f7ff fef1 	bl	8002228 <__retarget_lock_release_recursive>
 8002446:	e7dd      	b.n	8002404 <_fflush_r+0xc>

08002448 <fiprintf>:
 8002448:	b40e      	push	{r1, r2, r3}
 800244a:	b503      	push	{r0, r1, lr}
 800244c:	4601      	mov	r1, r0
 800244e:	ab03      	add	r3, sp, #12
 8002450:	4805      	ldr	r0, [pc, #20]	@ (8002468 <fiprintf+0x20>)
 8002452:	f853 2b04 	ldr.w	r2, [r3], #4
 8002456:	6800      	ldr	r0, [r0, #0]
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	f000 f835 	bl	80024c8 <_vfiprintf_r>
 800245e:	b002      	add	sp, #8
 8002460:	f85d eb04 	ldr.w	lr, [sp], #4
 8002464:	b003      	add	sp, #12
 8002466:	4770      	bx	lr
 8002468:	2000001c 	.word	0x2000001c

0800246c <abort>:
 800246c:	2006      	movs	r0, #6
 800246e:	b508      	push	{r3, lr}
 8002470:	f000 fb90 	bl	8002b94 <raise>
 8002474:	2001      	movs	r0, #1
 8002476:	f7fe fbec 	bl	8000c52 <_exit>

0800247a <__sfputc_r>:
 800247a:	6893      	ldr	r3, [r2, #8]
 800247c:	b410      	push	{r4}
 800247e:	3b01      	subs	r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	6093      	str	r3, [r2, #8]
 8002484:	da07      	bge.n	8002496 <__sfputc_r+0x1c>
 8002486:	6994      	ldr	r4, [r2, #24]
 8002488:	42a3      	cmp	r3, r4
 800248a:	db01      	blt.n	8002490 <__sfputc_r+0x16>
 800248c:	290a      	cmp	r1, #10
 800248e:	d102      	bne.n	8002496 <__sfputc_r+0x1c>
 8002490:	bc10      	pop	{r4}
 8002492:	f000 bac3 	b.w	8002a1c <__swbuf_r>
 8002496:	6813      	ldr	r3, [r2, #0]
 8002498:	1c58      	adds	r0, r3, #1
 800249a:	6010      	str	r0, [r2, #0]
 800249c:	7019      	strb	r1, [r3, #0]
 800249e:	4608      	mov	r0, r1
 80024a0:	bc10      	pop	{r4}
 80024a2:	4770      	bx	lr

080024a4 <__sfputs_r>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	4606      	mov	r6, r0
 80024a8:	460f      	mov	r7, r1
 80024aa:	4614      	mov	r4, r2
 80024ac:	18d5      	adds	r5, r2, r3
 80024ae:	42ac      	cmp	r4, r5
 80024b0:	d101      	bne.n	80024b6 <__sfputs_r+0x12>
 80024b2:	2000      	movs	r0, #0
 80024b4:	e007      	b.n	80024c6 <__sfputs_r+0x22>
 80024b6:	463a      	mov	r2, r7
 80024b8:	4630      	mov	r0, r6
 80024ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024be:	f7ff ffdc 	bl	800247a <__sfputc_r>
 80024c2:	1c43      	adds	r3, r0, #1
 80024c4:	d1f3      	bne.n	80024ae <__sfputs_r+0xa>
 80024c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080024c8 <_vfiprintf_r>:
 80024c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024cc:	460d      	mov	r5, r1
 80024ce:	4614      	mov	r4, r2
 80024d0:	4698      	mov	r8, r3
 80024d2:	4606      	mov	r6, r0
 80024d4:	b09d      	sub	sp, #116	@ 0x74
 80024d6:	b118      	cbz	r0, 80024e0 <_vfiprintf_r+0x18>
 80024d8:	6a03      	ldr	r3, [r0, #32]
 80024da:	b90b      	cbnz	r3, 80024e0 <_vfiprintf_r+0x18>
 80024dc:	f7ff fda0 	bl	8002020 <__sinit>
 80024e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80024e2:	07d9      	lsls	r1, r3, #31
 80024e4:	d405      	bmi.n	80024f2 <_vfiprintf_r+0x2a>
 80024e6:	89ab      	ldrh	r3, [r5, #12]
 80024e8:	059a      	lsls	r2, r3, #22
 80024ea:	d402      	bmi.n	80024f2 <_vfiprintf_r+0x2a>
 80024ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80024ee:	f7ff fe9a 	bl	8002226 <__retarget_lock_acquire_recursive>
 80024f2:	89ab      	ldrh	r3, [r5, #12]
 80024f4:	071b      	lsls	r3, r3, #28
 80024f6:	d501      	bpl.n	80024fc <_vfiprintf_r+0x34>
 80024f8:	692b      	ldr	r3, [r5, #16]
 80024fa:	b99b      	cbnz	r3, 8002524 <_vfiprintf_r+0x5c>
 80024fc:	4629      	mov	r1, r5
 80024fe:	4630      	mov	r0, r6
 8002500:	f000 faca 	bl	8002a98 <__swsetup_r>
 8002504:	b170      	cbz	r0, 8002524 <_vfiprintf_r+0x5c>
 8002506:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002508:	07dc      	lsls	r4, r3, #31
 800250a:	d504      	bpl.n	8002516 <_vfiprintf_r+0x4e>
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	b01d      	add	sp, #116	@ 0x74
 8002512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002516:	89ab      	ldrh	r3, [r5, #12]
 8002518:	0598      	lsls	r0, r3, #22
 800251a:	d4f7      	bmi.n	800250c <_vfiprintf_r+0x44>
 800251c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800251e:	f7ff fe83 	bl	8002228 <__retarget_lock_release_recursive>
 8002522:	e7f3      	b.n	800250c <_vfiprintf_r+0x44>
 8002524:	2300      	movs	r3, #0
 8002526:	9309      	str	r3, [sp, #36]	@ 0x24
 8002528:	2320      	movs	r3, #32
 800252a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800252e:	2330      	movs	r3, #48	@ 0x30
 8002530:	f04f 0901 	mov.w	r9, #1
 8002534:	f8cd 800c 	str.w	r8, [sp, #12]
 8002538:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80026e4 <_vfiprintf_r+0x21c>
 800253c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002540:	4623      	mov	r3, r4
 8002542:	469a      	mov	sl, r3
 8002544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002548:	b10a      	cbz	r2, 800254e <_vfiprintf_r+0x86>
 800254a:	2a25      	cmp	r2, #37	@ 0x25
 800254c:	d1f9      	bne.n	8002542 <_vfiprintf_r+0x7a>
 800254e:	ebba 0b04 	subs.w	fp, sl, r4
 8002552:	d00b      	beq.n	800256c <_vfiprintf_r+0xa4>
 8002554:	465b      	mov	r3, fp
 8002556:	4622      	mov	r2, r4
 8002558:	4629      	mov	r1, r5
 800255a:	4630      	mov	r0, r6
 800255c:	f7ff ffa2 	bl	80024a4 <__sfputs_r>
 8002560:	3001      	adds	r0, #1
 8002562:	f000 80a7 	beq.w	80026b4 <_vfiprintf_r+0x1ec>
 8002566:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002568:	445a      	add	r2, fp
 800256a:	9209      	str	r2, [sp, #36]	@ 0x24
 800256c:	f89a 3000 	ldrb.w	r3, [sl]
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 809f 	beq.w	80026b4 <_vfiprintf_r+0x1ec>
 8002576:	2300      	movs	r3, #0
 8002578:	f04f 32ff 	mov.w	r2, #4294967295
 800257c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002580:	f10a 0a01 	add.w	sl, sl, #1
 8002584:	9304      	str	r3, [sp, #16]
 8002586:	9307      	str	r3, [sp, #28]
 8002588:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800258c:	931a      	str	r3, [sp, #104]	@ 0x68
 800258e:	4654      	mov	r4, sl
 8002590:	2205      	movs	r2, #5
 8002592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002596:	4853      	ldr	r0, [pc, #332]	@ (80026e4 <_vfiprintf_r+0x21c>)
 8002598:	f000 fb18 	bl	8002bcc <memchr>
 800259c:	9a04      	ldr	r2, [sp, #16]
 800259e:	b9d8      	cbnz	r0, 80025d8 <_vfiprintf_r+0x110>
 80025a0:	06d1      	lsls	r1, r2, #27
 80025a2:	bf44      	itt	mi
 80025a4:	2320      	movmi	r3, #32
 80025a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025aa:	0713      	lsls	r3, r2, #28
 80025ac:	bf44      	itt	mi
 80025ae:	232b      	movmi	r3, #43	@ 0x2b
 80025b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80025b4:	f89a 3000 	ldrb.w	r3, [sl]
 80025b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80025ba:	d015      	beq.n	80025e8 <_vfiprintf_r+0x120>
 80025bc:	4654      	mov	r4, sl
 80025be:	2000      	movs	r0, #0
 80025c0:	f04f 0c0a 	mov.w	ip, #10
 80025c4:	9a07      	ldr	r2, [sp, #28]
 80025c6:	4621      	mov	r1, r4
 80025c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80025cc:	3b30      	subs	r3, #48	@ 0x30
 80025ce:	2b09      	cmp	r3, #9
 80025d0:	d94b      	bls.n	800266a <_vfiprintf_r+0x1a2>
 80025d2:	b1b0      	cbz	r0, 8002602 <_vfiprintf_r+0x13a>
 80025d4:	9207      	str	r2, [sp, #28]
 80025d6:	e014      	b.n	8002602 <_vfiprintf_r+0x13a>
 80025d8:	eba0 0308 	sub.w	r3, r0, r8
 80025dc:	fa09 f303 	lsl.w	r3, r9, r3
 80025e0:	4313      	orrs	r3, r2
 80025e2:	46a2      	mov	sl, r4
 80025e4:	9304      	str	r3, [sp, #16]
 80025e6:	e7d2      	b.n	800258e <_vfiprintf_r+0xc6>
 80025e8:	9b03      	ldr	r3, [sp, #12]
 80025ea:	1d19      	adds	r1, r3, #4
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	9103      	str	r1, [sp, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bfbb      	ittet	lt
 80025f4:	425b      	neglt	r3, r3
 80025f6:	f042 0202 	orrlt.w	r2, r2, #2
 80025fa:	9307      	strge	r3, [sp, #28]
 80025fc:	9307      	strlt	r3, [sp, #28]
 80025fe:	bfb8      	it	lt
 8002600:	9204      	strlt	r2, [sp, #16]
 8002602:	7823      	ldrb	r3, [r4, #0]
 8002604:	2b2e      	cmp	r3, #46	@ 0x2e
 8002606:	d10a      	bne.n	800261e <_vfiprintf_r+0x156>
 8002608:	7863      	ldrb	r3, [r4, #1]
 800260a:	2b2a      	cmp	r3, #42	@ 0x2a
 800260c:	d132      	bne.n	8002674 <_vfiprintf_r+0x1ac>
 800260e:	9b03      	ldr	r3, [sp, #12]
 8002610:	3402      	adds	r4, #2
 8002612:	1d1a      	adds	r2, r3, #4
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	9203      	str	r2, [sp, #12]
 8002618:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800261c:	9305      	str	r3, [sp, #20]
 800261e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80026e8 <_vfiprintf_r+0x220>
 8002622:	2203      	movs	r2, #3
 8002624:	4650      	mov	r0, sl
 8002626:	7821      	ldrb	r1, [r4, #0]
 8002628:	f000 fad0 	bl	8002bcc <memchr>
 800262c:	b138      	cbz	r0, 800263e <_vfiprintf_r+0x176>
 800262e:	2240      	movs	r2, #64	@ 0x40
 8002630:	9b04      	ldr	r3, [sp, #16]
 8002632:	eba0 000a 	sub.w	r0, r0, sl
 8002636:	4082      	lsls	r2, r0
 8002638:	4313      	orrs	r3, r2
 800263a:	3401      	adds	r4, #1
 800263c:	9304      	str	r3, [sp, #16]
 800263e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002642:	2206      	movs	r2, #6
 8002644:	4829      	ldr	r0, [pc, #164]	@ (80026ec <_vfiprintf_r+0x224>)
 8002646:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800264a:	f000 fabf 	bl	8002bcc <memchr>
 800264e:	2800      	cmp	r0, #0
 8002650:	d03f      	beq.n	80026d2 <_vfiprintf_r+0x20a>
 8002652:	4b27      	ldr	r3, [pc, #156]	@ (80026f0 <_vfiprintf_r+0x228>)
 8002654:	bb1b      	cbnz	r3, 800269e <_vfiprintf_r+0x1d6>
 8002656:	9b03      	ldr	r3, [sp, #12]
 8002658:	3307      	adds	r3, #7
 800265a:	f023 0307 	bic.w	r3, r3, #7
 800265e:	3308      	adds	r3, #8
 8002660:	9303      	str	r3, [sp, #12]
 8002662:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002664:	443b      	add	r3, r7
 8002666:	9309      	str	r3, [sp, #36]	@ 0x24
 8002668:	e76a      	b.n	8002540 <_vfiprintf_r+0x78>
 800266a:	460c      	mov	r4, r1
 800266c:	2001      	movs	r0, #1
 800266e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002672:	e7a8      	b.n	80025c6 <_vfiprintf_r+0xfe>
 8002674:	2300      	movs	r3, #0
 8002676:	f04f 0c0a 	mov.w	ip, #10
 800267a:	4619      	mov	r1, r3
 800267c:	3401      	adds	r4, #1
 800267e:	9305      	str	r3, [sp, #20]
 8002680:	4620      	mov	r0, r4
 8002682:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002686:	3a30      	subs	r2, #48	@ 0x30
 8002688:	2a09      	cmp	r2, #9
 800268a:	d903      	bls.n	8002694 <_vfiprintf_r+0x1cc>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0c6      	beq.n	800261e <_vfiprintf_r+0x156>
 8002690:	9105      	str	r1, [sp, #20]
 8002692:	e7c4      	b.n	800261e <_vfiprintf_r+0x156>
 8002694:	4604      	mov	r4, r0
 8002696:	2301      	movs	r3, #1
 8002698:	fb0c 2101 	mla	r1, ip, r1, r2
 800269c:	e7f0      	b.n	8002680 <_vfiprintf_r+0x1b8>
 800269e:	ab03      	add	r3, sp, #12
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	462a      	mov	r2, r5
 80026a4:	4630      	mov	r0, r6
 80026a6:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <_vfiprintf_r+0x22c>)
 80026a8:	a904      	add	r1, sp, #16
 80026aa:	f3af 8000 	nop.w
 80026ae:	4607      	mov	r7, r0
 80026b0:	1c78      	adds	r0, r7, #1
 80026b2:	d1d6      	bne.n	8002662 <_vfiprintf_r+0x19a>
 80026b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80026b6:	07d9      	lsls	r1, r3, #31
 80026b8:	d405      	bmi.n	80026c6 <_vfiprintf_r+0x1fe>
 80026ba:	89ab      	ldrh	r3, [r5, #12]
 80026bc:	059a      	lsls	r2, r3, #22
 80026be:	d402      	bmi.n	80026c6 <_vfiprintf_r+0x1fe>
 80026c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80026c2:	f7ff fdb1 	bl	8002228 <__retarget_lock_release_recursive>
 80026c6:	89ab      	ldrh	r3, [r5, #12]
 80026c8:	065b      	lsls	r3, r3, #25
 80026ca:	f53f af1f 	bmi.w	800250c <_vfiprintf_r+0x44>
 80026ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80026d0:	e71e      	b.n	8002510 <_vfiprintf_r+0x48>
 80026d2:	ab03      	add	r3, sp, #12
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	462a      	mov	r2, r5
 80026d8:	4630      	mov	r0, r6
 80026da:	4b06      	ldr	r3, [pc, #24]	@ (80026f4 <_vfiprintf_r+0x22c>)
 80026dc:	a904      	add	r1, sp, #16
 80026de:	f000 f87d 	bl	80027dc <_printf_i>
 80026e2:	e7e4      	b.n	80026ae <_vfiprintf_r+0x1e6>
 80026e4:	08002dd5 	.word	0x08002dd5
 80026e8:	08002ddb 	.word	0x08002ddb
 80026ec:	08002ddf 	.word	0x08002ddf
 80026f0:	00000000 	.word	0x00000000
 80026f4:	080024a5 	.word	0x080024a5

080026f8 <_printf_common>:
 80026f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026fc:	4616      	mov	r6, r2
 80026fe:	4698      	mov	r8, r3
 8002700:	688a      	ldr	r2, [r1, #8]
 8002702:	690b      	ldr	r3, [r1, #16]
 8002704:	4607      	mov	r7, r0
 8002706:	4293      	cmp	r3, r2
 8002708:	bfb8      	it	lt
 800270a:	4613      	movlt	r3, r2
 800270c:	6033      	str	r3, [r6, #0]
 800270e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002712:	460c      	mov	r4, r1
 8002714:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002718:	b10a      	cbz	r2, 800271e <_printf_common+0x26>
 800271a:	3301      	adds	r3, #1
 800271c:	6033      	str	r3, [r6, #0]
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	0699      	lsls	r1, r3, #26
 8002722:	bf42      	ittt	mi
 8002724:	6833      	ldrmi	r3, [r6, #0]
 8002726:	3302      	addmi	r3, #2
 8002728:	6033      	strmi	r3, [r6, #0]
 800272a:	6825      	ldr	r5, [r4, #0]
 800272c:	f015 0506 	ands.w	r5, r5, #6
 8002730:	d106      	bne.n	8002740 <_printf_common+0x48>
 8002732:	f104 0a19 	add.w	sl, r4, #25
 8002736:	68e3      	ldr	r3, [r4, #12]
 8002738:	6832      	ldr	r2, [r6, #0]
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	42ab      	cmp	r3, r5
 800273e:	dc2b      	bgt.n	8002798 <_printf_common+0xa0>
 8002740:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002744:	6822      	ldr	r2, [r4, #0]
 8002746:	3b00      	subs	r3, #0
 8002748:	bf18      	it	ne
 800274a:	2301      	movne	r3, #1
 800274c:	0692      	lsls	r2, r2, #26
 800274e:	d430      	bmi.n	80027b2 <_printf_common+0xba>
 8002750:	4641      	mov	r1, r8
 8002752:	4638      	mov	r0, r7
 8002754:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002758:	47c8      	blx	r9
 800275a:	3001      	adds	r0, #1
 800275c:	d023      	beq.n	80027a6 <_printf_common+0xae>
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	6922      	ldr	r2, [r4, #16]
 8002762:	f003 0306 	and.w	r3, r3, #6
 8002766:	2b04      	cmp	r3, #4
 8002768:	bf14      	ite	ne
 800276a:	2500      	movne	r5, #0
 800276c:	6833      	ldreq	r3, [r6, #0]
 800276e:	f04f 0600 	mov.w	r6, #0
 8002772:	bf08      	it	eq
 8002774:	68e5      	ldreq	r5, [r4, #12]
 8002776:	f104 041a 	add.w	r4, r4, #26
 800277a:	bf08      	it	eq
 800277c:	1aed      	subeq	r5, r5, r3
 800277e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002782:	bf08      	it	eq
 8002784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002788:	4293      	cmp	r3, r2
 800278a:	bfc4      	itt	gt
 800278c:	1a9b      	subgt	r3, r3, r2
 800278e:	18ed      	addgt	r5, r5, r3
 8002790:	42b5      	cmp	r5, r6
 8002792:	d11a      	bne.n	80027ca <_printf_common+0xd2>
 8002794:	2000      	movs	r0, #0
 8002796:	e008      	b.n	80027aa <_printf_common+0xb2>
 8002798:	2301      	movs	r3, #1
 800279a:	4652      	mov	r2, sl
 800279c:	4641      	mov	r1, r8
 800279e:	4638      	mov	r0, r7
 80027a0:	47c8      	blx	r9
 80027a2:	3001      	adds	r0, #1
 80027a4:	d103      	bne.n	80027ae <_printf_common+0xb6>
 80027a6:	f04f 30ff 	mov.w	r0, #4294967295
 80027aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027ae:	3501      	adds	r5, #1
 80027b0:	e7c1      	b.n	8002736 <_printf_common+0x3e>
 80027b2:	2030      	movs	r0, #48	@ 0x30
 80027b4:	18e1      	adds	r1, r4, r3
 80027b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80027c0:	4422      	add	r2, r4
 80027c2:	3302      	adds	r3, #2
 80027c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80027c8:	e7c2      	b.n	8002750 <_printf_common+0x58>
 80027ca:	2301      	movs	r3, #1
 80027cc:	4622      	mov	r2, r4
 80027ce:	4641      	mov	r1, r8
 80027d0:	4638      	mov	r0, r7
 80027d2:	47c8      	blx	r9
 80027d4:	3001      	adds	r0, #1
 80027d6:	d0e6      	beq.n	80027a6 <_printf_common+0xae>
 80027d8:	3601      	adds	r6, #1
 80027da:	e7d9      	b.n	8002790 <_printf_common+0x98>

080027dc <_printf_i>:
 80027dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80027e0:	7e0f      	ldrb	r7, [r1, #24]
 80027e2:	4691      	mov	r9, r2
 80027e4:	2f78      	cmp	r7, #120	@ 0x78
 80027e6:	4680      	mov	r8, r0
 80027e8:	460c      	mov	r4, r1
 80027ea:	469a      	mov	sl, r3
 80027ec:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80027ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80027f2:	d807      	bhi.n	8002804 <_printf_i+0x28>
 80027f4:	2f62      	cmp	r7, #98	@ 0x62
 80027f6:	d80a      	bhi.n	800280e <_printf_i+0x32>
 80027f8:	2f00      	cmp	r7, #0
 80027fa:	f000 80d3 	beq.w	80029a4 <_printf_i+0x1c8>
 80027fe:	2f58      	cmp	r7, #88	@ 0x58
 8002800:	f000 80ba 	beq.w	8002978 <_printf_i+0x19c>
 8002804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002808:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800280c:	e03a      	b.n	8002884 <_printf_i+0xa8>
 800280e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002812:	2b15      	cmp	r3, #21
 8002814:	d8f6      	bhi.n	8002804 <_printf_i+0x28>
 8002816:	a101      	add	r1, pc, #4	@ (adr r1, 800281c <_printf_i+0x40>)
 8002818:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800281c:	08002875 	.word	0x08002875
 8002820:	08002889 	.word	0x08002889
 8002824:	08002805 	.word	0x08002805
 8002828:	08002805 	.word	0x08002805
 800282c:	08002805 	.word	0x08002805
 8002830:	08002805 	.word	0x08002805
 8002834:	08002889 	.word	0x08002889
 8002838:	08002805 	.word	0x08002805
 800283c:	08002805 	.word	0x08002805
 8002840:	08002805 	.word	0x08002805
 8002844:	08002805 	.word	0x08002805
 8002848:	0800298b 	.word	0x0800298b
 800284c:	080028b3 	.word	0x080028b3
 8002850:	08002945 	.word	0x08002945
 8002854:	08002805 	.word	0x08002805
 8002858:	08002805 	.word	0x08002805
 800285c:	080029ad 	.word	0x080029ad
 8002860:	08002805 	.word	0x08002805
 8002864:	080028b3 	.word	0x080028b3
 8002868:	08002805 	.word	0x08002805
 800286c:	08002805 	.word	0x08002805
 8002870:	0800294d 	.word	0x0800294d
 8002874:	6833      	ldr	r3, [r6, #0]
 8002876:	1d1a      	adds	r2, r3, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6032      	str	r2, [r6, #0]
 800287c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002880:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002884:	2301      	movs	r3, #1
 8002886:	e09e      	b.n	80029c6 <_printf_i+0x1ea>
 8002888:	6833      	ldr	r3, [r6, #0]
 800288a:	6820      	ldr	r0, [r4, #0]
 800288c:	1d19      	adds	r1, r3, #4
 800288e:	6031      	str	r1, [r6, #0]
 8002890:	0606      	lsls	r6, r0, #24
 8002892:	d501      	bpl.n	8002898 <_printf_i+0xbc>
 8002894:	681d      	ldr	r5, [r3, #0]
 8002896:	e003      	b.n	80028a0 <_printf_i+0xc4>
 8002898:	0645      	lsls	r5, r0, #25
 800289a:	d5fb      	bpl.n	8002894 <_printf_i+0xb8>
 800289c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80028a0:	2d00      	cmp	r5, #0
 80028a2:	da03      	bge.n	80028ac <_printf_i+0xd0>
 80028a4:	232d      	movs	r3, #45	@ 0x2d
 80028a6:	426d      	negs	r5, r5
 80028a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80028ac:	230a      	movs	r3, #10
 80028ae:	4859      	ldr	r0, [pc, #356]	@ (8002a14 <_printf_i+0x238>)
 80028b0:	e011      	b.n	80028d6 <_printf_i+0xfa>
 80028b2:	6821      	ldr	r1, [r4, #0]
 80028b4:	6833      	ldr	r3, [r6, #0]
 80028b6:	0608      	lsls	r0, r1, #24
 80028b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80028bc:	d402      	bmi.n	80028c4 <_printf_i+0xe8>
 80028be:	0649      	lsls	r1, r1, #25
 80028c0:	bf48      	it	mi
 80028c2:	b2ad      	uxthmi	r5, r5
 80028c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80028c6:	6033      	str	r3, [r6, #0]
 80028c8:	bf14      	ite	ne
 80028ca:	230a      	movne	r3, #10
 80028cc:	2308      	moveq	r3, #8
 80028ce:	4851      	ldr	r0, [pc, #324]	@ (8002a14 <_printf_i+0x238>)
 80028d0:	2100      	movs	r1, #0
 80028d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80028d6:	6866      	ldr	r6, [r4, #4]
 80028d8:	2e00      	cmp	r6, #0
 80028da:	bfa8      	it	ge
 80028dc:	6821      	ldrge	r1, [r4, #0]
 80028de:	60a6      	str	r6, [r4, #8]
 80028e0:	bfa4      	itt	ge
 80028e2:	f021 0104 	bicge.w	r1, r1, #4
 80028e6:	6021      	strge	r1, [r4, #0]
 80028e8:	b90d      	cbnz	r5, 80028ee <_printf_i+0x112>
 80028ea:	2e00      	cmp	r6, #0
 80028ec:	d04b      	beq.n	8002986 <_printf_i+0x1aa>
 80028ee:	4616      	mov	r6, r2
 80028f0:	fbb5 f1f3 	udiv	r1, r5, r3
 80028f4:	fb03 5711 	mls	r7, r3, r1, r5
 80028f8:	5dc7      	ldrb	r7, [r0, r7]
 80028fa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80028fe:	462f      	mov	r7, r5
 8002900:	42bb      	cmp	r3, r7
 8002902:	460d      	mov	r5, r1
 8002904:	d9f4      	bls.n	80028f0 <_printf_i+0x114>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d10b      	bne.n	8002922 <_printf_i+0x146>
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	07df      	lsls	r7, r3, #31
 800290e:	d508      	bpl.n	8002922 <_printf_i+0x146>
 8002910:	6923      	ldr	r3, [r4, #16]
 8002912:	6861      	ldr	r1, [r4, #4]
 8002914:	4299      	cmp	r1, r3
 8002916:	bfde      	ittt	le
 8002918:	2330      	movle	r3, #48	@ 0x30
 800291a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800291e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002922:	1b92      	subs	r2, r2, r6
 8002924:	6122      	str	r2, [r4, #16]
 8002926:	464b      	mov	r3, r9
 8002928:	4621      	mov	r1, r4
 800292a:	4640      	mov	r0, r8
 800292c:	f8cd a000 	str.w	sl, [sp]
 8002930:	aa03      	add	r2, sp, #12
 8002932:	f7ff fee1 	bl	80026f8 <_printf_common>
 8002936:	3001      	adds	r0, #1
 8002938:	d14a      	bne.n	80029d0 <_printf_i+0x1f4>
 800293a:	f04f 30ff 	mov.w	r0, #4294967295
 800293e:	b004      	add	sp, #16
 8002940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002944:	6823      	ldr	r3, [r4, #0]
 8002946:	f043 0320 	orr.w	r3, r3, #32
 800294a:	6023      	str	r3, [r4, #0]
 800294c:	2778      	movs	r7, #120	@ 0x78
 800294e:	4832      	ldr	r0, [pc, #200]	@ (8002a18 <_printf_i+0x23c>)
 8002950:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	6831      	ldr	r1, [r6, #0]
 8002958:	061f      	lsls	r7, r3, #24
 800295a:	f851 5b04 	ldr.w	r5, [r1], #4
 800295e:	d402      	bmi.n	8002966 <_printf_i+0x18a>
 8002960:	065f      	lsls	r7, r3, #25
 8002962:	bf48      	it	mi
 8002964:	b2ad      	uxthmi	r5, r5
 8002966:	6031      	str	r1, [r6, #0]
 8002968:	07d9      	lsls	r1, r3, #31
 800296a:	bf44      	itt	mi
 800296c:	f043 0320 	orrmi.w	r3, r3, #32
 8002970:	6023      	strmi	r3, [r4, #0]
 8002972:	b11d      	cbz	r5, 800297c <_printf_i+0x1a0>
 8002974:	2310      	movs	r3, #16
 8002976:	e7ab      	b.n	80028d0 <_printf_i+0xf4>
 8002978:	4826      	ldr	r0, [pc, #152]	@ (8002a14 <_printf_i+0x238>)
 800297a:	e7e9      	b.n	8002950 <_printf_i+0x174>
 800297c:	6823      	ldr	r3, [r4, #0]
 800297e:	f023 0320 	bic.w	r3, r3, #32
 8002982:	6023      	str	r3, [r4, #0]
 8002984:	e7f6      	b.n	8002974 <_printf_i+0x198>
 8002986:	4616      	mov	r6, r2
 8002988:	e7bd      	b.n	8002906 <_printf_i+0x12a>
 800298a:	6833      	ldr	r3, [r6, #0]
 800298c:	6825      	ldr	r5, [r4, #0]
 800298e:	1d18      	adds	r0, r3, #4
 8002990:	6961      	ldr	r1, [r4, #20]
 8002992:	6030      	str	r0, [r6, #0]
 8002994:	062e      	lsls	r6, r5, #24
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	d501      	bpl.n	800299e <_printf_i+0x1c2>
 800299a:	6019      	str	r1, [r3, #0]
 800299c:	e002      	b.n	80029a4 <_printf_i+0x1c8>
 800299e:	0668      	lsls	r0, r5, #25
 80029a0:	d5fb      	bpl.n	800299a <_printf_i+0x1be>
 80029a2:	8019      	strh	r1, [r3, #0]
 80029a4:	2300      	movs	r3, #0
 80029a6:	4616      	mov	r6, r2
 80029a8:	6123      	str	r3, [r4, #16]
 80029aa:	e7bc      	b.n	8002926 <_printf_i+0x14a>
 80029ac:	6833      	ldr	r3, [r6, #0]
 80029ae:	2100      	movs	r1, #0
 80029b0:	1d1a      	adds	r2, r3, #4
 80029b2:	6032      	str	r2, [r6, #0]
 80029b4:	681e      	ldr	r6, [r3, #0]
 80029b6:	6862      	ldr	r2, [r4, #4]
 80029b8:	4630      	mov	r0, r6
 80029ba:	f000 f907 	bl	8002bcc <memchr>
 80029be:	b108      	cbz	r0, 80029c4 <_printf_i+0x1e8>
 80029c0:	1b80      	subs	r0, r0, r6
 80029c2:	6060      	str	r0, [r4, #4]
 80029c4:	6863      	ldr	r3, [r4, #4]
 80029c6:	6123      	str	r3, [r4, #16]
 80029c8:	2300      	movs	r3, #0
 80029ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80029ce:	e7aa      	b.n	8002926 <_printf_i+0x14a>
 80029d0:	4632      	mov	r2, r6
 80029d2:	4649      	mov	r1, r9
 80029d4:	4640      	mov	r0, r8
 80029d6:	6923      	ldr	r3, [r4, #16]
 80029d8:	47d0      	blx	sl
 80029da:	3001      	adds	r0, #1
 80029dc:	d0ad      	beq.n	800293a <_printf_i+0x15e>
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	079b      	lsls	r3, r3, #30
 80029e2:	d413      	bmi.n	8002a0c <_printf_i+0x230>
 80029e4:	68e0      	ldr	r0, [r4, #12]
 80029e6:	9b03      	ldr	r3, [sp, #12]
 80029e8:	4298      	cmp	r0, r3
 80029ea:	bfb8      	it	lt
 80029ec:	4618      	movlt	r0, r3
 80029ee:	e7a6      	b.n	800293e <_printf_i+0x162>
 80029f0:	2301      	movs	r3, #1
 80029f2:	4632      	mov	r2, r6
 80029f4:	4649      	mov	r1, r9
 80029f6:	4640      	mov	r0, r8
 80029f8:	47d0      	blx	sl
 80029fa:	3001      	adds	r0, #1
 80029fc:	d09d      	beq.n	800293a <_printf_i+0x15e>
 80029fe:	3501      	adds	r5, #1
 8002a00:	68e3      	ldr	r3, [r4, #12]
 8002a02:	9903      	ldr	r1, [sp, #12]
 8002a04:	1a5b      	subs	r3, r3, r1
 8002a06:	42ab      	cmp	r3, r5
 8002a08:	dcf2      	bgt.n	80029f0 <_printf_i+0x214>
 8002a0a:	e7eb      	b.n	80029e4 <_printf_i+0x208>
 8002a0c:	2500      	movs	r5, #0
 8002a0e:	f104 0619 	add.w	r6, r4, #25
 8002a12:	e7f5      	b.n	8002a00 <_printf_i+0x224>
 8002a14:	08002de6 	.word	0x08002de6
 8002a18:	08002df7 	.word	0x08002df7

08002a1c <__swbuf_r>:
 8002a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a1e:	460e      	mov	r6, r1
 8002a20:	4614      	mov	r4, r2
 8002a22:	4605      	mov	r5, r0
 8002a24:	b118      	cbz	r0, 8002a2e <__swbuf_r+0x12>
 8002a26:	6a03      	ldr	r3, [r0, #32]
 8002a28:	b90b      	cbnz	r3, 8002a2e <__swbuf_r+0x12>
 8002a2a:	f7ff faf9 	bl	8002020 <__sinit>
 8002a2e:	69a3      	ldr	r3, [r4, #24]
 8002a30:	60a3      	str	r3, [r4, #8]
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	071a      	lsls	r2, r3, #28
 8002a36:	d501      	bpl.n	8002a3c <__swbuf_r+0x20>
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	b943      	cbnz	r3, 8002a4e <__swbuf_r+0x32>
 8002a3c:	4621      	mov	r1, r4
 8002a3e:	4628      	mov	r0, r5
 8002a40:	f000 f82a 	bl	8002a98 <__swsetup_r>
 8002a44:	b118      	cbz	r0, 8002a4e <__swbuf_r+0x32>
 8002a46:	f04f 37ff 	mov.w	r7, #4294967295
 8002a4a:	4638      	mov	r0, r7
 8002a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	6922      	ldr	r2, [r4, #16]
 8002a52:	b2f6      	uxtb	r6, r6
 8002a54:	1a98      	subs	r0, r3, r2
 8002a56:	6963      	ldr	r3, [r4, #20]
 8002a58:	4637      	mov	r7, r6
 8002a5a:	4283      	cmp	r3, r0
 8002a5c:	dc05      	bgt.n	8002a6a <__swbuf_r+0x4e>
 8002a5e:	4621      	mov	r1, r4
 8002a60:	4628      	mov	r0, r5
 8002a62:	f7ff fcc9 	bl	80023f8 <_fflush_r>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d1ed      	bne.n	8002a46 <__swbuf_r+0x2a>
 8002a6a:	68a3      	ldr	r3, [r4, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60a3      	str	r3, [r4, #8]
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	6022      	str	r2, [r4, #0]
 8002a76:	701e      	strb	r6, [r3, #0]
 8002a78:	6962      	ldr	r2, [r4, #20]
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d004      	beq.n	8002a8a <__swbuf_r+0x6e>
 8002a80:	89a3      	ldrh	r3, [r4, #12]
 8002a82:	07db      	lsls	r3, r3, #31
 8002a84:	d5e1      	bpl.n	8002a4a <__swbuf_r+0x2e>
 8002a86:	2e0a      	cmp	r6, #10
 8002a88:	d1df      	bne.n	8002a4a <__swbuf_r+0x2e>
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	4628      	mov	r0, r5
 8002a8e:	f7ff fcb3 	bl	80023f8 <_fflush_r>
 8002a92:	2800      	cmp	r0, #0
 8002a94:	d0d9      	beq.n	8002a4a <__swbuf_r+0x2e>
 8002a96:	e7d6      	b.n	8002a46 <__swbuf_r+0x2a>

08002a98 <__swsetup_r>:
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	4b29      	ldr	r3, [pc, #164]	@ (8002b40 <__swsetup_r+0xa8>)
 8002a9c:	4605      	mov	r5, r0
 8002a9e:	6818      	ldr	r0, [r3, #0]
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	b118      	cbz	r0, 8002aac <__swsetup_r+0x14>
 8002aa4:	6a03      	ldr	r3, [r0, #32]
 8002aa6:	b90b      	cbnz	r3, 8002aac <__swsetup_r+0x14>
 8002aa8:	f7ff faba 	bl	8002020 <__sinit>
 8002aac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ab0:	0719      	lsls	r1, r3, #28
 8002ab2:	d422      	bmi.n	8002afa <__swsetup_r+0x62>
 8002ab4:	06da      	lsls	r2, r3, #27
 8002ab6:	d407      	bmi.n	8002ac8 <__swsetup_r+0x30>
 8002ab8:	2209      	movs	r2, #9
 8002aba:	602a      	str	r2, [r5, #0]
 8002abc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	81a3      	strh	r3, [r4, #12]
 8002ac6:	e033      	b.n	8002b30 <__swsetup_r+0x98>
 8002ac8:	0758      	lsls	r0, r3, #29
 8002aca:	d512      	bpl.n	8002af2 <__swsetup_r+0x5a>
 8002acc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ace:	b141      	cbz	r1, 8002ae2 <__swsetup_r+0x4a>
 8002ad0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ad4:	4299      	cmp	r1, r3
 8002ad6:	d002      	beq.n	8002ade <__swsetup_r+0x46>
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f7ff fbc5 	bl	8002268 <_free_r>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ae8:	81a3      	strh	r3, [r4, #12]
 8002aea:	2300      	movs	r3, #0
 8002aec:	6063      	str	r3, [r4, #4]
 8002aee:	6923      	ldr	r3, [r4, #16]
 8002af0:	6023      	str	r3, [r4, #0]
 8002af2:	89a3      	ldrh	r3, [r4, #12]
 8002af4:	f043 0308 	orr.w	r3, r3, #8
 8002af8:	81a3      	strh	r3, [r4, #12]
 8002afa:	6923      	ldr	r3, [r4, #16]
 8002afc:	b94b      	cbnz	r3, 8002b12 <__swsetup_r+0x7a>
 8002afe:	89a3      	ldrh	r3, [r4, #12]
 8002b00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b08:	d003      	beq.n	8002b12 <__swsetup_r+0x7a>
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 f890 	bl	8002c32 <__smakebuf_r>
 8002b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b16:	f013 0201 	ands.w	r2, r3, #1
 8002b1a:	d00a      	beq.n	8002b32 <__swsetup_r+0x9a>
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60a2      	str	r2, [r4, #8]
 8002b20:	6962      	ldr	r2, [r4, #20]
 8002b22:	4252      	negs	r2, r2
 8002b24:	61a2      	str	r2, [r4, #24]
 8002b26:	6922      	ldr	r2, [r4, #16]
 8002b28:	b942      	cbnz	r2, 8002b3c <__swsetup_r+0xa4>
 8002b2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002b2e:	d1c5      	bne.n	8002abc <__swsetup_r+0x24>
 8002b30:	bd38      	pop	{r3, r4, r5, pc}
 8002b32:	0799      	lsls	r1, r3, #30
 8002b34:	bf58      	it	pl
 8002b36:	6962      	ldrpl	r2, [r4, #20]
 8002b38:	60a2      	str	r2, [r4, #8]
 8002b3a:	e7f4      	b.n	8002b26 <__swsetup_r+0x8e>
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e7f7      	b.n	8002b30 <__swsetup_r+0x98>
 8002b40:	2000001c 	.word	0x2000001c

08002b44 <_raise_r>:
 8002b44:	291f      	cmp	r1, #31
 8002b46:	b538      	push	{r3, r4, r5, lr}
 8002b48:	4605      	mov	r5, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	d904      	bls.n	8002b58 <_raise_r+0x14>
 8002b4e:	2316      	movs	r3, #22
 8002b50:	6003      	str	r3, [r0, #0]
 8002b52:	f04f 30ff 	mov.w	r0, #4294967295
 8002b56:	bd38      	pop	{r3, r4, r5, pc}
 8002b58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002b5a:	b112      	cbz	r2, 8002b62 <_raise_r+0x1e>
 8002b5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002b60:	b94b      	cbnz	r3, 8002b76 <_raise_r+0x32>
 8002b62:	4628      	mov	r0, r5
 8002b64:	f000 f830 	bl	8002bc8 <_getpid_r>
 8002b68:	4622      	mov	r2, r4
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b72:	f000 b817 	b.w	8002ba4 <_kill_r>
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d00a      	beq.n	8002b90 <_raise_r+0x4c>
 8002b7a:	1c59      	adds	r1, r3, #1
 8002b7c:	d103      	bne.n	8002b86 <_raise_r+0x42>
 8002b7e:	2316      	movs	r3, #22
 8002b80:	6003      	str	r3, [r0, #0]
 8002b82:	2001      	movs	r0, #1
 8002b84:	e7e7      	b.n	8002b56 <_raise_r+0x12>
 8002b86:	2100      	movs	r1, #0
 8002b88:	4620      	mov	r0, r4
 8002b8a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002b8e:	4798      	blx	r3
 8002b90:	2000      	movs	r0, #0
 8002b92:	e7e0      	b.n	8002b56 <_raise_r+0x12>

08002b94 <raise>:
 8002b94:	4b02      	ldr	r3, [pc, #8]	@ (8002ba0 <raise+0xc>)
 8002b96:	4601      	mov	r1, r0
 8002b98:	6818      	ldr	r0, [r3, #0]
 8002b9a:	f7ff bfd3 	b.w	8002b44 <_raise_r>
 8002b9e:	bf00      	nop
 8002ba0:	2000001c 	.word	0x2000001c

08002ba4 <_kill_r>:
 8002ba4:	b538      	push	{r3, r4, r5, lr}
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	4d06      	ldr	r5, [pc, #24]	@ (8002bc4 <_kill_r+0x20>)
 8002baa:	4604      	mov	r4, r0
 8002bac:	4608      	mov	r0, r1
 8002bae:	4611      	mov	r1, r2
 8002bb0:	602b      	str	r3, [r5, #0]
 8002bb2:	f7fe f83e 	bl	8000c32 <_kill>
 8002bb6:	1c43      	adds	r3, r0, #1
 8002bb8:	d102      	bne.n	8002bc0 <_kill_r+0x1c>
 8002bba:	682b      	ldr	r3, [r5, #0]
 8002bbc:	b103      	cbz	r3, 8002bc0 <_kill_r+0x1c>
 8002bbe:	6023      	str	r3, [r4, #0]
 8002bc0:	bd38      	pop	{r3, r4, r5, pc}
 8002bc2:	bf00      	nop
 8002bc4:	20000234 	.word	0x20000234

08002bc8 <_getpid_r>:
 8002bc8:	f7fe b82c 	b.w	8000c24 <_getpid>

08002bcc <memchr>:
 8002bcc:	4603      	mov	r3, r0
 8002bce:	b510      	push	{r4, lr}
 8002bd0:	b2c9      	uxtb	r1, r1
 8002bd2:	4402      	add	r2, r0
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	d101      	bne.n	8002bde <memchr+0x12>
 8002bda:	2000      	movs	r0, #0
 8002bdc:	e003      	b.n	8002be6 <memchr+0x1a>
 8002bde:	7804      	ldrb	r4, [r0, #0]
 8002be0:	3301      	adds	r3, #1
 8002be2:	428c      	cmp	r4, r1
 8002be4:	d1f6      	bne.n	8002bd4 <memchr+0x8>
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <__swhatbuf_r>:
 8002be8:	b570      	push	{r4, r5, r6, lr}
 8002bea:	460c      	mov	r4, r1
 8002bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bf0:	4615      	mov	r5, r2
 8002bf2:	2900      	cmp	r1, #0
 8002bf4:	461e      	mov	r6, r3
 8002bf6:	b096      	sub	sp, #88	@ 0x58
 8002bf8:	da0c      	bge.n	8002c14 <__swhatbuf_r+0x2c>
 8002bfa:	89a3      	ldrh	r3, [r4, #12]
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c02:	bf14      	ite	ne
 8002c04:	2340      	movne	r3, #64	@ 0x40
 8002c06:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	6031      	str	r1, [r6, #0]
 8002c0e:	602b      	str	r3, [r5, #0]
 8002c10:	b016      	add	sp, #88	@ 0x58
 8002c12:	bd70      	pop	{r4, r5, r6, pc}
 8002c14:	466a      	mov	r2, sp
 8002c16:	f000 f849 	bl	8002cac <_fstat_r>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	dbed      	blt.n	8002bfa <__swhatbuf_r+0x12>
 8002c1e:	9901      	ldr	r1, [sp, #4]
 8002c20:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002c24:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002c28:	4259      	negs	r1, r3
 8002c2a:	4159      	adcs	r1, r3
 8002c2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c30:	e7eb      	b.n	8002c0a <__swhatbuf_r+0x22>

08002c32 <__smakebuf_r>:
 8002c32:	898b      	ldrh	r3, [r1, #12]
 8002c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c36:	079d      	lsls	r5, r3, #30
 8002c38:	4606      	mov	r6, r0
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	d507      	bpl.n	8002c4e <__smakebuf_r+0x1c>
 8002c3e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	6123      	str	r3, [r4, #16]
 8002c46:	2301      	movs	r3, #1
 8002c48:	6163      	str	r3, [r4, #20]
 8002c4a:	b003      	add	sp, #12
 8002c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c4e:	466a      	mov	r2, sp
 8002c50:	ab01      	add	r3, sp, #4
 8002c52:	f7ff ffc9 	bl	8002be8 <__swhatbuf_r>
 8002c56:	9f00      	ldr	r7, [sp, #0]
 8002c58:	4605      	mov	r5, r0
 8002c5a:	4639      	mov	r1, r7
 8002c5c:	4630      	mov	r0, r6
 8002c5e:	f7ff f85b 	bl	8001d18 <_malloc_r>
 8002c62:	b948      	cbnz	r0, 8002c78 <__smakebuf_r+0x46>
 8002c64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c68:	059a      	lsls	r2, r3, #22
 8002c6a:	d4ee      	bmi.n	8002c4a <__smakebuf_r+0x18>
 8002c6c:	f023 0303 	bic.w	r3, r3, #3
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	81a3      	strh	r3, [r4, #12]
 8002c76:	e7e2      	b.n	8002c3e <__smakebuf_r+0xc>
 8002c78:	89a3      	ldrh	r3, [r4, #12]
 8002c7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c82:	81a3      	strh	r3, [r4, #12]
 8002c84:	9b01      	ldr	r3, [sp, #4]
 8002c86:	6020      	str	r0, [r4, #0]
 8002c88:	b15b      	cbz	r3, 8002ca2 <__smakebuf_r+0x70>
 8002c8a:	4630      	mov	r0, r6
 8002c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c90:	f000 f81e 	bl	8002cd0 <_isatty_r>
 8002c94:	b128      	cbz	r0, 8002ca2 <__smakebuf_r+0x70>
 8002c96:	89a3      	ldrh	r3, [r4, #12]
 8002c98:	f023 0303 	bic.w	r3, r3, #3
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	81a3      	strh	r3, [r4, #12]
 8002ca2:	89a3      	ldrh	r3, [r4, #12]
 8002ca4:	431d      	orrs	r5, r3
 8002ca6:	81a5      	strh	r5, [r4, #12]
 8002ca8:	e7cf      	b.n	8002c4a <__smakebuf_r+0x18>
	...

08002cac <_fstat_r>:
 8002cac:	b538      	push	{r3, r4, r5, lr}
 8002cae:	2300      	movs	r3, #0
 8002cb0:	4d06      	ldr	r5, [pc, #24]	@ (8002ccc <_fstat_r+0x20>)
 8002cb2:	4604      	mov	r4, r0
 8002cb4:	4608      	mov	r0, r1
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	602b      	str	r3, [r5, #0]
 8002cba:	f7fe f819 	bl	8000cf0 <_fstat>
 8002cbe:	1c43      	adds	r3, r0, #1
 8002cc0:	d102      	bne.n	8002cc8 <_fstat_r+0x1c>
 8002cc2:	682b      	ldr	r3, [r5, #0]
 8002cc4:	b103      	cbz	r3, 8002cc8 <_fstat_r+0x1c>
 8002cc6:	6023      	str	r3, [r4, #0]
 8002cc8:	bd38      	pop	{r3, r4, r5, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000234 	.word	0x20000234

08002cd0 <_isatty_r>:
 8002cd0:	b538      	push	{r3, r4, r5, lr}
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	4d05      	ldr	r5, [pc, #20]	@ (8002cec <_isatty_r+0x1c>)
 8002cd6:	4604      	mov	r4, r0
 8002cd8:	4608      	mov	r0, r1
 8002cda:	602b      	str	r3, [r5, #0]
 8002cdc:	f7fe f817 	bl	8000d0e <_isatty>
 8002ce0:	1c43      	adds	r3, r0, #1
 8002ce2:	d102      	bne.n	8002cea <_isatty_r+0x1a>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	b103      	cbz	r3, 8002cea <_isatty_r+0x1a>
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	bd38      	pop	{r3, r4, r5, pc}
 8002cec:	20000234 	.word	0x20000234

08002cf0 <_init>:
 8002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf2:	bf00      	nop
 8002cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cf6:	bc08      	pop	{r3}
 8002cf8:	469e      	mov	lr, r3
 8002cfa:	4770      	bx	lr

08002cfc <_fini>:
 8002cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cfe:	bf00      	nop
 8002d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d02:	bc08      	pop	{r3}
 8002d04:	469e      	mov	lr, r3
 8002d06:	4770      	bx	lr
