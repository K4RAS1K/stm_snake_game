
snacke_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a60  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002b6c  08002b6c  00003b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c6c  08002c6c  00004068  2**0
                  CONTENTS
  4 .ARM          00000000  08002c6c  08002c6c  00004068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c6c  08002c6c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c6c  08002c6c  00003c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c70  08002c70  00003c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002c74  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000068  08002cdc  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000230  08002cdc  00004230  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000565c  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000165f  00000000  00000000  000096ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000ad50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000b438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001769b  00000000  00000000  0000b949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008110  00000000  00000000  00022fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000812d2  00000000  00000000  0002b0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac3c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002398  00000000  00000000  000ac40c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000ae7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b54 	.word	0x08002b54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08002b54 	.word	0x08002b54

0800014c <initialize_body>:
    uint8_t x1;
    uint8_t y1;
} Snake;


Snake* initialize_body() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
uint8_t size = 2;
 8000152:	2302      	movs	r3, #2
 8000154:	71bb      	strb	r3, [r7, #6]
Snake *body = malloc(size * sizeof(Snake));
 8000156:	79bb      	ldrb	r3, [r7, #6]
 8000158:	009b      	lsls	r3, r3, #2
 800015a:	4618      	mov	r0, r3
 800015c:	f001 fd12 	bl	8001b84 <malloc>
 8000160:	4603      	mov	r3, r0
 8000162:	603b      	str	r3, [r7, #0]
for (uint8_t i = 0; i < size; i++) {
 8000164:	2300      	movs	r3, #0
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	e022      	b.n	80001b0 <initialize_body+0x64>
	  body[i].x0 = 5+i;
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	009b      	lsls	r3, r3, #2
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	4413      	add	r3, r2
 8000172:	79fa      	ldrb	r2, [r7, #7]
 8000174:	3205      	adds	r2, #5
 8000176:	b2d2      	uxtb	r2, r2
 8000178:	701a      	strb	r2, [r3, #0]
	  body[i].y0 = 5+i;
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	683a      	ldr	r2, [r7, #0]
 8000180:	4413      	add	r3, r2
 8000182:	79fa      	ldrb	r2, [r7, #7]
 8000184:	3205      	adds	r2, #5
 8000186:	b2d2      	uxtb	r2, r2
 8000188:	705a      	strb	r2, [r3, #1]
	  body[i].x1 = 5+i;
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	683a      	ldr	r2, [r7, #0]
 8000190:	4413      	add	r3, r2
 8000192:	79fa      	ldrb	r2, [r7, #7]
 8000194:	3205      	adds	r2, #5
 8000196:	b2d2      	uxtb	r2, r2
 8000198:	709a      	strb	r2, [r3, #2]
	  body[i].y1 = 5+i;
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	683a      	ldr	r2, [r7, #0]
 80001a0:	4413      	add	r3, r2
 80001a2:	79fa      	ldrb	r2, [r7, #7]
 80001a4:	3205      	adds	r2, #5
 80001a6:	b2d2      	uxtb	r2, r2
 80001a8:	70da      	strb	r2, [r3, #3]
for (uint8_t i = 0; i < size; i++) {
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	3301      	adds	r3, #1
 80001ae:	71fb      	strb	r3, [r7, #7]
 80001b0:	79fa      	ldrb	r2, [r7, #7]
 80001b2:	79bb      	ldrb	r3, [r7, #6]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d3d8      	bcc.n	800016a <initialize_body+0x1e>
	}
	return body;
 80001b8:	683b      	ldr	r3, [r7, #0]
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}

080001c2 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c2:	b590      	push	{r4, r7, lr}
 80001c4:	b087      	sub	sp, #28
 80001c6:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c8:	f000 fd7a 	bl	8000cc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001cc:	f000 f8d1 	bl	8000372 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d0:	f000 f94a 	bl	8000468 <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d4:	f000 f912 	bl	80003fc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80001d8:	f000 fa16 	bl	8000608 <ST7735_Init>

  ST7735_DrawRect(0, 0, 140, 140, ST7735_COLOR_WHITE);
 80001dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	238c      	movs	r3, #140	@ 0x8c
 80001e4:	228c      	movs	r2, #140	@ 0x8c
 80001e6:	2100      	movs	r1, #0
 80001e8:	2000      	movs	r0, #0
 80001ea:	f000 fb7f 	bl	80008ec <ST7735_DrawRect>

  Snake head;

  head.x0 = 50;
 80001ee:	2332      	movs	r3, #50	@ 0x32
 80001f0:	713b      	strb	r3, [r7, #4]
  head.y0 = 50;
 80001f2:	2332      	movs	r3, #50	@ 0x32
 80001f4:	717b      	strb	r3, [r7, #5]
  head.x1 = 54;
 80001f6:	2336      	movs	r3, #54	@ 0x36
 80001f8:	71bb      	strb	r3, [r7, #6]
  head.y1 = 54;
 80001fa:	2336      	movs	r3, #54	@ 0x36
 80001fc:	71fb      	strb	r3, [r7, #7]

  Snake *body = initialize_body();
 80001fe:	f7ff ffa5 	bl	800014c <initialize_body>
 8000202:	60f8      	str	r0, [r7, #12]

  Snake after_tail;

  after_tail.x0 = 15;
 8000204:	230f      	movs	r3, #15
 8000206:	703b      	strb	r3, [r7, #0]
  after_tail.y0 = 15;
 8000208:	230f      	movs	r3, #15
 800020a:	707b      	strb	r3, [r7, #1]
  after_tail.x1 = 15;
 800020c:	230f      	movs	r3, #15
 800020e:	70bb      	strb	r3, [r7, #2]
  after_tail.y1 = 15;
 8000210:	230f      	movs	r3, #15
 8000212:	70fb      	strb	r3, [r7, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ST7735_DrawRect(after_tail.x0, after_tail.y0, after_tail.x1, after_tail.y1, ST7735_COLOR_WHITE);
 8000214:	783b      	ldrb	r3, [r7, #0]
 8000216:	4618      	mov	r0, r3
 8000218:	787b      	ldrb	r3, [r7, #1]
 800021a:	4619      	mov	r1, r3
 800021c:	78bb      	ldrb	r3, [r7, #2]
 800021e:	461a      	mov	r2, r3
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	461c      	mov	r4, r3
 8000224:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000228:	9300      	str	r3, [sp, #0]
 800022a:	4623      	mov	r3, r4
 800022c:	f000 fb5e 	bl	80008ec <ST7735_DrawRect>
	  ST7735_DrawRect(body[0].x0, body[0].y0, body[0].x1, body[0].y1, ST7735_COLOR_GREEN);
 8000230:	68fb      	ldr	r3, [r7, #12]
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	4618      	mov	r0, r3
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	785b      	ldrb	r3, [r3, #1]
 800023a:	4619      	mov	r1, r3
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	789b      	ldrb	r3, [r3, #2]
 8000240:	461a      	mov	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	78db      	ldrb	r3, [r3, #3]
 8000246:	461c      	mov	r4, r3
 8000248:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	4623      	mov	r3, r4
 8000250:	f000 fb4c 	bl	80008ec <ST7735_DrawRect>
	  ST7735_DrawRect(body[1].x0, body[1].y0, body[1].x1, body[1].y1, ST7735_COLOR_GREEN);
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	3304      	adds	r3, #4
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	4618      	mov	r0, r3
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	3304      	adds	r3, #4
 8000260:	785b      	ldrb	r3, [r3, #1]
 8000262:	4619      	mov	r1, r3
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	3304      	adds	r3, #4
 8000268:	789b      	ldrb	r3, [r3, #2]
 800026a:	461a      	mov	r2, r3
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	3304      	adds	r3, #4
 8000270:	78db      	ldrb	r3, [r3, #3]
 8000272:	461c      	mov	r4, r3
 8000274:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	4623      	mov	r3, r4
 800027c:	f000 fb36 	bl	80008ec <ST7735_DrawRect>
	  ST7735_DrawRect(head.x0, head.y0, head.x1, head.y1, ST7735_COLOR_RED);
 8000280:	793b      	ldrb	r3, [r7, #4]
 8000282:	4618      	mov	r0, r3
 8000284:	797b      	ldrb	r3, [r7, #5]
 8000286:	4619      	mov	r1, r3
 8000288:	79bb      	ldrb	r3, [r7, #6]
 800028a:	461a      	mov	r2, r3
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	461c      	mov	r4, r3
 8000290:	231f      	movs	r3, #31
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	4623      	mov	r3, r4
 8000296:	f000 fb29 	bl	80008ec <ST7735_DrawRect>
	  uint8_t move_num = rand()%4;
 800029a:	f001 fd29 	bl	8001cf0 <rand>
 800029e:	4603      	mov	r3, r0
 80002a0:	425a      	negs	r2, r3
 80002a2:	f003 0303 	and.w	r3, r3, #3
 80002a6:	f002 0203 	and.w	r2, r2, #3
 80002aa:	bf58      	it	pl
 80002ac:	4253      	negpl	r3, r2
 80002ae:	72fb      	strb	r3, [r7, #11]

	  after_tail.x0 = body[0].x0;
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	703b      	strb	r3, [r7, #0]
	  after_tail.y0 = body[0].y0;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	785b      	ldrb	r3, [r3, #1]
 80002ba:	707b      	strb	r3, [r7, #1]
	  after_tail.x1 = body[0].x1;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	789b      	ldrb	r3, [r3, #2]
 80002c0:	70bb      	strb	r3, [r7, #2]
	  after_tail.y1 = body[0].y1;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	78db      	ldrb	r3, [r3, #3]
 80002c6:	70fb      	strb	r3, [r7, #3]

	  body[0].x0 = body[1].x0;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	3304      	adds	r3, #4
 80002cc:	781a      	ldrb	r2, [r3, #0]
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	701a      	strb	r2, [r3, #0]
	  body[0].y0 = body[1].y0;
 80002d2:	68fb      	ldr	r3, [r7, #12]
 80002d4:	3304      	adds	r3, #4
 80002d6:	785a      	ldrb	r2, [r3, #1]
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	705a      	strb	r2, [r3, #1]
	  body[0].x1 = body[1].x1;
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	3304      	adds	r3, #4
 80002e0:	789a      	ldrb	r2, [r3, #2]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	709a      	strb	r2, [r3, #2]
	  body[0].y1 = body[1].y1;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	3304      	adds	r3, #4
 80002ea:	78da      	ldrb	r2, [r3, #3]
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	70da      	strb	r2, [r3, #3]


	  body[1].x0 = head.x0;
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	3304      	adds	r3, #4
 80002f4:	793a      	ldrb	r2, [r7, #4]
 80002f6:	701a      	strb	r2, [r3, #0]
	  body[1].y0 = head.y0;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	3304      	adds	r3, #4
 80002fc:	797a      	ldrb	r2, [r7, #5]
 80002fe:	705a      	strb	r2, [r3, #1]
	  body[1].x1 = head.x1;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	3304      	adds	r3, #4
 8000304:	79ba      	ldrb	r2, [r7, #6]
 8000306:	709a      	strb	r2, [r3, #2]
	  body[1].y1 = head.y1;
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	3304      	adds	r3, #4
 800030c:	79fa      	ldrb	r2, [r7, #7]
 800030e:	70da      	strb	r2, [r3, #3]

	  if (move_num == 0)
 8000310:	7afb      	ldrb	r3, [r7, #11]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d107      	bne.n	8000326 <main+0x164>
	  {
		  head.x0 = head.x0 + 5;
 8000316:	793b      	ldrb	r3, [r7, #4]
 8000318:	3305      	adds	r3, #5
 800031a:	b2db      	uxtb	r3, r3
 800031c:	713b      	strb	r3, [r7, #4]
		  head.x1 = head.x1 + 5;
 800031e:	79bb      	ldrb	r3, [r7, #6]
 8000320:	3305      	adds	r3, #5
 8000322:	b2db      	uxtb	r3, r3
 8000324:	71bb      	strb	r3, [r7, #6]
	  }
	  if (move_num == 1)
 8000326:	7afb      	ldrb	r3, [r7, #11]
 8000328:	2b01      	cmp	r3, #1
 800032a:	d107      	bne.n	800033c <main+0x17a>
	  {
		  head.x0 = head.x0 - 5;
 800032c:	793b      	ldrb	r3, [r7, #4]
 800032e:	3b05      	subs	r3, #5
 8000330:	b2db      	uxtb	r3, r3
 8000332:	713b      	strb	r3, [r7, #4]
		  head.x1 = head.x1 - 5;
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	3b05      	subs	r3, #5
 8000338:	b2db      	uxtb	r3, r3
 800033a:	71bb      	strb	r3, [r7, #6]
	  }
	  if (move_num == 2)
 800033c:	7afb      	ldrb	r3, [r7, #11]
 800033e:	2b02      	cmp	r3, #2
 8000340:	d107      	bne.n	8000352 <main+0x190>
	  {
		  head.y0 = head.y0 + 5;
 8000342:	797b      	ldrb	r3, [r7, #5]
 8000344:	3305      	adds	r3, #5
 8000346:	b2db      	uxtb	r3, r3
 8000348:	717b      	strb	r3, [r7, #5]
		  head.y1 = head.y1 + 5;
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	3305      	adds	r3, #5
 800034e:	b2db      	uxtb	r3, r3
 8000350:	71fb      	strb	r3, [r7, #7]
	  }
	  if (move_num == 3)
 8000352:	7afb      	ldrb	r3, [r7, #11]
 8000354:	2b03      	cmp	r3, #3
 8000356:	d107      	bne.n	8000368 <main+0x1a6>
	  {
		  head.y0 = head.y0 - 5;
 8000358:	797b      	ldrb	r3, [r7, #5]
 800035a:	3b05      	subs	r3, #5
 800035c:	b2db      	uxtb	r3, r3
 800035e:	717b      	strb	r3, [r7, #5]
		  head.y1 = head.y1 - 5;
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	3b05      	subs	r3, #5
 8000364:	b2db      	uxtb	r3, r3
 8000366:	71fb      	strb	r3, [r7, #7]
	  }

	  HAL_Delay(500);
 8000368:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800036c:	f000 fd0a 	bl	8000d84 <HAL_Delay>
  {
 8000370:	e750      	b.n	8000214 <main+0x52>

08000372 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b090      	sub	sp, #64	@ 0x40
 8000376:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	2228      	movs	r2, #40	@ 0x28
 800037e:	2100      	movs	r1, #0
 8000380:	4618      	mov	r0, r3
 8000382:	f001 fdf8 	bl	8001f76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000394:	2301      	movs	r3, #1
 8000396:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a2:	2301      	movs	r3, #1
 80003a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003a6:	2302      	movs	r3, #2
 80003a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80003ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003b0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80003b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b6:	f107 0318 	add.w	r3, r7, #24
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 ff7e 	bl	80012bc <HAL_RCC_OscConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x58>
  {
    Error_Handler();
 80003c6:	f000 f89b 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ca:	230f      	movs	r3, #15
 80003cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ce:	2302      	movs	r3, #2
 80003d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d2:	2300      	movs	r3, #0
 80003d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003dc:	2300      	movs	r3, #0
 80003de:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2102      	movs	r1, #2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f001 f9eb 	bl	80017c0 <HAL_RCC_ClockConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003f0:	f000 f886 	bl	8000500 <Error_Handler>
  }
}
 80003f4:	bf00      	nop
 80003f6:	3740      	adds	r7, #64	@ 0x40
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000400:	4b17      	ldr	r3, [pc, #92]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000402:	4a18      	ldr	r2, [pc, #96]	@ (8000464 <MX_SPI1_Init+0x68>)
 8000404:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000406:	4b16      	ldr	r3, [pc, #88]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000408:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800040c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800040e:	4b14      	ldr	r3, [pc, #80]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000414:	4b12      	ldr	r3, [pc, #72]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800041a:	4b11      	ldr	r3, [pc, #68]	@ (8000460 <MX_SPI1_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000420:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000426:	4b0e      	ldr	r3, [pc, #56]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000428:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800042c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800042e:	4b0c      	ldr	r3, [pc, #48]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000430:	2208      	movs	r2, #8
 8000432:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000434:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <MX_SPI1_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000440:	4b07      	ldr	r3, [pc, #28]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000442:	2200      	movs	r2, #0
 8000444:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000446:	4b06      	ldr	r3, [pc, #24]	@ (8000460 <MX_SPI1_Init+0x64>)
 8000448:	220a      	movs	r2, #10
 800044a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800044c:	4804      	ldr	r0, [pc, #16]	@ (8000460 <MX_SPI1_Init+0x64>)
 800044e:	f001 fb15 	bl	8001a7c <HAL_SPI_Init>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000458:	f000 f852 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000084 	.word	0x20000084
 8000464:	40013000 	.word	0x40013000

08000468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046e:	f107 0310 	add.w	r3, r7, #16
 8000472:	2200      	movs	r2, #0
 8000474:	601a      	str	r2, [r3, #0]
 8000476:	605a      	str	r2, [r3, #4]
 8000478:	609a      	str	r2, [r3, #8]
 800047a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800047c:	4b1e      	ldr	r3, [pc, #120]	@ (80004f8 <MX_GPIO_Init+0x90>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a1d      	ldr	r2, [pc, #116]	@ (80004f8 <MX_GPIO_Init+0x90>)
 8000482:	f043 0320 	orr.w	r3, r3, #32
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b1b      	ldr	r3, [pc, #108]	@ (80004f8 <MX_GPIO_Init+0x90>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0320 	and.w	r3, r3, #32
 8000490:	60fb      	str	r3, [r7, #12]
 8000492:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000494:	4b18      	ldr	r3, [pc, #96]	@ (80004f8 <MX_GPIO_Init+0x90>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a17      	ldr	r2, [pc, #92]	@ (80004f8 <MX_GPIO_Init+0x90>)
 800049a:	f043 0304 	orr.w	r3, r3, #4
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <MX_GPIO_Init+0x90>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	60bb      	str	r3, [r7, #8]
 80004aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ac:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <MX_GPIO_Init+0x90>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a11      	ldr	r2, [pc, #68]	@ (80004f8 <MX_GPIO_Init+0x90>)
 80004b2:	f043 0308 	orr.w	r3, r3, #8
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b0f      	ldr	r3, [pc, #60]	@ (80004f8 <MX_GPIO_Init+0x90>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f003 0308 	and.w	r3, r3, #8
 80004c0:	607b      	str	r3, [r7, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 80004ca:	480c      	ldr	r0, [pc, #48]	@ (80004fc <MX_GPIO_Init+0x94>)
 80004cc:	f000 fede 	bl	800128c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80004d0:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2302      	movs	r3, #2
 80004e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	4619      	mov	r1, r3
 80004e8:	4804      	ldr	r0, [pc, #16]	@ (80004fc <MX_GPIO_Init+0x94>)
 80004ea:	f000 fd53 	bl	8000f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004ee:	bf00      	nop
 80004f0:	3720      	adds	r7, #32
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010c00 	.word	0x40010c00

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <Error_Handler+0x8>

0800050c <ST7735_SendByte>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
void ST7735_SendByte(uint8_t data)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
  // HAL_SPI_Transmit(&hspi1, &data, 1, ST7735_SPI_TIMEOUT);
  while((SPI1->SR & SPI_SR_TXE) == RESET);
 8000516:	bf00      	nop
 8000518:	4b06      	ldr	r3, [pc, #24]	@ (8000534 <ST7735_SendByte+0x28>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	f003 0302 	and.w	r3, r3, #2
 8000520:	2b00      	cmp	r3, #0
 8000522:	d0f9      	beq.n	8000518 <ST7735_SendByte+0xc>
  SPI1->DR = data;
 8000524:	4a03      	ldr	r2, [pc, #12]	@ (8000534 <ST7735_SendByte+0x28>)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	60d3      	str	r3, [r2, #12]
}
 800052a:	bf00      	nop
 800052c:	370c      	adds	r7, #12
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40013000 	.word	0x40013000

08000538 <ST7735_WaitLastData>:



/*----------------------------------------------------------------------------*/
void ST7735_WaitLastData()
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  while((SPI1->SR & SPI_SR_TXE) == RESET);
 800053c:	bf00      	nop
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <ST7735_WaitLastData+0x2c>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0f9      	beq.n	800053e <ST7735_WaitLastData+0x6>
  while((SPI1->SR & SPI_SR_BSY) != RESET);
 800054a:	bf00      	nop
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <ST7735_WaitLastData+0x2c>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000554:	2b00      	cmp	r3, #0
 8000556:	d1f9      	bne.n	800054c <ST7735_WaitLastData+0x14>
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40013000 	.word	0x40013000

08000568 <ST7735_SendCommand>:



/*----------------------------------------------------------------------------*/
void ST7735_SendCommand(uint8_t data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	@ 0x40
 8000576:	4806      	ldr	r0, [pc, #24]	@ (8000590 <ST7735_SendCommand+0x28>)
 8000578:	f000 fe88 	bl	800128c <HAL_GPIO_WritePin>
  ST7735_SendByte(data);
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff ffc4 	bl	800050c <ST7735_SendByte>
  ST7735_WaitLastData();
 8000584:	f7ff ffd8 	bl	8000538 <ST7735_WaitLastData>
}
 8000588:	bf00      	nop
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40010c00 	.word	0x40010c00

08000594 <ST7735_SendData>:



/*----------------------------------------------------------------------------*/
void ST7735_SendData(uint8_t data)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2140      	movs	r1, #64	@ 0x40
 80005a2:	4806      	ldr	r0, [pc, #24]	@ (80005bc <ST7735_SendData+0x28>)
 80005a4:	f000 fe72 	bl	800128c <HAL_GPIO_WritePin>
  ST7735_SendByte(data);
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffae 	bl	800050c <ST7735_SendByte>
  ST7735_WaitLastData();
 80005b0:	f7ff ffc2 	bl	8000538 <ST7735_WaitLastData>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40010c00 	.word	0x40010c00

080005c0 <ST7735_SendDataMultiple>:



/*----------------------------------------------------------------------------*/
void ST7735_SendDataMultiple(uint8_t *data, uint32_t num)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2140      	movs	r1, #64	@ 0x40
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <ST7735_SendDataMultiple+0x44>)
 80005d0:	f000 fe5c 	bl	800128c <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < num; i++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	e00a      	b.n	80005f0 <ST7735_SendDataMultiple+0x30>
  {
    ST7735_SendByte(*data);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ff94 	bl	800050c <ST7735_SendByte>
    data++;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	3301      	adds	r3, #1
 80005e8:	607b      	str	r3, [r7, #4]
  for (uint32_t i = 0; i < num; i++)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3301      	adds	r3, #1
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fa      	ldr	r2, [r7, #12]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d3f0      	bcc.n	80005da <ST7735_SendDataMultiple+0x1a>
  }

  ST7735_WaitLastData();
 80005f8:	f7ff ff9e 	bl	8000538 <ST7735_WaitLastData>
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40010c00 	.word	0x40010c00

08000608 <ST7735_Init>:



/*----------------------------------------------------------------------------*/
void ST7735_Init()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  SPI1->CR1 |= SPI_CR1_SPE;
 800060c:	4b8f      	ldr	r3, [pc, #572]	@ (800084c <ST7735_Init+0x244>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a8e      	ldr	r2, [pc, #568]	@ (800084c <ST7735_Init+0x244>)
 8000612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000616:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800061e:	488c      	ldr	r0, [pc, #560]	@ (8000850 <ST7735_Init+0x248>)
 8000620:	f000 fe34 	bl	800128c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_SET);
 8000624:	2201      	movs	r2, #1
 8000626:	2180      	movs	r1, #128	@ 0x80
 8000628:	488a      	ldr	r0, [pc, #552]	@ (8000854 <ST7735_Init+0x24c>)
 800062a:	f000 fe2f 	bl	800128c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800062e:	2005      	movs	r0, #5
 8000630:	f000 fba8 	bl	8000d84 <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2180      	movs	r1, #128	@ 0x80
 8000638:	4886      	ldr	r0, [pc, #536]	@ (8000854 <ST7735_Init+0x24c>)
 800063a:	f000 fe27 	bl	800128c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800063e:	2005      	movs	r0, #5
 8000640:	f000 fba0 	bl	8000d84 <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_SET);
 8000644:	2201      	movs	r2, #1
 8000646:	2180      	movs	r1, #128	@ 0x80
 8000648:	4882      	ldr	r0, [pc, #520]	@ (8000854 <ST7735_Init+0x24c>)
 800064a:	f000 fe1f 	bl	800128c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800064e:	2005      	movs	r0, #5
 8000650:	f000 fb98 	bl	8000d84 <HAL_Delay>

  ST7735_SendCommand(ST7735_SWRESET);
 8000654:	2001      	movs	r0, #1
 8000656:	f7ff ff87 	bl	8000568 <ST7735_SendCommand>
  HAL_Delay(150);
 800065a:	2096      	movs	r0, #150	@ 0x96
 800065c:	f000 fb92 	bl	8000d84 <HAL_Delay>

  ST7735_SendCommand(ST7735_SLPOUT);
 8000660:	2011      	movs	r0, #17
 8000662:	f7ff ff81 	bl	8000568 <ST7735_SendCommand>
  HAL_Delay(500);
 8000666:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800066a:	f000 fb8b 	bl	8000d84 <HAL_Delay>

  ST7735_SendCommand(ST7735_FRMCTR1);
 800066e:	20b1      	movs	r0, #177	@ 0xb1
 8000670:	f7ff ff7a 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff ff8d 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2C);
 800067a:	202c      	movs	r0, #44	@ 0x2c
 800067c:	f7ff ff8a 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000680:	202d      	movs	r0, #45	@ 0x2d
 8000682:	f7ff ff87 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_FRMCTR2);
 8000686:	20b2      	movs	r0, #178	@ 0xb2
 8000688:	f7ff ff6e 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 800068c:	2001      	movs	r0, #1
 800068e:	f7ff ff81 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000692:	202c      	movs	r0, #44	@ 0x2c
 8000694:	f7ff ff7e 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000698:	202d      	movs	r0, #45	@ 0x2d
 800069a:	f7ff ff7b 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_FRMCTR3);
 800069e:	20b3      	movs	r0, #179	@ 0xb3
 80006a0:	f7ff ff62 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x01);
 80006a4:	2001      	movs	r0, #1
 80006a6:	f7ff ff75 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2C);
 80006aa:	202c      	movs	r0, #44	@ 0x2c
 80006ac:	f7ff ff72 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2D);
 80006b0:	202d      	movs	r0, #45	@ 0x2d
 80006b2:	f7ff ff6f 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x01);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f7ff ff6c 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2C);
 80006bc:	202c      	movs	r0, #44	@ 0x2c
 80006be:	f7ff ff69 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2D);
 80006c2:	202d      	movs	r0, #45	@ 0x2d
 80006c4:	f7ff ff66 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_INVCTR);
 80006c8:	20b4      	movs	r0, #180	@ 0xb4
 80006ca:	f7ff ff4d 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x07);
 80006ce:	2007      	movs	r0, #7
 80006d0:	f7ff ff60 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR1);
 80006d4:	20c0      	movs	r0, #192	@ 0xc0
 80006d6:	f7ff ff47 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0xA2);
 80006da:	20a2      	movs	r0, #162	@ 0xa2
 80006dc:	f7ff ff5a 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x02);
 80006e0:	2002      	movs	r0, #2
 80006e2:	f7ff ff57 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x84);
 80006e6:	2084      	movs	r0, #132	@ 0x84
 80006e8:	f7ff ff54 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR2);
 80006ec:	20c1      	movs	r0, #193	@ 0xc1
 80006ee:	f7ff ff3b 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0xC5);
 80006f2:	20c5      	movs	r0, #197	@ 0xc5
 80006f4:	f7ff ff4e 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR3);
 80006f8:	20c2      	movs	r0, #194	@ 0xc2
 80006fa:	f7ff ff35 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x0A);
 80006fe:	200a      	movs	r0, #10
 8000700:	f7ff ff48 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x00);
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff ff45 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR4);
 800070a:	20c3      	movs	r0, #195	@ 0xc3
 800070c:	f7ff ff2c 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x8A);
 8000710:	208a      	movs	r0, #138	@ 0x8a
 8000712:	f7ff ff3f 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2A);
 8000716:	202a      	movs	r0, #42	@ 0x2a
 8000718:	f7ff ff3c 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR5);
 800071c:	20c4      	movs	r0, #196	@ 0xc4
 800071e:	f7ff ff23 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x8A);
 8000722:	208a      	movs	r0, #138	@ 0x8a
 8000724:	f7ff ff36 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0xEE);
 8000728:	20ee      	movs	r0, #238	@ 0xee
 800072a:	f7ff ff33 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_VMCTR1);
 800072e:	20c5      	movs	r0, #197	@ 0xc5
 8000730:	f7ff ff1a 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x0E);
 8000734:	200e      	movs	r0, #14
 8000736:	f7ff ff2d 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_INVOFF);
 800073a:	2020      	movs	r0, #32
 800073c:	f7ff ff14 	bl	8000568 <ST7735_SendCommand>

  ST7735_SendCommand(ST7735_MADCTL);
 8000740:	2036      	movs	r0, #54	@ 0x36
 8000742:	f7ff ff11 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0xC0);
 8000746:	20c0      	movs	r0, #192	@ 0xc0
 8000748:	f7ff ff24 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_COLMOD);
 800074c:	203a      	movs	r0, #58	@ 0x3a
 800074e:	f7ff ff0b 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x05);
 8000752:	2005      	movs	r0, #5
 8000754:	f7ff ff1e 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_GMCTRP1);
 8000758:	20e0      	movs	r0, #224	@ 0xe0
 800075a:	f7ff ff05 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x02);
 800075e:	2002      	movs	r0, #2
 8000760:	f7ff ff18 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x1c);
 8000764:	201c      	movs	r0, #28
 8000766:	f7ff ff15 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x07);
 800076a:	2007      	movs	r0, #7
 800076c:	f7ff ff12 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x12);
 8000770:	2012      	movs	r0, #18
 8000772:	f7ff ff0f 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x37);
 8000776:	2037      	movs	r0, #55	@ 0x37
 8000778:	f7ff ff0c 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x32);
 800077c:	2032      	movs	r0, #50	@ 0x32
 800077e:	f7ff ff09 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x29);
 8000782:	2029      	movs	r0, #41	@ 0x29
 8000784:	f7ff ff06 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2d);
 8000788:	202d      	movs	r0, #45	@ 0x2d
 800078a:	f7ff ff03 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x29);
 800078e:	2029      	movs	r0, #41	@ 0x29
 8000790:	f7ff ff00 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x25);
 8000794:	2025      	movs	r0, #37	@ 0x25
 8000796:	f7ff fefd 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2B);
 800079a:	202b      	movs	r0, #43	@ 0x2b
 800079c:	f7ff fefa 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x39);
 80007a0:	2039      	movs	r0, #57	@ 0x39
 80007a2:	f7ff fef7 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x00);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fef4 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x01);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fef1 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x03);
 80007b2:	2003      	movs	r0, #3
 80007b4:	f7ff feee 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x10);
 80007b8:	2010      	movs	r0, #16
 80007ba:	f7ff feeb 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_GMCTRN1);
 80007be:	20e1      	movs	r0, #225	@ 0xe1
 80007c0:	f7ff fed2 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendData(0x03);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f7ff fee5 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x1d);
 80007ca:	201d      	movs	r0, #29
 80007cc:	f7ff fee2 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x07);
 80007d0:	2007      	movs	r0, #7
 80007d2:	f7ff fedf 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x06);
 80007d6:	2006      	movs	r0, #6
 80007d8:	f7ff fedc 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2E);
 80007dc:	202e      	movs	r0, #46	@ 0x2e
 80007de:	f7ff fed9 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2C);
 80007e2:	202c      	movs	r0, #44	@ 0x2c
 80007e4:	f7ff fed6 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x29);
 80007e8:	2029      	movs	r0, #41	@ 0x29
 80007ea:	f7ff fed3 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2D);
 80007ee:	202d      	movs	r0, #45	@ 0x2d
 80007f0:	f7ff fed0 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2E);
 80007f4:	202e      	movs	r0, #46	@ 0x2e
 80007f6:	f7ff fecd 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x2E);
 80007fa:	202e      	movs	r0, #46	@ 0x2e
 80007fc:	f7ff feca 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x37);
 8000800:	2037      	movs	r0, #55	@ 0x37
 8000802:	f7ff fec7 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x3F);
 8000806:	203f      	movs	r0, #63	@ 0x3f
 8000808:	f7ff fec4 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x00);
 800080c:	2000      	movs	r0, #0
 800080e:	f7ff fec1 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x00);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff febe 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x02);
 8000818:	2002      	movs	r0, #2
 800081a:	f7ff febb 	bl	8000594 <ST7735_SendData>
  ST7735_SendData(0x10);
 800081e:	2010      	movs	r0, #16
 8000820:	f7ff feb8 	bl	8000594 <ST7735_SendData>

  ST7735_SendCommand(ST7735_NORON);
 8000824:	2013      	movs	r0, #19
 8000826:	f7ff fe9f 	bl	8000568 <ST7735_SendCommand>
  HAL_Delay(10);
 800082a:	200a      	movs	r0, #10
 800082c:	f000 faaa 	bl	8000d84 <HAL_Delay>

  ST7735_SendCommand(ST7735_DISPON);
 8000830:	2029      	movs	r0, #41	@ 0x29
 8000832:	f7ff fe99 	bl	8000568 <ST7735_SendCommand>
  HAL_Delay(100);
 8000836:	2064      	movs	r0, #100	@ 0x64
 8000838:	f000 faa4 	bl	8000d84 <HAL_Delay>

  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <ST7735_Init+0x248>)
 8000844:	f000 fd22 	bl	800128c <HAL_GPIO_WritePin>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40013000 	.word	0x40013000
 8000850:	40011000 	.word	0x40011000
 8000854:	40010c00 	.word	0x40010c00

08000858 <ST7735_SetColAddr>:



/*----------------------------------------------------------------------------*/
void ST7735_SetColAddr(uint16_t cStart, uint16_t cStop)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	80fb      	strh	r3, [r7, #6]
 8000864:	4613      	mov	r3, r2
 8000866:	80bb      	strh	r3, [r7, #4]
  uint8_t data[4];

  data[0] = (cStart & 0xFF00) >> 8;
 8000868:	88fb      	ldrh	r3, [r7, #6]
 800086a:	0a1b      	lsrs	r3, r3, #8
 800086c:	b29b      	uxth	r3, r3
 800086e:	b2db      	uxtb	r3, r3
 8000870:	733b      	strb	r3, [r7, #12]
  data[1] = cStart & 0x00FF;
 8000872:	88fb      	ldrh	r3, [r7, #6]
 8000874:	b2db      	uxtb	r3, r3
 8000876:	737b      	strb	r3, [r7, #13]
  data[2] = (cStop & 0xFF00) >> 8;
 8000878:	88bb      	ldrh	r3, [r7, #4]
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b29b      	uxth	r3, r3
 800087e:	b2db      	uxtb	r3, r3
 8000880:	73bb      	strb	r3, [r7, #14]
  data[3] = cStop & 0x00FF;
 8000882:	88bb      	ldrh	r3, [r7, #4]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	73fb      	strb	r3, [r7, #15]

  ST7735_SendCommand(ST7735_CASET);
 8000888:	202a      	movs	r0, #42	@ 0x2a
 800088a:	f7ff fe6d 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendDataMultiple(data, 4);
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	2104      	movs	r1, #4
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff fe93 	bl	80005c0 <ST7735_SendDataMultiple>
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <ST7735_SetRowAddr>:



/*----------------------------------------------------------------------------*/
void ST7735_SetRowAddr(uint16_t rStart, uint16_t rStop)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b084      	sub	sp, #16
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	460a      	mov	r2, r1
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	80bb      	strh	r3, [r7, #4]
  uint8_t data[4];

  data[0] = (rStart & 0xFF00) >> 8;
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	0a1b      	lsrs	r3, r3, #8
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	733b      	strb	r3, [r7, #12]
  data[1] = rStart & 0x00FF;
 80008bc:	88fb      	ldrh	r3, [r7, #6]
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	737b      	strb	r3, [r7, #13]
  data[2] = (rStop & 0xFF00) >> 8;
 80008c2:	88bb      	ldrh	r3, [r7, #4]
 80008c4:	0a1b      	lsrs	r3, r3, #8
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	73bb      	strb	r3, [r7, #14]
  data[3] = rStop & 0x00FF;
 80008cc:	88bb      	ldrh	r3, [r7, #4]
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	73fb      	strb	r3, [r7, #15]

  ST7735_SendCommand(ST7735_RASET);
 80008d2:	202b      	movs	r0, #43	@ 0x2b
 80008d4:	f7ff fe48 	bl	8000568 <ST7735_SendCommand>
  ST7735_SendDataMultiple(data, 4);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	2104      	movs	r1, #4
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe6e 	bl	80005c0 <ST7735_SendDataMultiple>
}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <ST7735_DrawRect>:



/*----------------------------------------------------------------------------*/
void ST7735_DrawRect(uint16_t cStart, uint16_t rStart, uint16_t cStop, uint16_t rStop, uint16_t color)
{
 80008ec:	b590      	push	{r4, r7, lr}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4604      	mov	r4, r0
 80008f4:	4608      	mov	r0, r1
 80008f6:	4611      	mov	r1, r2
 80008f8:	461a      	mov	r2, r3
 80008fa:	4623      	mov	r3, r4
 80008fc:	80fb      	strh	r3, [r7, #6]
 80008fe:	4603      	mov	r3, r0
 8000900:	80bb      	strh	r3, [r7, #4]
 8000902:	460b      	mov	r3, r1
 8000904:	807b      	strh	r3, [r7, #2]
 8000906:	4613      	mov	r3, r2
 8000908:	803b      	strh	r3, [r7, #0]
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000910:	4824      	ldr	r0, [pc, #144]	@ (80009a4 <ST7735_DrawRect+0xb8>)
 8000912:	f000 fcbb 	bl	800128c <HAL_GPIO_WritePin>
  ST7735_SetColAddr(cStart, cStop - 1);
 8000916:	887b      	ldrh	r3, [r7, #2]
 8000918:	3b01      	subs	r3, #1
 800091a:	b29a      	uxth	r2, r3
 800091c:	88fb      	ldrh	r3, [r7, #6]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff99 	bl	8000858 <ST7735_SetColAddr>
  ST7735_SetRowAddr(rStart, rStop - 1);
 8000926:	883b      	ldrh	r3, [r7, #0]
 8000928:	3b01      	subs	r3, #1
 800092a:	b29a      	uxth	r2, r3
 800092c:	88bb      	ldrh	r3, [r7, #4]
 800092e:	4611      	mov	r1, r2
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ffb6 	bl	80008a2 <ST7735_SetRowAddr>

  ST7735_SendCommand(ST7735_RAMWR);
 8000936:	202c      	movs	r0, #44	@ 0x2c
 8000938:	f7ff fe16 	bl	8000568 <ST7735_SendCommand>

  uint32_t size = (cStop - cStart) * (rStop - rStart);
 800093c:	887a      	ldrh	r2, [r7, #2]
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	8839      	ldrh	r1, [r7, #0]
 8000944:	88ba      	ldrh	r2, [r7, #4]
 8000946:	1a8a      	subs	r2, r1, r2
 8000948:	fb02 f303 	mul.w	r3, r2, r3
 800094c:	613b      	str	r3, [r7, #16]
  uint8_t colorBytes[2];
  colorBytes[0] = (color & 0xFF00) >> 8;
 800094e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	b29b      	uxth	r3, r3
 8000954:	b2db      	uxtb	r3, r3
 8000956:	733b      	strb	r3, [r7, #12]
  colorBytes[1] = color & 0x00FF;
 8000958:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800095a:	b2db      	uxtb	r3, r3
 800095c:	737b      	strb	r3, [r7, #13]

  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2140      	movs	r1, #64	@ 0x40
 8000962:	4811      	ldr	r0, [pc, #68]	@ (80009a8 <ST7735_DrawRect+0xbc>)
 8000964:	f000 fc92 	bl	800128c <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < size; i++)
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e00a      	b.n	8000984 <ST7735_DrawRect+0x98>
  {
    ST7735_SendByte(colorBytes[0]);
 800096e:	7b3b      	ldrb	r3, [r7, #12]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fdcb 	bl	800050c <ST7735_SendByte>
    ST7735_SendByte(colorBytes[1]);
 8000976:	7b7b      	ldrb	r3, [r7, #13]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fdc7 	bl	800050c <ST7735_SendByte>
  for (uint32_t i = 0; i < size; i++)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	3301      	adds	r3, #1
 8000982:	617b      	str	r3, [r7, #20]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	693b      	ldr	r3, [r7, #16]
 8000988:	429a      	cmp	r2, r3
 800098a:	d3f0      	bcc.n	800096e <ST7735_DrawRect+0x82>
  }

  ST7735_WaitLastData();
 800098c:	f7ff fdd4 	bl	8000538 <ST7735_WaitLastData>
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_SET);
 8000990:	2201      	movs	r2, #1
 8000992:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000996:	4803      	ldr	r0, [pc, #12]	@ (80009a4 <ST7735_DrawRect+0xb8>)
 8000998:	f000 fc78 	bl	800128c <HAL_GPIO_WritePin>
}
 800099c:	bf00      	nop
 800099e:	371c      	adds	r7, #28
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	40011000 	.word	0x40011000
 80009a8:	40010c00 	.word	0x40010c00

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009b2:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a14      	ldr	r2, [pc, #80]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d4:	61d3      	str	r3, [r2, #28]
 80009d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <HAL_MspInit+0x5c>)
 80009d8:	69db      	ldr	r3, [r3, #28]
 80009da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <HAL_MspInit+0x60>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <HAL_MspInit+0x60>)
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	bf00      	nop
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010000 	.word	0x40010000

08000a10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a15      	ldr	r2, [pc, #84]	@ (8000a80 <HAL_SPI_MspInit+0x70>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d123      	bne.n	8000a78 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <HAL_SPI_MspInit+0x74>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a13      	ldr	r2, [pc, #76]	@ (8000a84 <HAL_SPI_MspInit+0x74>)
 8000a36:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <HAL_SPI_MspInit+0x74>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a48:	4b0e      	ldr	r3, [pc, #56]	@ (8000a84 <HAL_SPI_MspInit+0x74>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <HAL_SPI_MspInit+0x74>)
 8000a4e:	f043 0304 	orr.w	r3, r3, #4
 8000a52:	6193      	str	r3, [r2, #24]
 8000a54:	4b0b      	ldr	r3, [pc, #44]	@ (8000a84 <HAL_SPI_MspInit+0x74>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000a60:	23a0      	movs	r3, #160	@ 0xa0
 8000a62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4619      	mov	r1, r3
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <HAL_SPI_MspInit+0x78>)
 8000a74:	f000 fa8e 	bl	8000f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a78:	bf00      	nop
 8000a7a:	3720      	adds	r7, #32
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40013000 	.word	0x40013000
 8000a84:	40021000 	.word	0x40021000
 8000a88:	40010800 	.word	0x40010800

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	bf00      	nop
 8000a92:	e7fd      	b.n	8000a90 <NMI_Handler+0x4>

08000a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a98:	bf00      	nop
 8000a9a:	e7fd      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	bf00      	nop
 8000aa2:	e7fd      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	bf00      	nop
 8000ab2:	e7fd      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr

08000ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000adc:	f000 f936 	bl	8000d4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return 1;
 8000ae8:	2301      	movs	r3, #1
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bc80      	pop	{r7}
 8000af0:	4770      	bx	lr

08000af2 <_kill>:

int _kill(int pid, int sig)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000afc:	f001 fa9a 	bl	8002034 <__errno>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2216      	movs	r2, #22
 8000b04:	601a      	str	r2, [r3, #0]
  return -1;
 8000b06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <_exit>:

void _exit (int status)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffe7 	bl	8000af2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <_exit+0x12>

08000b28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e00a      	b.n	8000b50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b3a:	f3af 8000 	nop.w
 8000b3e:	4601      	mov	r1, r0
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	b2ca      	uxtb	r2, r1
 8000b48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	dbf0      	blt.n	8000b3a <_read+0x12>
  }

  return len;
 8000b58:	687b      	ldr	r3, [r7, #4]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b086      	sub	sp, #24
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	60b9      	str	r1, [r7, #8]
 8000b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	e009      	b.n	8000b88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	3301      	adds	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	dbf1      	blt.n	8000b74 <_write+0x12>
  }
  return len;
 8000b90:	687b      	ldr	r3, [r7, #4]
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3718      	adds	r7, #24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <_close>:

int _close(int file)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	b083      	sub	sp, #12
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr

08000bb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bc0:	605a      	str	r2, [r3, #4]
  return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <_isatty>:

int _isatty(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bd6:	2301      	movs	r3, #1
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b085      	sub	sp, #20
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bee:	2300      	movs	r3, #0
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3714      	adds	r7, #20
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
	...

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	@ (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	@ (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f001 fa02 	bl	8002034 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	@ (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	@ (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20002800 	.word	0x20002800
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200000dc 	.word	0x200000dc
 8000c64:	20000230 	.word	0x20000230

08000c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c74:	f7ff fff8 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c7a:	490c      	ldr	r1, [pc, #48]	@ (8000cac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a09      	ldr	r2, [pc, #36]	@ (8000cb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c90:	4c09      	ldr	r4, [pc, #36]	@ (8000cb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9e:	f001 f9cf 	bl	8002040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca2:	f7ff fa8e 	bl	80001c2 <main>
  bx lr
 8000ca6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000cb0:	08002c74 	.word	0x08002c74
  ldr r2, =_sbss
 8000cb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000cb8:	20000230 	.word	0x20000230

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>
	...

08000cc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <HAL_Init+0x28>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a07      	ldr	r2, [pc, #28]	@ (8000ce8 <HAL_Init+0x28>)
 8000cca:	f043 0310 	orr.w	r3, r3, #16
 8000cce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f000 f92b 	bl	8000f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd6:	200f      	movs	r0, #15
 8000cd8:	f000 f808 	bl	8000cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cdc:	f7ff fe66 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_InitTick+0x54>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0x58>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f000 f935 	bl	8000f7a <HAL_SYSTICK_Config>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e00e      	b.n	8000d38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0f      	cmp	r3, #15
 8000d1e:	d80a      	bhi.n	8000d36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d20:	2200      	movs	r2, #0
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	f000 f90b 	bl	8000f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	@ (8000d48 <HAL_InitTick+0x5c>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d32:	2300      	movs	r3, #0
 8000d34:	e000      	b.n	8000d38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	20000000 	.word	0x20000000
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000004 	.word	0x20000004

08000d4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a03      	ldr	r2, [pc, #12]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200000e0 	.word	0x200000e0

08000d70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b02      	ldr	r3, [pc, #8]	@ (8000d80 <HAL_GetTick+0x10>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	200000e0 	.word	0x200000e0

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff fff0 	bl	8000d70 <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d005      	beq.n	8000daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc8 <HAL_Delay+0x44>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	461a      	mov	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000daa:	bf00      	nop
 8000dac:	f7ff ffe0 	bl	8000d70 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	68fa      	ldr	r2, [r7, #12]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d8f7      	bhi.n	8000dac <HAL_Delay+0x28>
  {
  }
}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000df8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfe:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	60d3      	str	r3, [r2, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db0a      	blt.n	8000e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	490c      	ldr	r1, [pc, #48]	@ (8000e7c <__NVIC_SetPriority+0x4c>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	0112      	lsls	r2, r2, #4
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	440b      	add	r3, r1
 8000e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e58:	e00a      	b.n	8000e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	b2da      	uxtb	r2, r3
 8000e5e:	4908      	ldr	r1, [pc, #32]	@ (8000e80 <__NVIC_SetPriority+0x50>)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f003 030f 	and.w	r3, r3, #15
 8000e66:	3b04      	subs	r3, #4
 8000e68:	0112      	lsls	r2, r2, #4
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	440b      	add	r3, r1
 8000e6e:	761a      	strb	r2, [r3, #24]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b089      	sub	sp, #36	@ 0x24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	69fb      	ldr	r3, [r7, #28]
 8000e9a:	f1c3 0307 	rsb	r3, r3, #7
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	bf28      	it	cs
 8000ea2:	2304      	movcs	r3, #4
 8000ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	2b06      	cmp	r3, #6
 8000eac:	d902      	bls.n	8000eb4 <NVIC_EncodePriority+0x30>
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3b03      	subs	r3, #3
 8000eb2:	e000      	b.n	8000eb6 <NVIC_EncodePriority+0x32>
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed6:	43d9      	mvns	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	4313      	orrs	r3, r2
         );
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3724      	adds	r7, #36	@ 0x24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef8:	d301      	bcc.n	8000efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efa:	2301      	movs	r3, #1
 8000efc:	e00f      	b.n	8000f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <SysTick_Config+0x40>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f06:	210f      	movs	r1, #15
 8000f08:	f04f 30ff 	mov.w	r0, #4294967295
 8000f0c:	f7ff ff90 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <SysTick_Config+0x40>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f16:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <SysTick_Config+0x40>)
 8000f18:	2207      	movs	r2, #7
 8000f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	e000e010 	.word	0xe000e010

08000f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ff49 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f54:	f7ff ff5e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	68b9      	ldr	r1, [r7, #8]
 8000f5e:	6978      	ldr	r0, [r7, #20]
 8000f60:	f7ff ff90 	bl	8000e84 <NVIC_EncodePriority>
 8000f64:	4602      	mov	r2, r0
 8000f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6a:	4611      	mov	r1, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff5f 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f72:	bf00      	nop
 8000f74:	3718      	adds	r7, #24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffb0 	bl	8000ee8 <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b08b      	sub	sp, #44	@ 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	e161      	b.n	800126c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	f040 8150 	bne.w	8001266 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	4a97      	ldr	r2, [pc, #604]	@ (8001228 <HAL_GPIO_Init+0x294>)
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	d05e      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fd0:	4a95      	ldr	r2, [pc, #596]	@ (8001228 <HAL_GPIO_Init+0x294>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d875      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fd6:	4a95      	ldr	r2, [pc, #596]	@ (800122c <HAL_GPIO_Init+0x298>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d058      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fdc:	4a93      	ldr	r2, [pc, #588]	@ (800122c <HAL_GPIO_Init+0x298>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d86f      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fe2:	4a93      	ldr	r2, [pc, #588]	@ (8001230 <HAL_GPIO_Init+0x29c>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d052      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000fe8:	4a91      	ldr	r2, [pc, #580]	@ (8001230 <HAL_GPIO_Init+0x29c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d869      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000fee:	4a91      	ldr	r2, [pc, #580]	@ (8001234 <HAL_GPIO_Init+0x2a0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d04c      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8000ff4:	4a8f      	ldr	r2, [pc, #572]	@ (8001234 <HAL_GPIO_Init+0x2a0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d863      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a8f      	ldr	r2, [pc, #572]	@ (8001238 <HAL_GPIO_Init+0x2a4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d046      	beq.n	800108e <HAL_GPIO_Init+0xfa>
 8001000:	4a8d      	ldr	r2, [pc, #564]	@ (8001238 <HAL_GPIO_Init+0x2a4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d85d      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 8001006:	2b12      	cmp	r3, #18
 8001008:	d82a      	bhi.n	8001060 <HAL_GPIO_Init+0xcc>
 800100a:	2b12      	cmp	r3, #18
 800100c:	d859      	bhi.n	80010c2 <HAL_GPIO_Init+0x12e>
 800100e:	a201      	add	r2, pc, #4	@ (adr r2, 8001014 <HAL_GPIO_Init+0x80>)
 8001010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001014:	0800108f 	.word	0x0800108f
 8001018:	08001069 	.word	0x08001069
 800101c:	0800107b 	.word	0x0800107b
 8001020:	080010bd 	.word	0x080010bd
 8001024:	080010c3 	.word	0x080010c3
 8001028:	080010c3 	.word	0x080010c3
 800102c:	080010c3 	.word	0x080010c3
 8001030:	080010c3 	.word	0x080010c3
 8001034:	080010c3 	.word	0x080010c3
 8001038:	080010c3 	.word	0x080010c3
 800103c:	080010c3 	.word	0x080010c3
 8001040:	080010c3 	.word	0x080010c3
 8001044:	080010c3 	.word	0x080010c3
 8001048:	080010c3 	.word	0x080010c3
 800104c:	080010c3 	.word	0x080010c3
 8001050:	080010c3 	.word	0x080010c3
 8001054:	080010c3 	.word	0x080010c3
 8001058:	08001071 	.word	0x08001071
 800105c:	08001085 	.word	0x08001085
 8001060:	4a76      	ldr	r2, [pc, #472]	@ (800123c <HAL_GPIO_Init+0x2a8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d013      	beq.n	800108e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001066:	e02c      	b.n	80010c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e029      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	3304      	adds	r3, #4
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e024      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	3308      	adds	r3, #8
 8001080:	623b      	str	r3, [r7, #32]
          break;
 8001082:	e01f      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	330c      	adds	r3, #12
 800108a:	623b      	str	r3, [r7, #32]
          break;
 800108c:	e01a      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d102      	bne.n	800109c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001096:	2304      	movs	r3, #4
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e013      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d105      	bne.n	80010b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a4:	2308      	movs	r3, #8
 80010a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	611a      	str	r2, [r3, #16]
          break;
 80010ae:	e009      	b.n	80010c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b0:	2308      	movs	r3, #8
 80010b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	615a      	str	r2, [r3, #20]
          break;
 80010ba:	e003      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
          break;
 80010c0:	e000      	b.n	80010c4 <HAL_GPIO_Init+0x130>
          break;
 80010c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2bff      	cmp	r3, #255	@ 0xff
 80010c8:	d801      	bhi.n	80010ce <HAL_GPIO_Init+0x13a>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	e001      	b.n	80010d2 <HAL_GPIO_Init+0x13e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3304      	adds	r3, #4
 80010d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	2bff      	cmp	r3, #255	@ 0xff
 80010d8:	d802      	bhi.n	80010e0 <HAL_GPIO_Init+0x14c>
 80010da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	e002      	b.n	80010e6 <HAL_GPIO_Init+0x152>
 80010e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e2:	3b08      	subs	r3, #8
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	210f      	movs	r1, #15
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	fa01 f303 	lsl.w	r3, r1, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	401a      	ands	r2, r3
 80010f8:	6a39      	ldr	r1, [r7, #32]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001100:	431a      	orrs	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800110e:	2b00      	cmp	r3, #0
 8001110:	f000 80a9 	beq.w	8001266 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001114:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <HAL_GPIO_Init+0x2ac>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a49      	ldr	r2, [pc, #292]	@ (8001240 <HAL_GPIO_Init+0x2ac>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <HAL_GPIO_Init+0x2ac>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800112c:	4a45      	ldr	r2, [pc, #276]	@ (8001244 <HAL_GPIO_Init+0x2b0>)
 800112e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a3d      	ldr	r2, [pc, #244]	@ (8001248 <HAL_GPIO_Init+0x2b4>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00d      	beq.n	8001174 <HAL_GPIO_Init+0x1e0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a3c      	ldr	r2, [pc, #240]	@ (800124c <HAL_GPIO_Init+0x2b8>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d007      	beq.n	8001170 <HAL_GPIO_Init+0x1dc>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a3b      	ldr	r2, [pc, #236]	@ (8001250 <HAL_GPIO_Init+0x2bc>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d101      	bne.n	800116c <HAL_GPIO_Init+0x1d8>
 8001168:	2302      	movs	r3, #2
 800116a:	e004      	b.n	8001176 <HAL_GPIO_Init+0x1e2>
 800116c:	2303      	movs	r3, #3
 800116e:	e002      	b.n	8001176 <HAL_GPIO_Init+0x1e2>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <HAL_GPIO_Init+0x1e2>
 8001174:	2300      	movs	r3, #0
 8001176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001178:	f002 0203 	and.w	r2, r2, #3
 800117c:	0092      	lsls	r2, r2, #2
 800117e:	4093      	lsls	r3, r2
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4313      	orrs	r3, r2
 8001184:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001186:	492f      	ldr	r1, [pc, #188]	@ (8001244 <HAL_GPIO_Init+0x2b0>)
 8001188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	492b      	ldr	r1, [pc, #172]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	608b      	str	r3, [r1, #8]
 80011ac:	e006      	b.n	80011bc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011ae:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	69bb      	ldr	r3, [r7, #24]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4927      	ldr	r1, [pc, #156]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011b8:	4013      	ands	r3, r2
 80011ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	4921      	ldr	r1, [pc, #132]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	60cb      	str	r3, [r1, #12]
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	43db      	mvns	r3, r3
 80011de:	491d      	ldr	r1, [pc, #116]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	4917      	ldr	r1, [pc, #92]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011fe:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	43db      	mvns	r3, r3
 8001206:	4913      	ldr	r1, [pc, #76]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 8001208:	4013      	ands	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d01f      	beq.n	8001258 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	490d      	ldr	r1, [pc, #52]	@ (8001254 <HAL_GPIO_Init+0x2c0>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e01f      	b.n	8001266 <HAL_GPIO_Init+0x2d2>
 8001226:	bf00      	nop
 8001228:	10320000 	.word	0x10320000
 800122c:	10310000 	.word	0x10310000
 8001230:	10220000 	.word	0x10220000
 8001234:	10210000 	.word	0x10210000
 8001238:	10120000 	.word	0x10120000
 800123c:	10110000 	.word	0x10110000
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000
 8001248:	40010800 	.word	0x40010800
 800124c:	40010c00 	.word	0x40010c00
 8001250:	40011000 	.word	0x40011000
 8001254:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <HAL_GPIO_Init+0x2f4>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	43db      	mvns	r3, r3
 8001260:	4909      	ldr	r1, [pc, #36]	@ (8001288 <HAL_GPIO_Init+0x2f4>)
 8001262:	4013      	ands	r3, r2
 8001264:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001268:	3301      	adds	r3, #1
 800126a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	f47f ae96 	bne.w	8000fa8 <HAL_GPIO_Init+0x14>
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	372c      	adds	r7, #44	@ 0x2c
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
 8001298:	4613      	mov	r3, r2
 800129a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800129c:	787b      	ldrb	r3, [r7, #1]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d003      	beq.n	80012aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012a2:	887a      	ldrh	r2, [r7, #2]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012a8:	e003      	b.n	80012b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012aa:	887b      	ldrh	r3, [r7, #2]
 80012ac:	041a      	lsls	r2, r3, #16
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	611a      	str	r2, [r3, #16]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e272      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8087 	beq.w	80013ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012dc:	4b92      	ldr	r3, [pc, #584]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 030c 	and.w	r3, r3, #12
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d00c      	beq.n	8001302 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 030c 	and.w	r3, r3, #12
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d112      	bne.n	800131a <HAL_RCC_OscConfig+0x5e>
 80012f4:	4b8c      	ldr	r3, [pc, #560]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001300:	d10b      	bne.n	800131a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001302:	4b89      	ldr	r3, [pc, #548]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d06c      	beq.n	80013e8 <HAL_RCC_OscConfig+0x12c>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d168      	bne.n	80013e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e24c      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001322:	d106      	bne.n	8001332 <HAL_RCC_OscConfig+0x76>
 8001324:	4b80      	ldr	r3, [pc, #512]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a7f      	ldr	r2, [pc, #508]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800132a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	e02e      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b7b      	ldr	r3, [pc, #492]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a7a      	ldr	r2, [pc, #488]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001340:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b78      	ldr	r3, [pc, #480]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a77      	ldr	r2, [pc, #476]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800134c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e01d      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0xbc>
 800135e:	4b72      	ldr	r3, [pc, #456]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a71      	ldr	r2, [pc, #452]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b6f      	ldr	r3, [pc, #444]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a6e      	ldr	r2, [pc, #440]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0xd4>
 8001378:	4b6b      	ldr	r3, [pc, #428]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a6a      	ldr	r2, [pc, #424]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800137e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	4b68      	ldr	r3, [pc, #416]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a67      	ldr	r2, [pc, #412]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d013      	beq.n	80013c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fcea 	bl	8000d70 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a0:	f7ff fce6 	bl	8000d70 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b64      	cmp	r3, #100	@ 0x64
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e200      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	4b5d      	ldr	r3, [pc, #372]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0f0      	beq.n	80013a0 <HAL_RCC_OscConfig+0xe4>
 80013be:	e014      	b.n	80013ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c0:	f7ff fcd6 	bl	8000d70 <HAL_GetTick>
 80013c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c8:	f7ff fcd2 	bl	8000d70 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b64      	cmp	r3, #100	@ 0x64
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e1ec      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d1f0      	bne.n	80013c8 <HAL_RCC_OscConfig+0x10c>
 80013e6:	e000      	b.n	80013ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f003 030c 	and.w	r3, r3, #12
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00b      	beq.n	800141a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001402:	4b49      	ldr	r3, [pc, #292]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	2b08      	cmp	r3, #8
 800140c:	d11c      	bne.n	8001448 <HAL_RCC_OscConfig+0x18c>
 800140e:	4b46      	ldr	r3, [pc, #280]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d116      	bne.n	8001448 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800141a:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d005      	beq.n	8001432 <HAL_RCC_OscConfig+0x176>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e1c0      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	4939      	ldr	r1, [pc, #228]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001446:	e03a      	b.n	80014be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d020      	beq.n	8001492 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001450:	4b36      	ldr	r3, [pc, #216]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fc8b 	bl	8000d70 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc87 	bl	8000d70 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e1a1      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b2d      	ldr	r3, [pc, #180]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147c:	4b2a      	ldr	r3, [pc, #168]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4927      	ldr	r1, [pc, #156]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 800148c:	4313      	orrs	r3, r2
 800148e:	600b      	str	r3, [r1, #0]
 8001490:	e015      	b.n	80014be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b26      	ldr	r3, [pc, #152]	@ (800152c <HAL_RCC_OscConfig+0x270>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fc6a 	bl	8000d70 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149e:	e008      	b.n	80014b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014a0:	f7ff fc66 	bl	8000d70 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d901      	bls.n	80014b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e180      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f003 0302 	and.w	r3, r3, #2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f0      	bne.n	80014a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d03a      	beq.n	8001540 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d019      	beq.n	8001506 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <HAL_RCC_OscConfig+0x274>)
 80014d4:	2201      	movs	r2, #1
 80014d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d8:	f7ff fc4a 	bl	8000d70 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fc46 	bl	8000d70 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e160      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001528 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014fe:	2001      	movs	r0, #1
 8001500:	f000 fa9e 	bl	8001a40 <RCC_Delay>
 8001504:	e01c      	b.n	8001540 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001506:	4b0a      	ldr	r3, [pc, #40]	@ (8001530 <HAL_RCC_OscConfig+0x274>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150c:	f7ff fc30 	bl	8000d70 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001512:	e00f      	b.n	8001534 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001514:	f7ff fc2c 	bl	8000d70 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d908      	bls.n	8001534 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e146      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
 8001526:	bf00      	nop
 8001528:	40021000 	.word	0x40021000
 800152c:	42420000 	.word	0x42420000
 8001530:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	4b92      	ldr	r3, [pc, #584]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e9      	bne.n	8001514 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 80a6 	beq.w	800169a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b8b      	ldr	r3, [pc, #556]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10d      	bne.n	800157a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	4b88      	ldr	r3, [pc, #544]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	4a87      	ldr	r2, [pc, #540]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001568:	61d3      	str	r3, [r2, #28]
 800156a:	4b85      	ldr	r3, [pc, #532]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001576:	2301      	movs	r3, #1
 8001578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157a:	4b82      	ldr	r3, [pc, #520]	@ (8001784 <HAL_RCC_OscConfig+0x4c8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001582:	2b00      	cmp	r3, #0
 8001584:	d118      	bne.n	80015b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001586:	4b7f      	ldr	r3, [pc, #508]	@ (8001784 <HAL_RCC_OscConfig+0x4c8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a7e      	ldr	r2, [pc, #504]	@ (8001784 <HAL_RCC_OscConfig+0x4c8>)
 800158c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001592:	f7ff fbed 	bl	8000d70 <HAL_GetTick>
 8001596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159a:	f7ff fbe9 	bl	8000d70 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	@ 0x64
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e103      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b75      	ldr	r3, [pc, #468]	@ (8001784 <HAL_RCC_OscConfig+0x4c8>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d106      	bne.n	80015ce <HAL_RCC_OscConfig+0x312>
 80015c0:	4b6f      	ldr	r3, [pc, #444]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	6a1b      	ldr	r3, [r3, #32]
 80015c4:	4a6e      	ldr	r2, [pc, #440]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6213      	str	r3, [r2, #32]
 80015cc:	e02d      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10c      	bne.n	80015f0 <HAL_RCC_OscConfig+0x334>
 80015d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a69      	ldr	r2, [pc, #420]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	4b67      	ldr	r3, [pc, #412]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a66      	ldr	r2, [pc, #408]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6213      	str	r3, [r2, #32]
 80015ee:	e01c      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b05      	cmp	r3, #5
 80015f6:	d10c      	bne.n	8001612 <HAL_RCC_OscConfig+0x356>
 80015f8:	4b61      	ldr	r3, [pc, #388]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a60      	ldr	r2, [pc, #384]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	f043 0304 	orr.w	r3, r3, #4
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	4b5e      	ldr	r3, [pc, #376]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4a5d      	ldr	r2, [pc, #372]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6213      	str	r3, [r2, #32]
 8001610:	e00b      	b.n	800162a <HAL_RCC_OscConfig+0x36e>
 8001612:	4b5b      	ldr	r3, [pc, #364]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a5a      	ldr	r2, [pc, #360]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	4b58      	ldr	r3, [pc, #352]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a57      	ldr	r2, [pc, #348]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d015      	beq.n	800165e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff fb9d 	bl	8000d70 <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001638:	e00a      	b.n	8001650 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800163a:	f7ff fb99 	bl	8000d70 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001648:	4293      	cmp	r3, r2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0b1      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	4b4b      	ldr	r3, [pc, #300]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ee      	beq.n	800163a <HAL_RCC_OscConfig+0x37e>
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fb87 	bl	8000d70 <HAL_GetTick>
 8001662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	e00a      	b.n	800167c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7ff fb83 	bl	8000d70 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001674:	4293      	cmp	r3, r2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e09b      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167c:	4b40      	ldr	r3, [pc, #256]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1ee      	bne.n	8001666 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001688:	7dfb      	ldrb	r3, [r7, #23]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d105      	bne.n	800169a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168e:	4b3c      	ldr	r3, [pc, #240]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	4a3b      	ldr	r2, [pc, #236]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001698:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8087 	beq.w	80017b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a4:	4b36      	ldr	r3, [pc, #216]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 030c 	and.w	r3, r3, #12
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d061      	beq.n	8001774 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d146      	bne.n	8001746 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b8:	4b33      	ldr	r3, [pc, #204]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff fb57 	bl	8000d70 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c6:	f7ff fb53 	bl	8000d70 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e06d      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ec:	d108      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016ee:	4b24      	ldr	r3, [pc, #144]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	4921      	ldr	r1, [pc, #132]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001700:	4b1f      	ldr	r3, [pc, #124]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a19      	ldr	r1, [r3, #32]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	430b      	orrs	r3, r1
 8001712:	491b      	ldr	r1, [pc, #108]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001718:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 800171a:	2201      	movs	r2, #1
 800171c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800171e:	f7ff fb27 	bl	8000d70 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001726:	f7ff fb23 	bl	8000d70 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e03d      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x46a>
 8001744:	e035      	b.n	80017b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001746:	4b10      	ldr	r3, [pc, #64]	@ (8001788 <HAL_RCC_OscConfig+0x4cc>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff fb10 	bl	8000d70 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001754:	f7ff fb0c 	bl	8000d70 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e026      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x498>
 8001772:	e01e      	b.n	80017b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d107      	bne.n	800178c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e019      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
 8001780:	40021000 	.word	0x40021000
 8001784:	40007000 	.word	0x40007000
 8001788:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800178c:	4b0b      	ldr	r3, [pc, #44]	@ (80017bc <HAL_RCC_OscConfig+0x500>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	429a      	cmp	r2, r3
 800179e:	d106      	bne.n	80017ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000

080017c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0d0      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017d4:	4b6a      	ldr	r3, [pc, #424]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0307 	and.w	r3, r3, #7
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d910      	bls.n	8001804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e2:	4b67      	ldr	r3, [pc, #412]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 0207 	bic.w	r2, r3, #7
 80017ea:	4965      	ldr	r1, [pc, #404]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f2:	4b63      	ldr	r3, [pc, #396]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d001      	beq.n	8001804 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0b8      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d020      	beq.n	8001852 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800181c:	4b59      	ldr	r3, [pc, #356]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4a58      	ldr	r2, [pc, #352]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001822:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001826:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0308 	and.w	r3, r3, #8
 8001830:	2b00      	cmp	r3, #0
 8001832:	d005      	beq.n	8001840 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001834:	4b53      	ldr	r3, [pc, #332]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	4a52      	ldr	r2, [pc, #328]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800183a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800183e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001840:	4b50      	ldr	r3, [pc, #320]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	494d      	ldr	r1, [pc, #308]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	d040      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001866:	4b47      	ldr	r3, [pc, #284]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d115      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e07f      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187e:	4b41      	ldr	r3, [pc, #260]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e073      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188e:	4b3d      	ldr	r3, [pc, #244]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d101      	bne.n	800189e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e06b      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800189e:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f023 0203 	bic.w	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4936      	ldr	r1, [pc, #216]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa5e 	bl	8000d70 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b8:	f7ff fa5a 	bl	8000d70 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e053      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 020c 	and.w	r2, r3, #12
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	429a      	cmp	r2, r3
 80018de:	d1eb      	bne.n	80018b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018e0:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d210      	bcs.n	8001910 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4922      	ldr	r1, [pc, #136]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b20      	ldr	r3, [pc, #128]	@ (8001980 <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e032      	b.n	8001976 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d008      	beq.n	800192e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	4916      	ldr	r1, [pc, #88]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	4313      	orrs	r3, r2
 800192c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d009      	beq.n	800194e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	490e      	ldr	r1, [pc, #56]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800194e:	f000 f821 	bl	8001994 <HAL_RCC_GetSysClockFreq>
 8001952:	4602      	mov	r2, r0
 8001954:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	091b      	lsrs	r3, r3, #4
 800195a:	f003 030f 	and.w	r3, r3, #15
 800195e:	490a      	ldr	r1, [pc, #40]	@ (8001988 <HAL_RCC_ClockConfig+0x1c8>)
 8001960:	5ccb      	ldrb	r3, [r1, r3]
 8001962:	fa22 f303 	lsr.w	r3, r2, r3
 8001966:	4a09      	ldr	r2, [pc, #36]	@ (800198c <HAL_RCC_ClockConfig+0x1cc>)
 8001968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RCC_ClockConfig+0x1d0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff f9bc 	bl	8000cec <HAL_InitTick>

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40022000 	.word	0x40022000
 8001984:	40021000 	.word	0x40021000
 8001988:	08002b6c 	.word	0x08002b6c
 800198c:	20000000 	.word	0x20000000
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d002      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x30>
 80019be:	2b08      	cmp	r3, #8
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x36>
 80019c2:	e027      	b.n	8001a14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80019c6:	613b      	str	r3, [r7, #16]
      break;
 80019c8:	e027      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	0c9b      	lsrs	r3, r3, #18
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	4a17      	ldr	r2, [pc, #92]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d010      	beq.n	8001a04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	0c5b      	lsrs	r3, r3, #17
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	4a11      	ldr	r2, [pc, #68]	@ (8001a34 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019ee:	5cd3      	ldrb	r3, [r2, r3]
 80019f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a0d      	ldr	r2, [pc, #52]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80019f6:	fb03 f202 	mul.w	r2, r3, r2
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e004      	b.n	8001a0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a0c      	ldr	r2, [pc, #48]	@ (8001a38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	613b      	str	r3, [r7, #16]
      break;
 8001a12:	e002      	b.n	8001a1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a16:	613b      	str	r3, [r7, #16]
      break;
 8001a18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1a:	693b      	ldr	r3, [r7, #16]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	00b71b00 	.word	0x00b71b00
 8001a30:	08002b7c 	.word	0x08002b7c
 8001a34:	08002b8c 	.word	0x08002b8c
 8001a38:	003d0900 	.word	0x003d0900
 8001a3c:	007a1200 	.word	0x007a1200

08001a40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a48:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <RCC_Delay+0x34>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <RCC_Delay+0x38>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0a5b      	lsrs	r3, r3, #9
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a5c:	bf00      	nop
  }
  while (Delay --);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1e5a      	subs	r2, r3, #1
 8001a62:	60fa      	str	r2, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f9      	bne.n	8001a5c <RCC_Delay+0x1c>
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	20000000 	.word	0x20000000
 8001a78:	10624dd3 	.word	0x10624dd3

08001a7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e076      	b.n	8001b7c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d108      	bne.n	8001aa8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001a9e:	d009      	beq.n	8001ab4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	61da      	str	r2, [r3, #28]
 8001aa6:	e005      	b.n	8001ab4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe ff9e 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001aea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	431a      	orrs	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b38:	ea42 0103 	orr.w	r1, r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	0c1a      	lsrs	r2, r3, #16
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f002 0204 	and.w	r2, r2, #4
 8001b5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	69da      	ldr	r2, [r3, #28]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <malloc>:
 8001b84:	4b02      	ldr	r3, [pc, #8]	@ (8001b90 <malloc+0xc>)
 8001b86:	4601      	mov	r1, r0
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	f000 b825 	b.w	8001bd8 <_malloc_r>
 8001b8e:	bf00      	nop
 8001b90:	20000018 	.word	0x20000018

08001b94 <sbrk_aligned>:
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	4e0f      	ldr	r6, [pc, #60]	@ (8001bd4 <sbrk_aligned+0x40>)
 8001b98:	460c      	mov	r4, r1
 8001b9a:	6831      	ldr	r1, [r6, #0]
 8001b9c:	4605      	mov	r5, r0
 8001b9e:	b911      	cbnz	r1, 8001ba6 <sbrk_aligned+0x12>
 8001ba0:	f000 fa26 	bl	8001ff0 <_sbrk_r>
 8001ba4:	6030      	str	r0, [r6, #0]
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	4628      	mov	r0, r5
 8001baa:	f000 fa21 	bl	8001ff0 <_sbrk_r>
 8001bae:	1c43      	adds	r3, r0, #1
 8001bb0:	d103      	bne.n	8001bba <sbrk_aligned+0x26>
 8001bb2:	f04f 34ff 	mov.w	r4, #4294967295
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	1cc4      	adds	r4, r0, #3
 8001bbc:	f024 0403 	bic.w	r4, r4, #3
 8001bc0:	42a0      	cmp	r0, r4
 8001bc2:	d0f8      	beq.n	8001bb6 <sbrk_aligned+0x22>
 8001bc4:	1a21      	subs	r1, r4, r0
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	f000 fa12 	bl	8001ff0 <_sbrk_r>
 8001bcc:	3001      	adds	r0, #1
 8001bce:	d1f2      	bne.n	8001bb6 <sbrk_aligned+0x22>
 8001bd0:	e7ef      	b.n	8001bb2 <sbrk_aligned+0x1e>
 8001bd2:	bf00      	nop
 8001bd4:	200000e4 	.word	0x200000e4

08001bd8 <_malloc_r>:
 8001bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bdc:	1ccd      	adds	r5, r1, #3
 8001bde:	f025 0503 	bic.w	r5, r5, #3
 8001be2:	3508      	adds	r5, #8
 8001be4:	2d0c      	cmp	r5, #12
 8001be6:	bf38      	it	cc
 8001be8:	250c      	movcc	r5, #12
 8001bea:	2d00      	cmp	r5, #0
 8001bec:	4606      	mov	r6, r0
 8001bee:	db01      	blt.n	8001bf4 <_malloc_r+0x1c>
 8001bf0:	42a9      	cmp	r1, r5
 8001bf2:	d904      	bls.n	8001bfe <_malloc_r+0x26>
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	6033      	str	r3, [r6, #0]
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bfe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001cd4 <_malloc_r+0xfc>
 8001c02:	f000 f869 	bl	8001cd8 <__malloc_lock>
 8001c06:	f8d8 3000 	ldr.w	r3, [r8]
 8001c0a:	461c      	mov	r4, r3
 8001c0c:	bb44      	cbnz	r4, 8001c60 <_malloc_r+0x88>
 8001c0e:	4629      	mov	r1, r5
 8001c10:	4630      	mov	r0, r6
 8001c12:	f7ff ffbf 	bl	8001b94 <sbrk_aligned>
 8001c16:	1c43      	adds	r3, r0, #1
 8001c18:	4604      	mov	r4, r0
 8001c1a:	d158      	bne.n	8001cce <_malloc_r+0xf6>
 8001c1c:	f8d8 4000 	ldr.w	r4, [r8]
 8001c20:	4627      	mov	r7, r4
 8001c22:	2f00      	cmp	r7, #0
 8001c24:	d143      	bne.n	8001cae <_malloc_r+0xd6>
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	d04b      	beq.n	8001cc2 <_malloc_r+0xea>
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	4639      	mov	r1, r7
 8001c2e:	4630      	mov	r0, r6
 8001c30:	eb04 0903 	add.w	r9, r4, r3
 8001c34:	f000 f9dc 	bl	8001ff0 <_sbrk_r>
 8001c38:	4581      	cmp	r9, r0
 8001c3a:	d142      	bne.n	8001cc2 <_malloc_r+0xea>
 8001c3c:	6821      	ldr	r1, [r4, #0]
 8001c3e:	4630      	mov	r0, r6
 8001c40:	1a6d      	subs	r5, r5, r1
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7ff ffa6 	bl	8001b94 <sbrk_aligned>
 8001c48:	3001      	adds	r0, #1
 8001c4a:	d03a      	beq.n	8001cc2 <_malloc_r+0xea>
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	442b      	add	r3, r5
 8001c50:	6023      	str	r3, [r4, #0]
 8001c52:	f8d8 3000 	ldr.w	r3, [r8]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	bb62      	cbnz	r2, 8001cb4 <_malloc_r+0xdc>
 8001c5a:	f8c8 7000 	str.w	r7, [r8]
 8001c5e:	e00f      	b.n	8001c80 <_malloc_r+0xa8>
 8001c60:	6822      	ldr	r2, [r4, #0]
 8001c62:	1b52      	subs	r2, r2, r5
 8001c64:	d420      	bmi.n	8001ca8 <_malloc_r+0xd0>
 8001c66:	2a0b      	cmp	r2, #11
 8001c68:	d917      	bls.n	8001c9a <_malloc_r+0xc2>
 8001c6a:	1961      	adds	r1, r4, r5
 8001c6c:	42a3      	cmp	r3, r4
 8001c6e:	6025      	str	r5, [r4, #0]
 8001c70:	bf18      	it	ne
 8001c72:	6059      	strne	r1, [r3, #4]
 8001c74:	6863      	ldr	r3, [r4, #4]
 8001c76:	bf08      	it	eq
 8001c78:	f8c8 1000 	streq.w	r1, [r8]
 8001c7c:	5162      	str	r2, [r4, r5]
 8001c7e:	604b      	str	r3, [r1, #4]
 8001c80:	4630      	mov	r0, r6
 8001c82:	f000 f82f 	bl	8001ce4 <__malloc_unlock>
 8001c86:	f104 000b 	add.w	r0, r4, #11
 8001c8a:	1d23      	adds	r3, r4, #4
 8001c8c:	f020 0007 	bic.w	r0, r0, #7
 8001c90:	1ac2      	subs	r2, r0, r3
 8001c92:	bf1c      	itt	ne
 8001c94:	1a1b      	subne	r3, r3, r0
 8001c96:	50a3      	strne	r3, [r4, r2]
 8001c98:	e7af      	b.n	8001bfa <_malloc_r+0x22>
 8001c9a:	6862      	ldr	r2, [r4, #4]
 8001c9c:	42a3      	cmp	r3, r4
 8001c9e:	bf0c      	ite	eq
 8001ca0:	f8c8 2000 	streq.w	r2, [r8]
 8001ca4:	605a      	strne	r2, [r3, #4]
 8001ca6:	e7eb      	b.n	8001c80 <_malloc_r+0xa8>
 8001ca8:	4623      	mov	r3, r4
 8001caa:	6864      	ldr	r4, [r4, #4]
 8001cac:	e7ae      	b.n	8001c0c <_malloc_r+0x34>
 8001cae:	463c      	mov	r4, r7
 8001cb0:	687f      	ldr	r7, [r7, #4]
 8001cb2:	e7b6      	b.n	8001c22 <_malloc_r+0x4a>
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	42a3      	cmp	r3, r4
 8001cba:	d1fb      	bne.n	8001cb4 <_malloc_r+0xdc>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	6053      	str	r3, [r2, #4]
 8001cc0:	e7de      	b.n	8001c80 <_malloc_r+0xa8>
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	4630      	mov	r0, r6
 8001cc6:	6033      	str	r3, [r6, #0]
 8001cc8:	f000 f80c 	bl	8001ce4 <__malloc_unlock>
 8001ccc:	e794      	b.n	8001bf8 <_malloc_r+0x20>
 8001cce:	6005      	str	r5, [r0, #0]
 8001cd0:	e7d6      	b.n	8001c80 <_malloc_r+0xa8>
 8001cd2:	bf00      	nop
 8001cd4:	200000e8 	.word	0x200000e8

08001cd8 <__malloc_lock>:
 8001cd8:	4801      	ldr	r0, [pc, #4]	@ (8001ce0 <__malloc_lock+0x8>)
 8001cda:	f000 b9d6 	b.w	800208a <__retarget_lock_acquire_recursive>
 8001cde:	bf00      	nop
 8001ce0:	2000022c 	.word	0x2000022c

08001ce4 <__malloc_unlock>:
 8001ce4:	4801      	ldr	r0, [pc, #4]	@ (8001cec <__malloc_unlock+0x8>)
 8001ce6:	f000 b9d1 	b.w	800208c <__retarget_lock_release_recursive>
 8001cea:	bf00      	nop
 8001cec:	2000022c 	.word	0x2000022c

08001cf0 <rand>:
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <rand+0x5c>)
 8001cf2:	b510      	push	{r4, lr}
 8001cf4:	681c      	ldr	r4, [r3, #0]
 8001cf6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001cf8:	b9b3      	cbnz	r3, 8001d28 <rand+0x38>
 8001cfa:	2018      	movs	r0, #24
 8001cfc:	f7ff ff42 	bl	8001b84 <malloc>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6320      	str	r0, [r4, #48]	@ 0x30
 8001d04:	b920      	cbnz	r0, 8001d10 <rand+0x20>
 8001d06:	2152      	movs	r1, #82	@ 0x52
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <rand+0x60>)
 8001d0a:	4812      	ldr	r0, [pc, #72]	@ (8001d54 <rand+0x64>)
 8001d0c:	f000 f9c0 	bl	8002090 <__assert_func>
 8001d10:	4911      	ldr	r1, [pc, #68]	@ (8001d58 <rand+0x68>)
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <rand+0x6c>)
 8001d14:	e9c0 1300 	strd	r1, r3, [r0]
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <rand+0x70>)
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	6083      	str	r3, [r0, #8]
 8001d1e:	230b      	movs	r3, #11
 8001d20:	8183      	strh	r3, [r0, #12]
 8001d22:	2001      	movs	r0, #1
 8001d24:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001d28:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001d2a:	480e      	ldr	r0, [pc, #56]	@ (8001d64 <rand+0x74>)
 8001d2c:	690b      	ldr	r3, [r1, #16]
 8001d2e:	694c      	ldr	r4, [r1, #20]
 8001d30:	4358      	muls	r0, r3
 8001d32:	4a0d      	ldr	r2, [pc, #52]	@ (8001d68 <rand+0x78>)
 8001d34:	fb02 0004 	mla	r0, r2, r4, r0
 8001d38:	fba3 3202 	umull	r3, r2, r3, r2
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	eb40 0002 	adc.w	r0, r0, r2
 8001d42:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001d46:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001d4a:	bd10      	pop	{r4, pc}
 8001d4c:	20000018 	.word	0x20000018
 8001d50:	08002b8e 	.word	0x08002b8e
 8001d54:	08002ba5 	.word	0x08002ba5
 8001d58:	abcd330e 	.word	0xabcd330e
 8001d5c:	e66d1234 	.word	0xe66d1234
 8001d60:	0005deec 	.word	0x0005deec
 8001d64:	5851f42d 	.word	0x5851f42d
 8001d68:	4c957f2d 	.word	0x4c957f2d

08001d6c <std>:
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	b510      	push	{r4, lr}
 8001d70:	4604      	mov	r4, r0
 8001d72:	e9c0 3300 	strd	r3, r3, [r0]
 8001d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d7a:	6083      	str	r3, [r0, #8]
 8001d7c:	8181      	strh	r1, [r0, #12]
 8001d7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001d80:	81c2      	strh	r2, [r0, #14]
 8001d82:	6183      	str	r3, [r0, #24]
 8001d84:	4619      	mov	r1, r3
 8001d86:	2208      	movs	r2, #8
 8001d88:	305c      	adds	r0, #92	@ 0x5c
 8001d8a:	f000 f8f4 	bl	8001f76 <memset>
 8001d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc4 <std+0x58>)
 8001d90:	6224      	str	r4, [r4, #32]
 8001d92:	6263      	str	r3, [r4, #36]	@ 0x24
 8001d94:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc8 <std+0x5c>)
 8001d96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <std+0x60>)
 8001d9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd0 <std+0x64>)
 8001d9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <std+0x68>)
 8001da2:	429c      	cmp	r4, r3
 8001da4:	d006      	beq.n	8001db4 <std+0x48>
 8001da6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001daa:	4294      	cmp	r4, r2
 8001dac:	d002      	beq.n	8001db4 <std+0x48>
 8001dae:	33d0      	adds	r3, #208	@ 0xd0
 8001db0:	429c      	cmp	r4, r3
 8001db2:	d105      	bne.n	8001dc0 <std+0x54>
 8001db4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001dbc:	f000 b964 	b.w	8002088 <__retarget_lock_init_recursive>
 8001dc0:	bd10      	pop	{r4, pc}
 8001dc2:	bf00      	nop
 8001dc4:	08001ef1 	.word	0x08001ef1
 8001dc8:	08001f13 	.word	0x08001f13
 8001dcc:	08001f4b 	.word	0x08001f4b
 8001dd0:	08001f6f 	.word	0x08001f6f
 8001dd4:	200000ec 	.word	0x200000ec

08001dd8 <stdio_exit_handler>:
 8001dd8:	4a02      	ldr	r2, [pc, #8]	@ (8001de4 <stdio_exit_handler+0xc>)
 8001dda:	4903      	ldr	r1, [pc, #12]	@ (8001de8 <stdio_exit_handler+0x10>)
 8001ddc:	4803      	ldr	r0, [pc, #12]	@ (8001dec <stdio_exit_handler+0x14>)
 8001dde:	f000 b869 	b.w	8001eb4 <_fwalk_sglue>
 8001de2:	bf00      	nop
 8001de4:	2000000c 	.word	0x2000000c
 8001de8:	0800225d 	.word	0x0800225d
 8001dec:	2000001c 	.word	0x2000001c

08001df0 <cleanup_stdio>:
 8001df0:	6841      	ldr	r1, [r0, #4]
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <cleanup_stdio+0x34>)
 8001df4:	b510      	push	{r4, lr}
 8001df6:	4299      	cmp	r1, r3
 8001df8:	4604      	mov	r4, r0
 8001dfa:	d001      	beq.n	8001e00 <cleanup_stdio+0x10>
 8001dfc:	f000 fa2e 	bl	800225c <_fflush_r>
 8001e00:	68a1      	ldr	r1, [r4, #8]
 8001e02:	4b09      	ldr	r3, [pc, #36]	@ (8001e28 <cleanup_stdio+0x38>)
 8001e04:	4299      	cmp	r1, r3
 8001e06:	d002      	beq.n	8001e0e <cleanup_stdio+0x1e>
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f000 fa27 	bl	800225c <_fflush_r>
 8001e0e:	68e1      	ldr	r1, [r4, #12]
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <cleanup_stdio+0x3c>)
 8001e12:	4299      	cmp	r1, r3
 8001e14:	d004      	beq.n	8001e20 <cleanup_stdio+0x30>
 8001e16:	4620      	mov	r0, r4
 8001e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e1c:	f000 ba1e 	b.w	800225c <_fflush_r>
 8001e20:	bd10      	pop	{r4, pc}
 8001e22:	bf00      	nop
 8001e24:	200000ec 	.word	0x200000ec
 8001e28:	20000154 	.word	0x20000154
 8001e2c:	200001bc 	.word	0x200001bc

08001e30 <global_stdio_init.part.0>:
 8001e30:	b510      	push	{r4, lr}
 8001e32:	4b0b      	ldr	r3, [pc, #44]	@ (8001e60 <global_stdio_init.part.0+0x30>)
 8001e34:	4c0b      	ldr	r4, [pc, #44]	@ (8001e64 <global_stdio_init.part.0+0x34>)
 8001e36:	4a0c      	ldr	r2, [pc, #48]	@ (8001e68 <global_stdio_init.part.0+0x38>)
 8001e38:	4620      	mov	r0, r4
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f7ff ff94 	bl	8001d6c <std>
 8001e44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2109      	movs	r1, #9
 8001e4c:	f7ff ff8e 	bl	8001d6c <std>
 8001e50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001e54:	2202      	movs	r2, #2
 8001e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e5a:	2112      	movs	r1, #18
 8001e5c:	f7ff bf86 	b.w	8001d6c <std>
 8001e60:	20000224 	.word	0x20000224
 8001e64:	200000ec 	.word	0x200000ec
 8001e68:	08001dd9 	.word	0x08001dd9

08001e6c <__sfp_lock_acquire>:
 8001e6c:	4801      	ldr	r0, [pc, #4]	@ (8001e74 <__sfp_lock_acquire+0x8>)
 8001e6e:	f000 b90c 	b.w	800208a <__retarget_lock_acquire_recursive>
 8001e72:	bf00      	nop
 8001e74:	2000022d 	.word	0x2000022d

08001e78 <__sfp_lock_release>:
 8001e78:	4801      	ldr	r0, [pc, #4]	@ (8001e80 <__sfp_lock_release+0x8>)
 8001e7a:	f000 b907 	b.w	800208c <__retarget_lock_release_recursive>
 8001e7e:	bf00      	nop
 8001e80:	2000022d 	.word	0x2000022d

08001e84 <__sinit>:
 8001e84:	b510      	push	{r4, lr}
 8001e86:	4604      	mov	r4, r0
 8001e88:	f7ff fff0 	bl	8001e6c <__sfp_lock_acquire>
 8001e8c:	6a23      	ldr	r3, [r4, #32]
 8001e8e:	b11b      	cbz	r3, 8001e98 <__sinit+0x14>
 8001e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e94:	f7ff bff0 	b.w	8001e78 <__sfp_lock_release>
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <__sinit+0x28>)
 8001e9a:	6223      	str	r3, [r4, #32]
 8001e9c:	4b04      	ldr	r3, [pc, #16]	@ (8001eb0 <__sinit+0x2c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f5      	bne.n	8001e90 <__sinit+0xc>
 8001ea4:	f7ff ffc4 	bl	8001e30 <global_stdio_init.part.0>
 8001ea8:	e7f2      	b.n	8001e90 <__sinit+0xc>
 8001eaa:	bf00      	nop
 8001eac:	08001df1 	.word	0x08001df1
 8001eb0:	20000224 	.word	0x20000224

08001eb4 <_fwalk_sglue>:
 8001eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eb8:	4607      	mov	r7, r0
 8001eba:	4688      	mov	r8, r1
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	2600      	movs	r6, #0
 8001ec0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001ec4:	f1b9 0901 	subs.w	r9, r9, #1
 8001ec8:	d505      	bpl.n	8001ed6 <_fwalk_sglue+0x22>
 8001eca:	6824      	ldr	r4, [r4, #0]
 8001ecc:	2c00      	cmp	r4, #0
 8001ece:	d1f7      	bne.n	8001ec0 <_fwalk_sglue+0xc>
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ed6:	89ab      	ldrh	r3, [r5, #12]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d907      	bls.n	8001eec <_fwalk_sglue+0x38>
 8001edc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	d003      	beq.n	8001eec <_fwalk_sglue+0x38>
 8001ee4:	4629      	mov	r1, r5
 8001ee6:	4638      	mov	r0, r7
 8001ee8:	47c0      	blx	r8
 8001eea:	4306      	orrs	r6, r0
 8001eec:	3568      	adds	r5, #104	@ 0x68
 8001eee:	e7e9      	b.n	8001ec4 <_fwalk_sglue+0x10>

08001ef0 <__sread>:
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef8:	f000 f868 	bl	8001fcc <_read_r>
 8001efc:	2800      	cmp	r0, #0
 8001efe:	bfab      	itete	ge
 8001f00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001f02:	89a3      	ldrhlt	r3, [r4, #12]
 8001f04:	181b      	addge	r3, r3, r0
 8001f06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001f0a:	bfac      	ite	ge
 8001f0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001f0e:	81a3      	strhlt	r3, [r4, #12]
 8001f10:	bd10      	pop	{r4, pc}

08001f12 <__swrite>:
 8001f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f16:	461f      	mov	r7, r3
 8001f18:	898b      	ldrh	r3, [r1, #12]
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	05db      	lsls	r3, r3, #23
 8001f1e:	460c      	mov	r4, r1
 8001f20:	4616      	mov	r6, r2
 8001f22:	d505      	bpl.n	8001f30 <__swrite+0x1e>
 8001f24:	2302      	movs	r3, #2
 8001f26:	2200      	movs	r2, #0
 8001f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f2c:	f000 f83c 	bl	8001fa8 <_lseek_r>
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	4632      	mov	r2, r6
 8001f34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f38:	81a3      	strh	r3, [r4, #12]
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f46:	f000 b863 	b.w	8002010 <_write_r>

08001f4a <__sseek>:
 8001f4a:	b510      	push	{r4, lr}
 8001f4c:	460c      	mov	r4, r1
 8001f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f52:	f000 f829 	bl	8001fa8 <_lseek_r>
 8001f56:	1c43      	adds	r3, r0, #1
 8001f58:	89a3      	ldrh	r3, [r4, #12]
 8001f5a:	bf15      	itete	ne
 8001f5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001f5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001f62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001f66:	81a3      	strheq	r3, [r4, #12]
 8001f68:	bf18      	it	ne
 8001f6a:	81a3      	strhne	r3, [r4, #12]
 8001f6c:	bd10      	pop	{r4, pc}

08001f6e <__sclose>:
 8001f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f72:	f000 b809 	b.w	8001f88 <_close_r>

08001f76 <memset>:
 8001f76:	4603      	mov	r3, r0
 8001f78:	4402      	add	r2, r0
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d100      	bne.n	8001f80 <memset+0xa>
 8001f7e:	4770      	bx	lr
 8001f80:	f803 1b01 	strb.w	r1, [r3], #1
 8001f84:	e7f9      	b.n	8001f7a <memset+0x4>
	...

08001f88 <_close_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	4d05      	ldr	r5, [pc, #20]	@ (8001fa4 <_close_r+0x1c>)
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	602b      	str	r3, [r5, #0]
 8001f94:	f7fe fe01 	bl	8000b9a <_close>
 8001f98:	1c43      	adds	r3, r0, #1
 8001f9a:	d102      	bne.n	8001fa2 <_close_r+0x1a>
 8001f9c:	682b      	ldr	r3, [r5, #0]
 8001f9e:	b103      	cbz	r3, 8001fa2 <_close_r+0x1a>
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
 8001fa4:	20000228 	.word	0x20000228

08001fa8 <_lseek_r>:
 8001fa8:	b538      	push	{r3, r4, r5, lr}
 8001faa:	4604      	mov	r4, r0
 8001fac:	4608      	mov	r0, r1
 8001fae:	4611      	mov	r1, r2
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	4d05      	ldr	r5, [pc, #20]	@ (8001fc8 <_lseek_r+0x20>)
 8001fb4:	602a      	str	r2, [r5, #0]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f7fe fe13 	bl	8000be2 <_lseek>
 8001fbc:	1c43      	adds	r3, r0, #1
 8001fbe:	d102      	bne.n	8001fc6 <_lseek_r+0x1e>
 8001fc0:	682b      	ldr	r3, [r5, #0]
 8001fc2:	b103      	cbz	r3, 8001fc6 <_lseek_r+0x1e>
 8001fc4:	6023      	str	r3, [r4, #0]
 8001fc6:	bd38      	pop	{r3, r4, r5, pc}
 8001fc8:	20000228 	.word	0x20000228

08001fcc <_read_r>:
 8001fcc:	b538      	push	{r3, r4, r5, lr}
 8001fce:	4604      	mov	r4, r0
 8001fd0:	4608      	mov	r0, r1
 8001fd2:	4611      	mov	r1, r2
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4d05      	ldr	r5, [pc, #20]	@ (8001fec <_read_r+0x20>)
 8001fd8:	602a      	str	r2, [r5, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f7fe fda4 	bl	8000b28 <_read>
 8001fe0:	1c43      	adds	r3, r0, #1
 8001fe2:	d102      	bne.n	8001fea <_read_r+0x1e>
 8001fe4:	682b      	ldr	r3, [r5, #0]
 8001fe6:	b103      	cbz	r3, 8001fea <_read_r+0x1e>
 8001fe8:	6023      	str	r3, [r4, #0]
 8001fea:	bd38      	pop	{r3, r4, r5, pc}
 8001fec:	20000228 	.word	0x20000228

08001ff0 <_sbrk_r>:
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	4d05      	ldr	r5, [pc, #20]	@ (800200c <_sbrk_r+0x1c>)
 8001ff6:	4604      	mov	r4, r0
 8001ff8:	4608      	mov	r0, r1
 8001ffa:	602b      	str	r3, [r5, #0]
 8001ffc:	f7fe fdfe 	bl	8000bfc <_sbrk>
 8002000:	1c43      	adds	r3, r0, #1
 8002002:	d102      	bne.n	800200a <_sbrk_r+0x1a>
 8002004:	682b      	ldr	r3, [r5, #0]
 8002006:	b103      	cbz	r3, 800200a <_sbrk_r+0x1a>
 8002008:	6023      	str	r3, [r4, #0]
 800200a:	bd38      	pop	{r3, r4, r5, pc}
 800200c:	20000228 	.word	0x20000228

08002010 <_write_r>:
 8002010:	b538      	push	{r3, r4, r5, lr}
 8002012:	4604      	mov	r4, r0
 8002014:	4608      	mov	r0, r1
 8002016:	4611      	mov	r1, r2
 8002018:	2200      	movs	r2, #0
 800201a:	4d05      	ldr	r5, [pc, #20]	@ (8002030 <_write_r+0x20>)
 800201c:	602a      	str	r2, [r5, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	f7fe fd9f 	bl	8000b62 <_write>
 8002024:	1c43      	adds	r3, r0, #1
 8002026:	d102      	bne.n	800202e <_write_r+0x1e>
 8002028:	682b      	ldr	r3, [r5, #0]
 800202a:	b103      	cbz	r3, 800202e <_write_r+0x1e>
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	bd38      	pop	{r3, r4, r5, pc}
 8002030:	20000228 	.word	0x20000228

08002034 <__errno>:
 8002034:	4b01      	ldr	r3, [pc, #4]	@ (800203c <__errno+0x8>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000018 	.word	0x20000018

08002040 <__libc_init_array>:
 8002040:	b570      	push	{r4, r5, r6, lr}
 8002042:	2600      	movs	r6, #0
 8002044:	4d0c      	ldr	r5, [pc, #48]	@ (8002078 <__libc_init_array+0x38>)
 8002046:	4c0d      	ldr	r4, [pc, #52]	@ (800207c <__libc_init_array+0x3c>)
 8002048:	1b64      	subs	r4, r4, r5
 800204a:	10a4      	asrs	r4, r4, #2
 800204c:	42a6      	cmp	r6, r4
 800204e:	d109      	bne.n	8002064 <__libc_init_array+0x24>
 8002050:	f000 fd80 	bl	8002b54 <_init>
 8002054:	2600      	movs	r6, #0
 8002056:	4d0a      	ldr	r5, [pc, #40]	@ (8002080 <__libc_init_array+0x40>)
 8002058:	4c0a      	ldr	r4, [pc, #40]	@ (8002084 <__libc_init_array+0x44>)
 800205a:	1b64      	subs	r4, r4, r5
 800205c:	10a4      	asrs	r4, r4, #2
 800205e:	42a6      	cmp	r6, r4
 8002060:	d105      	bne.n	800206e <__libc_init_array+0x2e>
 8002062:	bd70      	pop	{r4, r5, r6, pc}
 8002064:	f855 3b04 	ldr.w	r3, [r5], #4
 8002068:	4798      	blx	r3
 800206a:	3601      	adds	r6, #1
 800206c:	e7ee      	b.n	800204c <__libc_init_array+0xc>
 800206e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002072:	4798      	blx	r3
 8002074:	3601      	adds	r6, #1
 8002076:	e7f2      	b.n	800205e <__libc_init_array+0x1e>
 8002078:	08002c6c 	.word	0x08002c6c
 800207c:	08002c6c 	.word	0x08002c6c
 8002080:	08002c6c 	.word	0x08002c6c
 8002084:	08002c70 	.word	0x08002c70

08002088 <__retarget_lock_init_recursive>:
 8002088:	4770      	bx	lr

0800208a <__retarget_lock_acquire_recursive>:
 800208a:	4770      	bx	lr

0800208c <__retarget_lock_release_recursive>:
 800208c:	4770      	bx	lr
	...

08002090 <__assert_func>:
 8002090:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002092:	4614      	mov	r4, r2
 8002094:	461a      	mov	r2, r3
 8002096:	4b09      	ldr	r3, [pc, #36]	@ (80020bc <__assert_func+0x2c>)
 8002098:	4605      	mov	r5, r0
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68d8      	ldr	r0, [r3, #12]
 800209e:	b954      	cbnz	r4, 80020b6 <__assert_func+0x26>
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <__assert_func+0x30>)
 80020a2:	461c      	mov	r4, r3
 80020a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80020a8:	9100      	str	r1, [sp, #0]
 80020aa:	462b      	mov	r3, r5
 80020ac:	4905      	ldr	r1, [pc, #20]	@ (80020c4 <__assert_func+0x34>)
 80020ae:	f000 f8fd 	bl	80022ac <fiprintf>
 80020b2:	f000 f90d 	bl	80022d0 <abort>
 80020b6:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <__assert_func+0x38>)
 80020b8:	e7f4      	b.n	80020a4 <__assert_func+0x14>
 80020ba:	bf00      	nop
 80020bc:	20000018 	.word	0x20000018
 80020c0:	08002c38 	.word	0x08002c38
 80020c4:	08002c0a 	.word	0x08002c0a
 80020c8:	08002bfd 	.word	0x08002bfd

080020cc <_free_r>:
 80020cc:	b538      	push	{r3, r4, r5, lr}
 80020ce:	4605      	mov	r5, r0
 80020d0:	2900      	cmp	r1, #0
 80020d2:	d040      	beq.n	8002156 <_free_r+0x8a>
 80020d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020d8:	1f0c      	subs	r4, r1, #4
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bfb8      	it	lt
 80020de:	18e4      	addlt	r4, r4, r3
 80020e0:	f7ff fdfa 	bl	8001cd8 <__malloc_lock>
 80020e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002158 <_free_r+0x8c>)
 80020e6:	6813      	ldr	r3, [r2, #0]
 80020e8:	b933      	cbnz	r3, 80020f8 <_free_r+0x2c>
 80020ea:	6063      	str	r3, [r4, #4]
 80020ec:	6014      	str	r4, [r2, #0]
 80020ee:	4628      	mov	r0, r5
 80020f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80020f4:	f7ff bdf6 	b.w	8001ce4 <__malloc_unlock>
 80020f8:	42a3      	cmp	r3, r4
 80020fa:	d908      	bls.n	800210e <_free_r+0x42>
 80020fc:	6820      	ldr	r0, [r4, #0]
 80020fe:	1821      	adds	r1, r4, r0
 8002100:	428b      	cmp	r3, r1
 8002102:	bf01      	itttt	eq
 8002104:	6819      	ldreq	r1, [r3, #0]
 8002106:	685b      	ldreq	r3, [r3, #4]
 8002108:	1809      	addeq	r1, r1, r0
 800210a:	6021      	streq	r1, [r4, #0]
 800210c:	e7ed      	b.n	80020ea <_free_r+0x1e>
 800210e:	461a      	mov	r2, r3
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	b10b      	cbz	r3, 8002118 <_free_r+0x4c>
 8002114:	42a3      	cmp	r3, r4
 8002116:	d9fa      	bls.n	800210e <_free_r+0x42>
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	1850      	adds	r0, r2, r1
 800211c:	42a0      	cmp	r0, r4
 800211e:	d10b      	bne.n	8002138 <_free_r+0x6c>
 8002120:	6820      	ldr	r0, [r4, #0]
 8002122:	4401      	add	r1, r0
 8002124:	1850      	adds	r0, r2, r1
 8002126:	4283      	cmp	r3, r0
 8002128:	6011      	str	r1, [r2, #0]
 800212a:	d1e0      	bne.n	80020ee <_free_r+0x22>
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4408      	add	r0, r1
 8002132:	6010      	str	r0, [r2, #0]
 8002134:	6053      	str	r3, [r2, #4]
 8002136:	e7da      	b.n	80020ee <_free_r+0x22>
 8002138:	d902      	bls.n	8002140 <_free_r+0x74>
 800213a:	230c      	movs	r3, #12
 800213c:	602b      	str	r3, [r5, #0]
 800213e:	e7d6      	b.n	80020ee <_free_r+0x22>
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	1821      	adds	r1, r4, r0
 8002144:	428b      	cmp	r3, r1
 8002146:	bf01      	itttt	eq
 8002148:	6819      	ldreq	r1, [r3, #0]
 800214a:	685b      	ldreq	r3, [r3, #4]
 800214c:	1809      	addeq	r1, r1, r0
 800214e:	6021      	streq	r1, [r4, #0]
 8002150:	6063      	str	r3, [r4, #4]
 8002152:	6054      	str	r4, [r2, #4]
 8002154:	e7cb      	b.n	80020ee <_free_r+0x22>
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	200000e8 	.word	0x200000e8

0800215c <__sflush_r>:
 800215c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002162:	0716      	lsls	r6, r2, #28
 8002164:	4605      	mov	r5, r0
 8002166:	460c      	mov	r4, r1
 8002168:	d454      	bmi.n	8002214 <__sflush_r+0xb8>
 800216a:	684b      	ldr	r3, [r1, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	dc02      	bgt.n	8002176 <__sflush_r+0x1a>
 8002170:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002172:	2b00      	cmp	r3, #0
 8002174:	dd48      	ble.n	8002208 <__sflush_r+0xac>
 8002176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002178:	2e00      	cmp	r6, #0
 800217a:	d045      	beq.n	8002208 <__sflush_r+0xac>
 800217c:	2300      	movs	r3, #0
 800217e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002182:	682f      	ldr	r7, [r5, #0]
 8002184:	6a21      	ldr	r1, [r4, #32]
 8002186:	602b      	str	r3, [r5, #0]
 8002188:	d030      	beq.n	80021ec <__sflush_r+0x90>
 800218a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800218c:	89a3      	ldrh	r3, [r4, #12]
 800218e:	0759      	lsls	r1, r3, #29
 8002190:	d505      	bpl.n	800219e <__sflush_r+0x42>
 8002192:	6863      	ldr	r3, [r4, #4]
 8002194:	1ad2      	subs	r2, r2, r3
 8002196:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002198:	b10b      	cbz	r3, 800219e <__sflush_r+0x42>
 800219a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	2300      	movs	r3, #0
 80021a0:	4628      	mov	r0, r5
 80021a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80021a4:	6a21      	ldr	r1, [r4, #32]
 80021a6:	47b0      	blx	r6
 80021a8:	1c43      	adds	r3, r0, #1
 80021aa:	89a3      	ldrh	r3, [r4, #12]
 80021ac:	d106      	bne.n	80021bc <__sflush_r+0x60>
 80021ae:	6829      	ldr	r1, [r5, #0]
 80021b0:	291d      	cmp	r1, #29
 80021b2:	d82b      	bhi.n	800220c <__sflush_r+0xb0>
 80021b4:	4a28      	ldr	r2, [pc, #160]	@ (8002258 <__sflush_r+0xfc>)
 80021b6:	410a      	asrs	r2, r1
 80021b8:	07d6      	lsls	r6, r2, #31
 80021ba:	d427      	bmi.n	800220c <__sflush_r+0xb0>
 80021bc:	2200      	movs	r2, #0
 80021be:	6062      	str	r2, [r4, #4]
 80021c0:	6922      	ldr	r2, [r4, #16]
 80021c2:	04d9      	lsls	r1, r3, #19
 80021c4:	6022      	str	r2, [r4, #0]
 80021c6:	d504      	bpl.n	80021d2 <__sflush_r+0x76>
 80021c8:	1c42      	adds	r2, r0, #1
 80021ca:	d101      	bne.n	80021d0 <__sflush_r+0x74>
 80021cc:	682b      	ldr	r3, [r5, #0]
 80021ce:	b903      	cbnz	r3, 80021d2 <__sflush_r+0x76>
 80021d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80021d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80021d4:	602f      	str	r7, [r5, #0]
 80021d6:	b1b9      	cbz	r1, 8002208 <__sflush_r+0xac>
 80021d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80021dc:	4299      	cmp	r1, r3
 80021de:	d002      	beq.n	80021e6 <__sflush_r+0x8a>
 80021e0:	4628      	mov	r0, r5
 80021e2:	f7ff ff73 	bl	80020cc <_free_r>
 80021e6:	2300      	movs	r3, #0
 80021e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80021ea:	e00d      	b.n	8002208 <__sflush_r+0xac>
 80021ec:	2301      	movs	r3, #1
 80021ee:	4628      	mov	r0, r5
 80021f0:	47b0      	blx	r6
 80021f2:	4602      	mov	r2, r0
 80021f4:	1c50      	adds	r0, r2, #1
 80021f6:	d1c9      	bne.n	800218c <__sflush_r+0x30>
 80021f8:	682b      	ldr	r3, [r5, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0c6      	beq.n	800218c <__sflush_r+0x30>
 80021fe:	2b1d      	cmp	r3, #29
 8002200:	d001      	beq.n	8002206 <__sflush_r+0xaa>
 8002202:	2b16      	cmp	r3, #22
 8002204:	d11d      	bne.n	8002242 <__sflush_r+0xe6>
 8002206:	602f      	str	r7, [r5, #0]
 8002208:	2000      	movs	r0, #0
 800220a:	e021      	b.n	8002250 <__sflush_r+0xf4>
 800220c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002210:	b21b      	sxth	r3, r3
 8002212:	e01a      	b.n	800224a <__sflush_r+0xee>
 8002214:	690f      	ldr	r7, [r1, #16]
 8002216:	2f00      	cmp	r7, #0
 8002218:	d0f6      	beq.n	8002208 <__sflush_r+0xac>
 800221a:	0793      	lsls	r3, r2, #30
 800221c:	bf18      	it	ne
 800221e:	2300      	movne	r3, #0
 8002220:	680e      	ldr	r6, [r1, #0]
 8002222:	bf08      	it	eq
 8002224:	694b      	ldreq	r3, [r1, #20]
 8002226:	1bf6      	subs	r6, r6, r7
 8002228:	600f      	str	r7, [r1, #0]
 800222a:	608b      	str	r3, [r1, #8]
 800222c:	2e00      	cmp	r6, #0
 800222e:	ddeb      	ble.n	8002208 <__sflush_r+0xac>
 8002230:	4633      	mov	r3, r6
 8002232:	463a      	mov	r2, r7
 8002234:	4628      	mov	r0, r5
 8002236:	6a21      	ldr	r1, [r4, #32]
 8002238:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800223c:	47e0      	blx	ip
 800223e:	2800      	cmp	r0, #0
 8002240:	dc07      	bgt.n	8002252 <__sflush_r+0xf6>
 8002242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800224a:	f04f 30ff 	mov.w	r0, #4294967295
 800224e:	81a3      	strh	r3, [r4, #12]
 8002250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002252:	4407      	add	r7, r0
 8002254:	1a36      	subs	r6, r6, r0
 8002256:	e7e9      	b.n	800222c <__sflush_r+0xd0>
 8002258:	dfbffffe 	.word	0xdfbffffe

0800225c <_fflush_r>:
 800225c:	b538      	push	{r3, r4, r5, lr}
 800225e:	690b      	ldr	r3, [r1, #16]
 8002260:	4605      	mov	r5, r0
 8002262:	460c      	mov	r4, r1
 8002264:	b913      	cbnz	r3, 800226c <_fflush_r+0x10>
 8002266:	2500      	movs	r5, #0
 8002268:	4628      	mov	r0, r5
 800226a:	bd38      	pop	{r3, r4, r5, pc}
 800226c:	b118      	cbz	r0, 8002276 <_fflush_r+0x1a>
 800226e:	6a03      	ldr	r3, [r0, #32]
 8002270:	b90b      	cbnz	r3, 8002276 <_fflush_r+0x1a>
 8002272:	f7ff fe07 	bl	8001e84 <__sinit>
 8002276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d0f3      	beq.n	8002266 <_fflush_r+0xa>
 800227e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002280:	07d0      	lsls	r0, r2, #31
 8002282:	d404      	bmi.n	800228e <_fflush_r+0x32>
 8002284:	0599      	lsls	r1, r3, #22
 8002286:	d402      	bmi.n	800228e <_fflush_r+0x32>
 8002288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800228a:	f7ff fefe 	bl	800208a <__retarget_lock_acquire_recursive>
 800228e:	4628      	mov	r0, r5
 8002290:	4621      	mov	r1, r4
 8002292:	f7ff ff63 	bl	800215c <__sflush_r>
 8002296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002298:	4605      	mov	r5, r0
 800229a:	07da      	lsls	r2, r3, #31
 800229c:	d4e4      	bmi.n	8002268 <_fflush_r+0xc>
 800229e:	89a3      	ldrh	r3, [r4, #12]
 80022a0:	059b      	lsls	r3, r3, #22
 80022a2:	d4e1      	bmi.n	8002268 <_fflush_r+0xc>
 80022a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80022a6:	f7ff fef1 	bl	800208c <__retarget_lock_release_recursive>
 80022aa:	e7dd      	b.n	8002268 <_fflush_r+0xc>

080022ac <fiprintf>:
 80022ac:	b40e      	push	{r1, r2, r3}
 80022ae:	b503      	push	{r0, r1, lr}
 80022b0:	4601      	mov	r1, r0
 80022b2:	ab03      	add	r3, sp, #12
 80022b4:	4805      	ldr	r0, [pc, #20]	@ (80022cc <fiprintf+0x20>)
 80022b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80022ba:	6800      	ldr	r0, [r0, #0]
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	f000 f835 	bl	800232c <_vfiprintf_r>
 80022c2:	b002      	add	sp, #8
 80022c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80022c8:	b003      	add	sp, #12
 80022ca:	4770      	bx	lr
 80022cc:	20000018 	.word	0x20000018

080022d0 <abort>:
 80022d0:	2006      	movs	r0, #6
 80022d2:	b508      	push	{r3, lr}
 80022d4:	f000 fb90 	bl	80029f8 <raise>
 80022d8:	2001      	movs	r0, #1
 80022da:	f7fe fc1a 	bl	8000b12 <_exit>

080022de <__sfputc_r>:
 80022de:	6893      	ldr	r3, [r2, #8]
 80022e0:	b410      	push	{r4}
 80022e2:	3b01      	subs	r3, #1
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	6093      	str	r3, [r2, #8]
 80022e8:	da07      	bge.n	80022fa <__sfputc_r+0x1c>
 80022ea:	6994      	ldr	r4, [r2, #24]
 80022ec:	42a3      	cmp	r3, r4
 80022ee:	db01      	blt.n	80022f4 <__sfputc_r+0x16>
 80022f0:	290a      	cmp	r1, #10
 80022f2:	d102      	bne.n	80022fa <__sfputc_r+0x1c>
 80022f4:	bc10      	pop	{r4}
 80022f6:	f000 bac3 	b.w	8002880 <__swbuf_r>
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	1c58      	adds	r0, r3, #1
 80022fe:	6010      	str	r0, [r2, #0]
 8002300:	7019      	strb	r1, [r3, #0]
 8002302:	4608      	mov	r0, r1
 8002304:	bc10      	pop	{r4}
 8002306:	4770      	bx	lr

08002308 <__sfputs_r>:
 8002308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230a:	4606      	mov	r6, r0
 800230c:	460f      	mov	r7, r1
 800230e:	4614      	mov	r4, r2
 8002310:	18d5      	adds	r5, r2, r3
 8002312:	42ac      	cmp	r4, r5
 8002314:	d101      	bne.n	800231a <__sfputs_r+0x12>
 8002316:	2000      	movs	r0, #0
 8002318:	e007      	b.n	800232a <__sfputs_r+0x22>
 800231a:	463a      	mov	r2, r7
 800231c:	4630      	mov	r0, r6
 800231e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002322:	f7ff ffdc 	bl	80022de <__sfputc_r>
 8002326:	1c43      	adds	r3, r0, #1
 8002328:	d1f3      	bne.n	8002312 <__sfputs_r+0xa>
 800232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800232c <_vfiprintf_r>:
 800232c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002330:	460d      	mov	r5, r1
 8002332:	4614      	mov	r4, r2
 8002334:	4698      	mov	r8, r3
 8002336:	4606      	mov	r6, r0
 8002338:	b09d      	sub	sp, #116	@ 0x74
 800233a:	b118      	cbz	r0, 8002344 <_vfiprintf_r+0x18>
 800233c:	6a03      	ldr	r3, [r0, #32]
 800233e:	b90b      	cbnz	r3, 8002344 <_vfiprintf_r+0x18>
 8002340:	f7ff fda0 	bl	8001e84 <__sinit>
 8002344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002346:	07d9      	lsls	r1, r3, #31
 8002348:	d405      	bmi.n	8002356 <_vfiprintf_r+0x2a>
 800234a:	89ab      	ldrh	r3, [r5, #12]
 800234c:	059a      	lsls	r2, r3, #22
 800234e:	d402      	bmi.n	8002356 <_vfiprintf_r+0x2a>
 8002350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002352:	f7ff fe9a 	bl	800208a <__retarget_lock_acquire_recursive>
 8002356:	89ab      	ldrh	r3, [r5, #12]
 8002358:	071b      	lsls	r3, r3, #28
 800235a:	d501      	bpl.n	8002360 <_vfiprintf_r+0x34>
 800235c:	692b      	ldr	r3, [r5, #16]
 800235e:	b99b      	cbnz	r3, 8002388 <_vfiprintf_r+0x5c>
 8002360:	4629      	mov	r1, r5
 8002362:	4630      	mov	r0, r6
 8002364:	f000 faca 	bl	80028fc <__swsetup_r>
 8002368:	b170      	cbz	r0, 8002388 <_vfiprintf_r+0x5c>
 800236a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800236c:	07dc      	lsls	r4, r3, #31
 800236e:	d504      	bpl.n	800237a <_vfiprintf_r+0x4e>
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	b01d      	add	sp, #116	@ 0x74
 8002376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800237a:	89ab      	ldrh	r3, [r5, #12]
 800237c:	0598      	lsls	r0, r3, #22
 800237e:	d4f7      	bmi.n	8002370 <_vfiprintf_r+0x44>
 8002380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002382:	f7ff fe83 	bl	800208c <__retarget_lock_release_recursive>
 8002386:	e7f3      	b.n	8002370 <_vfiprintf_r+0x44>
 8002388:	2300      	movs	r3, #0
 800238a:	9309      	str	r3, [sp, #36]	@ 0x24
 800238c:	2320      	movs	r3, #32
 800238e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002392:	2330      	movs	r3, #48	@ 0x30
 8002394:	f04f 0901 	mov.w	r9, #1
 8002398:	f8cd 800c 	str.w	r8, [sp, #12]
 800239c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002548 <_vfiprintf_r+0x21c>
 80023a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80023a4:	4623      	mov	r3, r4
 80023a6:	469a      	mov	sl, r3
 80023a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023ac:	b10a      	cbz	r2, 80023b2 <_vfiprintf_r+0x86>
 80023ae:	2a25      	cmp	r2, #37	@ 0x25
 80023b0:	d1f9      	bne.n	80023a6 <_vfiprintf_r+0x7a>
 80023b2:	ebba 0b04 	subs.w	fp, sl, r4
 80023b6:	d00b      	beq.n	80023d0 <_vfiprintf_r+0xa4>
 80023b8:	465b      	mov	r3, fp
 80023ba:	4622      	mov	r2, r4
 80023bc:	4629      	mov	r1, r5
 80023be:	4630      	mov	r0, r6
 80023c0:	f7ff ffa2 	bl	8002308 <__sfputs_r>
 80023c4:	3001      	adds	r0, #1
 80023c6:	f000 80a7 	beq.w	8002518 <_vfiprintf_r+0x1ec>
 80023ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80023cc:	445a      	add	r2, fp
 80023ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80023d0:	f89a 3000 	ldrb.w	r3, [sl]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	f000 809f 	beq.w	8002518 <_vfiprintf_r+0x1ec>
 80023da:	2300      	movs	r3, #0
 80023dc:	f04f 32ff 	mov.w	r2, #4294967295
 80023e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80023e4:	f10a 0a01 	add.w	sl, sl, #1
 80023e8:	9304      	str	r3, [sp, #16]
 80023ea:	9307      	str	r3, [sp, #28]
 80023ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80023f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80023f2:	4654      	mov	r4, sl
 80023f4:	2205      	movs	r2, #5
 80023f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023fa:	4853      	ldr	r0, [pc, #332]	@ (8002548 <_vfiprintf_r+0x21c>)
 80023fc:	f000 fb18 	bl	8002a30 <memchr>
 8002400:	9a04      	ldr	r2, [sp, #16]
 8002402:	b9d8      	cbnz	r0, 800243c <_vfiprintf_r+0x110>
 8002404:	06d1      	lsls	r1, r2, #27
 8002406:	bf44      	itt	mi
 8002408:	2320      	movmi	r3, #32
 800240a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800240e:	0713      	lsls	r3, r2, #28
 8002410:	bf44      	itt	mi
 8002412:	232b      	movmi	r3, #43	@ 0x2b
 8002414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002418:	f89a 3000 	ldrb.w	r3, [sl]
 800241c:	2b2a      	cmp	r3, #42	@ 0x2a
 800241e:	d015      	beq.n	800244c <_vfiprintf_r+0x120>
 8002420:	4654      	mov	r4, sl
 8002422:	2000      	movs	r0, #0
 8002424:	f04f 0c0a 	mov.w	ip, #10
 8002428:	9a07      	ldr	r2, [sp, #28]
 800242a:	4621      	mov	r1, r4
 800242c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002430:	3b30      	subs	r3, #48	@ 0x30
 8002432:	2b09      	cmp	r3, #9
 8002434:	d94b      	bls.n	80024ce <_vfiprintf_r+0x1a2>
 8002436:	b1b0      	cbz	r0, 8002466 <_vfiprintf_r+0x13a>
 8002438:	9207      	str	r2, [sp, #28]
 800243a:	e014      	b.n	8002466 <_vfiprintf_r+0x13a>
 800243c:	eba0 0308 	sub.w	r3, r0, r8
 8002440:	fa09 f303 	lsl.w	r3, r9, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	46a2      	mov	sl, r4
 8002448:	9304      	str	r3, [sp, #16]
 800244a:	e7d2      	b.n	80023f2 <_vfiprintf_r+0xc6>
 800244c:	9b03      	ldr	r3, [sp, #12]
 800244e:	1d19      	adds	r1, r3, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	9103      	str	r1, [sp, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	bfbb      	ittet	lt
 8002458:	425b      	neglt	r3, r3
 800245a:	f042 0202 	orrlt.w	r2, r2, #2
 800245e:	9307      	strge	r3, [sp, #28]
 8002460:	9307      	strlt	r3, [sp, #28]
 8002462:	bfb8      	it	lt
 8002464:	9204      	strlt	r2, [sp, #16]
 8002466:	7823      	ldrb	r3, [r4, #0]
 8002468:	2b2e      	cmp	r3, #46	@ 0x2e
 800246a:	d10a      	bne.n	8002482 <_vfiprintf_r+0x156>
 800246c:	7863      	ldrb	r3, [r4, #1]
 800246e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002470:	d132      	bne.n	80024d8 <_vfiprintf_r+0x1ac>
 8002472:	9b03      	ldr	r3, [sp, #12]
 8002474:	3402      	adds	r4, #2
 8002476:	1d1a      	adds	r2, r3, #4
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	9203      	str	r2, [sp, #12]
 800247c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002480:	9305      	str	r3, [sp, #20]
 8002482:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800254c <_vfiprintf_r+0x220>
 8002486:	2203      	movs	r2, #3
 8002488:	4650      	mov	r0, sl
 800248a:	7821      	ldrb	r1, [r4, #0]
 800248c:	f000 fad0 	bl	8002a30 <memchr>
 8002490:	b138      	cbz	r0, 80024a2 <_vfiprintf_r+0x176>
 8002492:	2240      	movs	r2, #64	@ 0x40
 8002494:	9b04      	ldr	r3, [sp, #16]
 8002496:	eba0 000a 	sub.w	r0, r0, sl
 800249a:	4082      	lsls	r2, r0
 800249c:	4313      	orrs	r3, r2
 800249e:	3401      	adds	r4, #1
 80024a0:	9304      	str	r3, [sp, #16]
 80024a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024a6:	2206      	movs	r2, #6
 80024a8:	4829      	ldr	r0, [pc, #164]	@ (8002550 <_vfiprintf_r+0x224>)
 80024aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80024ae:	f000 fabf 	bl	8002a30 <memchr>
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d03f      	beq.n	8002536 <_vfiprintf_r+0x20a>
 80024b6:	4b27      	ldr	r3, [pc, #156]	@ (8002554 <_vfiprintf_r+0x228>)
 80024b8:	bb1b      	cbnz	r3, 8002502 <_vfiprintf_r+0x1d6>
 80024ba:	9b03      	ldr	r3, [sp, #12]
 80024bc:	3307      	adds	r3, #7
 80024be:	f023 0307 	bic.w	r3, r3, #7
 80024c2:	3308      	adds	r3, #8
 80024c4:	9303      	str	r3, [sp, #12]
 80024c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024c8:	443b      	add	r3, r7
 80024ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80024cc:	e76a      	b.n	80023a4 <_vfiprintf_r+0x78>
 80024ce:	460c      	mov	r4, r1
 80024d0:	2001      	movs	r0, #1
 80024d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80024d6:	e7a8      	b.n	800242a <_vfiprintf_r+0xfe>
 80024d8:	2300      	movs	r3, #0
 80024da:	f04f 0c0a 	mov.w	ip, #10
 80024de:	4619      	mov	r1, r3
 80024e0:	3401      	adds	r4, #1
 80024e2:	9305      	str	r3, [sp, #20]
 80024e4:	4620      	mov	r0, r4
 80024e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80024ea:	3a30      	subs	r2, #48	@ 0x30
 80024ec:	2a09      	cmp	r2, #9
 80024ee:	d903      	bls.n	80024f8 <_vfiprintf_r+0x1cc>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0c6      	beq.n	8002482 <_vfiprintf_r+0x156>
 80024f4:	9105      	str	r1, [sp, #20]
 80024f6:	e7c4      	b.n	8002482 <_vfiprintf_r+0x156>
 80024f8:	4604      	mov	r4, r0
 80024fa:	2301      	movs	r3, #1
 80024fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002500:	e7f0      	b.n	80024e4 <_vfiprintf_r+0x1b8>
 8002502:	ab03      	add	r3, sp, #12
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	462a      	mov	r2, r5
 8002508:	4630      	mov	r0, r6
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <_vfiprintf_r+0x22c>)
 800250c:	a904      	add	r1, sp, #16
 800250e:	f3af 8000 	nop.w
 8002512:	4607      	mov	r7, r0
 8002514:	1c78      	adds	r0, r7, #1
 8002516:	d1d6      	bne.n	80024c6 <_vfiprintf_r+0x19a>
 8002518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800251a:	07d9      	lsls	r1, r3, #31
 800251c:	d405      	bmi.n	800252a <_vfiprintf_r+0x1fe>
 800251e:	89ab      	ldrh	r3, [r5, #12]
 8002520:	059a      	lsls	r2, r3, #22
 8002522:	d402      	bmi.n	800252a <_vfiprintf_r+0x1fe>
 8002524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002526:	f7ff fdb1 	bl	800208c <__retarget_lock_release_recursive>
 800252a:	89ab      	ldrh	r3, [r5, #12]
 800252c:	065b      	lsls	r3, r3, #25
 800252e:	f53f af1f 	bmi.w	8002370 <_vfiprintf_r+0x44>
 8002532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002534:	e71e      	b.n	8002374 <_vfiprintf_r+0x48>
 8002536:	ab03      	add	r3, sp, #12
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	462a      	mov	r2, r5
 800253c:	4630      	mov	r0, r6
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <_vfiprintf_r+0x22c>)
 8002540:	a904      	add	r1, sp, #16
 8002542:	f000 f87d 	bl	8002640 <_printf_i>
 8002546:	e7e4      	b.n	8002512 <_vfiprintf_r+0x1e6>
 8002548:	08002c39 	.word	0x08002c39
 800254c:	08002c3f 	.word	0x08002c3f
 8002550:	08002c43 	.word	0x08002c43
 8002554:	00000000 	.word	0x00000000
 8002558:	08002309 	.word	0x08002309

0800255c <_printf_common>:
 800255c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002560:	4616      	mov	r6, r2
 8002562:	4698      	mov	r8, r3
 8002564:	688a      	ldr	r2, [r1, #8]
 8002566:	690b      	ldr	r3, [r1, #16]
 8002568:	4607      	mov	r7, r0
 800256a:	4293      	cmp	r3, r2
 800256c:	bfb8      	it	lt
 800256e:	4613      	movlt	r3, r2
 8002570:	6033      	str	r3, [r6, #0]
 8002572:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002576:	460c      	mov	r4, r1
 8002578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800257c:	b10a      	cbz	r2, 8002582 <_printf_common+0x26>
 800257e:	3301      	adds	r3, #1
 8002580:	6033      	str	r3, [r6, #0]
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	0699      	lsls	r1, r3, #26
 8002586:	bf42      	ittt	mi
 8002588:	6833      	ldrmi	r3, [r6, #0]
 800258a:	3302      	addmi	r3, #2
 800258c:	6033      	strmi	r3, [r6, #0]
 800258e:	6825      	ldr	r5, [r4, #0]
 8002590:	f015 0506 	ands.w	r5, r5, #6
 8002594:	d106      	bne.n	80025a4 <_printf_common+0x48>
 8002596:	f104 0a19 	add.w	sl, r4, #25
 800259a:	68e3      	ldr	r3, [r4, #12]
 800259c:	6832      	ldr	r2, [r6, #0]
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	42ab      	cmp	r3, r5
 80025a2:	dc2b      	bgt.n	80025fc <_printf_common+0xa0>
 80025a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80025a8:	6822      	ldr	r2, [r4, #0]
 80025aa:	3b00      	subs	r3, #0
 80025ac:	bf18      	it	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	0692      	lsls	r2, r2, #26
 80025b2:	d430      	bmi.n	8002616 <_printf_common+0xba>
 80025b4:	4641      	mov	r1, r8
 80025b6:	4638      	mov	r0, r7
 80025b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80025bc:	47c8      	blx	r9
 80025be:	3001      	adds	r0, #1
 80025c0:	d023      	beq.n	800260a <_printf_common+0xae>
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	6922      	ldr	r2, [r4, #16]
 80025c6:	f003 0306 	and.w	r3, r3, #6
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	bf14      	ite	ne
 80025ce:	2500      	movne	r5, #0
 80025d0:	6833      	ldreq	r3, [r6, #0]
 80025d2:	f04f 0600 	mov.w	r6, #0
 80025d6:	bf08      	it	eq
 80025d8:	68e5      	ldreq	r5, [r4, #12]
 80025da:	f104 041a 	add.w	r4, r4, #26
 80025de:	bf08      	it	eq
 80025e0:	1aed      	subeq	r5, r5, r3
 80025e2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80025e6:	bf08      	it	eq
 80025e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025ec:	4293      	cmp	r3, r2
 80025ee:	bfc4      	itt	gt
 80025f0:	1a9b      	subgt	r3, r3, r2
 80025f2:	18ed      	addgt	r5, r5, r3
 80025f4:	42b5      	cmp	r5, r6
 80025f6:	d11a      	bne.n	800262e <_printf_common+0xd2>
 80025f8:	2000      	movs	r0, #0
 80025fa:	e008      	b.n	800260e <_printf_common+0xb2>
 80025fc:	2301      	movs	r3, #1
 80025fe:	4652      	mov	r2, sl
 8002600:	4641      	mov	r1, r8
 8002602:	4638      	mov	r0, r7
 8002604:	47c8      	blx	r9
 8002606:	3001      	adds	r0, #1
 8002608:	d103      	bne.n	8002612 <_printf_common+0xb6>
 800260a:	f04f 30ff 	mov.w	r0, #4294967295
 800260e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002612:	3501      	adds	r5, #1
 8002614:	e7c1      	b.n	800259a <_printf_common+0x3e>
 8002616:	2030      	movs	r0, #48	@ 0x30
 8002618:	18e1      	adds	r1, r4, r3
 800261a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800261e:	1c5a      	adds	r2, r3, #1
 8002620:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002624:	4422      	add	r2, r4
 8002626:	3302      	adds	r3, #2
 8002628:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800262c:	e7c2      	b.n	80025b4 <_printf_common+0x58>
 800262e:	2301      	movs	r3, #1
 8002630:	4622      	mov	r2, r4
 8002632:	4641      	mov	r1, r8
 8002634:	4638      	mov	r0, r7
 8002636:	47c8      	blx	r9
 8002638:	3001      	adds	r0, #1
 800263a:	d0e6      	beq.n	800260a <_printf_common+0xae>
 800263c:	3601      	adds	r6, #1
 800263e:	e7d9      	b.n	80025f4 <_printf_common+0x98>

08002640 <_printf_i>:
 8002640:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002644:	7e0f      	ldrb	r7, [r1, #24]
 8002646:	4691      	mov	r9, r2
 8002648:	2f78      	cmp	r7, #120	@ 0x78
 800264a:	4680      	mov	r8, r0
 800264c:	460c      	mov	r4, r1
 800264e:	469a      	mov	sl, r3
 8002650:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002652:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002656:	d807      	bhi.n	8002668 <_printf_i+0x28>
 8002658:	2f62      	cmp	r7, #98	@ 0x62
 800265a:	d80a      	bhi.n	8002672 <_printf_i+0x32>
 800265c:	2f00      	cmp	r7, #0
 800265e:	f000 80d3 	beq.w	8002808 <_printf_i+0x1c8>
 8002662:	2f58      	cmp	r7, #88	@ 0x58
 8002664:	f000 80ba 	beq.w	80027dc <_printf_i+0x19c>
 8002668:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800266c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002670:	e03a      	b.n	80026e8 <_printf_i+0xa8>
 8002672:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002676:	2b15      	cmp	r3, #21
 8002678:	d8f6      	bhi.n	8002668 <_printf_i+0x28>
 800267a:	a101      	add	r1, pc, #4	@ (adr r1, 8002680 <_printf_i+0x40>)
 800267c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002680:	080026d9 	.word	0x080026d9
 8002684:	080026ed 	.word	0x080026ed
 8002688:	08002669 	.word	0x08002669
 800268c:	08002669 	.word	0x08002669
 8002690:	08002669 	.word	0x08002669
 8002694:	08002669 	.word	0x08002669
 8002698:	080026ed 	.word	0x080026ed
 800269c:	08002669 	.word	0x08002669
 80026a0:	08002669 	.word	0x08002669
 80026a4:	08002669 	.word	0x08002669
 80026a8:	08002669 	.word	0x08002669
 80026ac:	080027ef 	.word	0x080027ef
 80026b0:	08002717 	.word	0x08002717
 80026b4:	080027a9 	.word	0x080027a9
 80026b8:	08002669 	.word	0x08002669
 80026bc:	08002669 	.word	0x08002669
 80026c0:	08002811 	.word	0x08002811
 80026c4:	08002669 	.word	0x08002669
 80026c8:	08002717 	.word	0x08002717
 80026cc:	08002669 	.word	0x08002669
 80026d0:	08002669 	.word	0x08002669
 80026d4:	080027b1 	.word	0x080027b1
 80026d8:	6833      	ldr	r3, [r6, #0]
 80026da:	1d1a      	adds	r2, r3, #4
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6032      	str	r2, [r6, #0]
 80026e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80026e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80026e8:	2301      	movs	r3, #1
 80026ea:	e09e      	b.n	800282a <_printf_i+0x1ea>
 80026ec:	6833      	ldr	r3, [r6, #0]
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	1d19      	adds	r1, r3, #4
 80026f2:	6031      	str	r1, [r6, #0]
 80026f4:	0606      	lsls	r6, r0, #24
 80026f6:	d501      	bpl.n	80026fc <_printf_i+0xbc>
 80026f8:	681d      	ldr	r5, [r3, #0]
 80026fa:	e003      	b.n	8002704 <_printf_i+0xc4>
 80026fc:	0645      	lsls	r5, r0, #25
 80026fe:	d5fb      	bpl.n	80026f8 <_printf_i+0xb8>
 8002700:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002704:	2d00      	cmp	r5, #0
 8002706:	da03      	bge.n	8002710 <_printf_i+0xd0>
 8002708:	232d      	movs	r3, #45	@ 0x2d
 800270a:	426d      	negs	r5, r5
 800270c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002710:	230a      	movs	r3, #10
 8002712:	4859      	ldr	r0, [pc, #356]	@ (8002878 <_printf_i+0x238>)
 8002714:	e011      	b.n	800273a <_printf_i+0xfa>
 8002716:	6821      	ldr	r1, [r4, #0]
 8002718:	6833      	ldr	r3, [r6, #0]
 800271a:	0608      	lsls	r0, r1, #24
 800271c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002720:	d402      	bmi.n	8002728 <_printf_i+0xe8>
 8002722:	0649      	lsls	r1, r1, #25
 8002724:	bf48      	it	mi
 8002726:	b2ad      	uxthmi	r5, r5
 8002728:	2f6f      	cmp	r7, #111	@ 0x6f
 800272a:	6033      	str	r3, [r6, #0]
 800272c:	bf14      	ite	ne
 800272e:	230a      	movne	r3, #10
 8002730:	2308      	moveq	r3, #8
 8002732:	4851      	ldr	r0, [pc, #324]	@ (8002878 <_printf_i+0x238>)
 8002734:	2100      	movs	r1, #0
 8002736:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800273a:	6866      	ldr	r6, [r4, #4]
 800273c:	2e00      	cmp	r6, #0
 800273e:	bfa8      	it	ge
 8002740:	6821      	ldrge	r1, [r4, #0]
 8002742:	60a6      	str	r6, [r4, #8]
 8002744:	bfa4      	itt	ge
 8002746:	f021 0104 	bicge.w	r1, r1, #4
 800274a:	6021      	strge	r1, [r4, #0]
 800274c:	b90d      	cbnz	r5, 8002752 <_printf_i+0x112>
 800274e:	2e00      	cmp	r6, #0
 8002750:	d04b      	beq.n	80027ea <_printf_i+0x1aa>
 8002752:	4616      	mov	r6, r2
 8002754:	fbb5 f1f3 	udiv	r1, r5, r3
 8002758:	fb03 5711 	mls	r7, r3, r1, r5
 800275c:	5dc7      	ldrb	r7, [r0, r7]
 800275e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002762:	462f      	mov	r7, r5
 8002764:	42bb      	cmp	r3, r7
 8002766:	460d      	mov	r5, r1
 8002768:	d9f4      	bls.n	8002754 <_printf_i+0x114>
 800276a:	2b08      	cmp	r3, #8
 800276c:	d10b      	bne.n	8002786 <_printf_i+0x146>
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	07df      	lsls	r7, r3, #31
 8002772:	d508      	bpl.n	8002786 <_printf_i+0x146>
 8002774:	6923      	ldr	r3, [r4, #16]
 8002776:	6861      	ldr	r1, [r4, #4]
 8002778:	4299      	cmp	r1, r3
 800277a:	bfde      	ittt	le
 800277c:	2330      	movle	r3, #48	@ 0x30
 800277e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002782:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002786:	1b92      	subs	r2, r2, r6
 8002788:	6122      	str	r2, [r4, #16]
 800278a:	464b      	mov	r3, r9
 800278c:	4621      	mov	r1, r4
 800278e:	4640      	mov	r0, r8
 8002790:	f8cd a000 	str.w	sl, [sp]
 8002794:	aa03      	add	r2, sp, #12
 8002796:	f7ff fee1 	bl	800255c <_printf_common>
 800279a:	3001      	adds	r0, #1
 800279c:	d14a      	bne.n	8002834 <_printf_i+0x1f4>
 800279e:	f04f 30ff 	mov.w	r0, #4294967295
 80027a2:	b004      	add	sp, #16
 80027a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027a8:	6823      	ldr	r3, [r4, #0]
 80027aa:	f043 0320 	orr.w	r3, r3, #32
 80027ae:	6023      	str	r3, [r4, #0]
 80027b0:	2778      	movs	r7, #120	@ 0x78
 80027b2:	4832      	ldr	r0, [pc, #200]	@ (800287c <_printf_i+0x23c>)
 80027b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	6831      	ldr	r1, [r6, #0]
 80027bc:	061f      	lsls	r7, r3, #24
 80027be:	f851 5b04 	ldr.w	r5, [r1], #4
 80027c2:	d402      	bmi.n	80027ca <_printf_i+0x18a>
 80027c4:	065f      	lsls	r7, r3, #25
 80027c6:	bf48      	it	mi
 80027c8:	b2ad      	uxthmi	r5, r5
 80027ca:	6031      	str	r1, [r6, #0]
 80027cc:	07d9      	lsls	r1, r3, #31
 80027ce:	bf44      	itt	mi
 80027d0:	f043 0320 	orrmi.w	r3, r3, #32
 80027d4:	6023      	strmi	r3, [r4, #0]
 80027d6:	b11d      	cbz	r5, 80027e0 <_printf_i+0x1a0>
 80027d8:	2310      	movs	r3, #16
 80027da:	e7ab      	b.n	8002734 <_printf_i+0xf4>
 80027dc:	4826      	ldr	r0, [pc, #152]	@ (8002878 <_printf_i+0x238>)
 80027de:	e7e9      	b.n	80027b4 <_printf_i+0x174>
 80027e0:	6823      	ldr	r3, [r4, #0]
 80027e2:	f023 0320 	bic.w	r3, r3, #32
 80027e6:	6023      	str	r3, [r4, #0]
 80027e8:	e7f6      	b.n	80027d8 <_printf_i+0x198>
 80027ea:	4616      	mov	r6, r2
 80027ec:	e7bd      	b.n	800276a <_printf_i+0x12a>
 80027ee:	6833      	ldr	r3, [r6, #0]
 80027f0:	6825      	ldr	r5, [r4, #0]
 80027f2:	1d18      	adds	r0, r3, #4
 80027f4:	6961      	ldr	r1, [r4, #20]
 80027f6:	6030      	str	r0, [r6, #0]
 80027f8:	062e      	lsls	r6, r5, #24
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	d501      	bpl.n	8002802 <_printf_i+0x1c2>
 80027fe:	6019      	str	r1, [r3, #0]
 8002800:	e002      	b.n	8002808 <_printf_i+0x1c8>
 8002802:	0668      	lsls	r0, r5, #25
 8002804:	d5fb      	bpl.n	80027fe <_printf_i+0x1be>
 8002806:	8019      	strh	r1, [r3, #0]
 8002808:	2300      	movs	r3, #0
 800280a:	4616      	mov	r6, r2
 800280c:	6123      	str	r3, [r4, #16]
 800280e:	e7bc      	b.n	800278a <_printf_i+0x14a>
 8002810:	6833      	ldr	r3, [r6, #0]
 8002812:	2100      	movs	r1, #0
 8002814:	1d1a      	adds	r2, r3, #4
 8002816:	6032      	str	r2, [r6, #0]
 8002818:	681e      	ldr	r6, [r3, #0]
 800281a:	6862      	ldr	r2, [r4, #4]
 800281c:	4630      	mov	r0, r6
 800281e:	f000 f907 	bl	8002a30 <memchr>
 8002822:	b108      	cbz	r0, 8002828 <_printf_i+0x1e8>
 8002824:	1b80      	subs	r0, r0, r6
 8002826:	6060      	str	r0, [r4, #4]
 8002828:	6863      	ldr	r3, [r4, #4]
 800282a:	6123      	str	r3, [r4, #16]
 800282c:	2300      	movs	r3, #0
 800282e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002832:	e7aa      	b.n	800278a <_printf_i+0x14a>
 8002834:	4632      	mov	r2, r6
 8002836:	4649      	mov	r1, r9
 8002838:	4640      	mov	r0, r8
 800283a:	6923      	ldr	r3, [r4, #16]
 800283c:	47d0      	blx	sl
 800283e:	3001      	adds	r0, #1
 8002840:	d0ad      	beq.n	800279e <_printf_i+0x15e>
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	079b      	lsls	r3, r3, #30
 8002846:	d413      	bmi.n	8002870 <_printf_i+0x230>
 8002848:	68e0      	ldr	r0, [r4, #12]
 800284a:	9b03      	ldr	r3, [sp, #12]
 800284c:	4298      	cmp	r0, r3
 800284e:	bfb8      	it	lt
 8002850:	4618      	movlt	r0, r3
 8002852:	e7a6      	b.n	80027a2 <_printf_i+0x162>
 8002854:	2301      	movs	r3, #1
 8002856:	4632      	mov	r2, r6
 8002858:	4649      	mov	r1, r9
 800285a:	4640      	mov	r0, r8
 800285c:	47d0      	blx	sl
 800285e:	3001      	adds	r0, #1
 8002860:	d09d      	beq.n	800279e <_printf_i+0x15e>
 8002862:	3501      	adds	r5, #1
 8002864:	68e3      	ldr	r3, [r4, #12]
 8002866:	9903      	ldr	r1, [sp, #12]
 8002868:	1a5b      	subs	r3, r3, r1
 800286a:	42ab      	cmp	r3, r5
 800286c:	dcf2      	bgt.n	8002854 <_printf_i+0x214>
 800286e:	e7eb      	b.n	8002848 <_printf_i+0x208>
 8002870:	2500      	movs	r5, #0
 8002872:	f104 0619 	add.w	r6, r4, #25
 8002876:	e7f5      	b.n	8002864 <_printf_i+0x224>
 8002878:	08002c4a 	.word	0x08002c4a
 800287c:	08002c5b 	.word	0x08002c5b

08002880 <__swbuf_r>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	460e      	mov	r6, r1
 8002884:	4614      	mov	r4, r2
 8002886:	4605      	mov	r5, r0
 8002888:	b118      	cbz	r0, 8002892 <__swbuf_r+0x12>
 800288a:	6a03      	ldr	r3, [r0, #32]
 800288c:	b90b      	cbnz	r3, 8002892 <__swbuf_r+0x12>
 800288e:	f7ff faf9 	bl	8001e84 <__sinit>
 8002892:	69a3      	ldr	r3, [r4, #24]
 8002894:	60a3      	str	r3, [r4, #8]
 8002896:	89a3      	ldrh	r3, [r4, #12]
 8002898:	071a      	lsls	r2, r3, #28
 800289a:	d501      	bpl.n	80028a0 <__swbuf_r+0x20>
 800289c:	6923      	ldr	r3, [r4, #16]
 800289e:	b943      	cbnz	r3, 80028b2 <__swbuf_r+0x32>
 80028a0:	4621      	mov	r1, r4
 80028a2:	4628      	mov	r0, r5
 80028a4:	f000 f82a 	bl	80028fc <__swsetup_r>
 80028a8:	b118      	cbz	r0, 80028b2 <__swbuf_r+0x32>
 80028aa:	f04f 37ff 	mov.w	r7, #4294967295
 80028ae:	4638      	mov	r0, r7
 80028b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	6922      	ldr	r2, [r4, #16]
 80028b6:	b2f6      	uxtb	r6, r6
 80028b8:	1a98      	subs	r0, r3, r2
 80028ba:	6963      	ldr	r3, [r4, #20]
 80028bc:	4637      	mov	r7, r6
 80028be:	4283      	cmp	r3, r0
 80028c0:	dc05      	bgt.n	80028ce <__swbuf_r+0x4e>
 80028c2:	4621      	mov	r1, r4
 80028c4:	4628      	mov	r0, r5
 80028c6:	f7ff fcc9 	bl	800225c <_fflush_r>
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d1ed      	bne.n	80028aa <__swbuf_r+0x2a>
 80028ce:	68a3      	ldr	r3, [r4, #8]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	60a3      	str	r3, [r4, #8]
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	1c5a      	adds	r2, r3, #1
 80028d8:	6022      	str	r2, [r4, #0]
 80028da:	701e      	strb	r6, [r3, #0]
 80028dc:	6962      	ldr	r2, [r4, #20]
 80028de:	1c43      	adds	r3, r0, #1
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d004      	beq.n	80028ee <__swbuf_r+0x6e>
 80028e4:	89a3      	ldrh	r3, [r4, #12]
 80028e6:	07db      	lsls	r3, r3, #31
 80028e8:	d5e1      	bpl.n	80028ae <__swbuf_r+0x2e>
 80028ea:	2e0a      	cmp	r6, #10
 80028ec:	d1df      	bne.n	80028ae <__swbuf_r+0x2e>
 80028ee:	4621      	mov	r1, r4
 80028f0:	4628      	mov	r0, r5
 80028f2:	f7ff fcb3 	bl	800225c <_fflush_r>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d0d9      	beq.n	80028ae <__swbuf_r+0x2e>
 80028fa:	e7d6      	b.n	80028aa <__swbuf_r+0x2a>

080028fc <__swsetup_r>:
 80028fc:	b538      	push	{r3, r4, r5, lr}
 80028fe:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <__swsetup_r+0xa8>)
 8002900:	4605      	mov	r5, r0
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	460c      	mov	r4, r1
 8002906:	b118      	cbz	r0, 8002910 <__swsetup_r+0x14>
 8002908:	6a03      	ldr	r3, [r0, #32]
 800290a:	b90b      	cbnz	r3, 8002910 <__swsetup_r+0x14>
 800290c:	f7ff faba 	bl	8001e84 <__sinit>
 8002910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002914:	0719      	lsls	r1, r3, #28
 8002916:	d422      	bmi.n	800295e <__swsetup_r+0x62>
 8002918:	06da      	lsls	r2, r3, #27
 800291a:	d407      	bmi.n	800292c <__swsetup_r+0x30>
 800291c:	2209      	movs	r2, #9
 800291e:	602a      	str	r2, [r5, #0]
 8002920:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002924:	f04f 30ff 	mov.w	r0, #4294967295
 8002928:	81a3      	strh	r3, [r4, #12]
 800292a:	e033      	b.n	8002994 <__swsetup_r+0x98>
 800292c:	0758      	lsls	r0, r3, #29
 800292e:	d512      	bpl.n	8002956 <__swsetup_r+0x5a>
 8002930:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002932:	b141      	cbz	r1, 8002946 <__swsetup_r+0x4a>
 8002934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002938:	4299      	cmp	r1, r3
 800293a:	d002      	beq.n	8002942 <__swsetup_r+0x46>
 800293c:	4628      	mov	r0, r5
 800293e:	f7ff fbc5 	bl	80020cc <_free_r>
 8002942:	2300      	movs	r3, #0
 8002944:	6363      	str	r3, [r4, #52]	@ 0x34
 8002946:	89a3      	ldrh	r3, [r4, #12]
 8002948:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800294c:	81a3      	strh	r3, [r4, #12]
 800294e:	2300      	movs	r3, #0
 8002950:	6063      	str	r3, [r4, #4]
 8002952:	6923      	ldr	r3, [r4, #16]
 8002954:	6023      	str	r3, [r4, #0]
 8002956:	89a3      	ldrh	r3, [r4, #12]
 8002958:	f043 0308 	orr.w	r3, r3, #8
 800295c:	81a3      	strh	r3, [r4, #12]
 800295e:	6923      	ldr	r3, [r4, #16]
 8002960:	b94b      	cbnz	r3, 8002976 <__swsetup_r+0x7a>
 8002962:	89a3      	ldrh	r3, [r4, #12]
 8002964:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800296c:	d003      	beq.n	8002976 <__swsetup_r+0x7a>
 800296e:	4621      	mov	r1, r4
 8002970:	4628      	mov	r0, r5
 8002972:	f000 f890 	bl	8002a96 <__smakebuf_r>
 8002976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800297a:	f013 0201 	ands.w	r2, r3, #1
 800297e:	d00a      	beq.n	8002996 <__swsetup_r+0x9a>
 8002980:	2200      	movs	r2, #0
 8002982:	60a2      	str	r2, [r4, #8]
 8002984:	6962      	ldr	r2, [r4, #20]
 8002986:	4252      	negs	r2, r2
 8002988:	61a2      	str	r2, [r4, #24]
 800298a:	6922      	ldr	r2, [r4, #16]
 800298c:	b942      	cbnz	r2, 80029a0 <__swsetup_r+0xa4>
 800298e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002992:	d1c5      	bne.n	8002920 <__swsetup_r+0x24>
 8002994:	bd38      	pop	{r3, r4, r5, pc}
 8002996:	0799      	lsls	r1, r3, #30
 8002998:	bf58      	it	pl
 800299a:	6962      	ldrpl	r2, [r4, #20]
 800299c:	60a2      	str	r2, [r4, #8]
 800299e:	e7f4      	b.n	800298a <__swsetup_r+0x8e>
 80029a0:	2000      	movs	r0, #0
 80029a2:	e7f7      	b.n	8002994 <__swsetup_r+0x98>
 80029a4:	20000018 	.word	0x20000018

080029a8 <_raise_r>:
 80029a8:	291f      	cmp	r1, #31
 80029aa:	b538      	push	{r3, r4, r5, lr}
 80029ac:	4605      	mov	r5, r0
 80029ae:	460c      	mov	r4, r1
 80029b0:	d904      	bls.n	80029bc <_raise_r+0x14>
 80029b2:	2316      	movs	r3, #22
 80029b4:	6003      	str	r3, [r0, #0]
 80029b6:	f04f 30ff 	mov.w	r0, #4294967295
 80029ba:	bd38      	pop	{r3, r4, r5, pc}
 80029bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80029be:	b112      	cbz	r2, 80029c6 <_raise_r+0x1e>
 80029c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80029c4:	b94b      	cbnz	r3, 80029da <_raise_r+0x32>
 80029c6:	4628      	mov	r0, r5
 80029c8:	f000 f830 	bl	8002a2c <_getpid_r>
 80029cc:	4622      	mov	r2, r4
 80029ce:	4601      	mov	r1, r0
 80029d0:	4628      	mov	r0, r5
 80029d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80029d6:	f000 b817 	b.w	8002a08 <_kill_r>
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d00a      	beq.n	80029f4 <_raise_r+0x4c>
 80029de:	1c59      	adds	r1, r3, #1
 80029e0:	d103      	bne.n	80029ea <_raise_r+0x42>
 80029e2:	2316      	movs	r3, #22
 80029e4:	6003      	str	r3, [r0, #0]
 80029e6:	2001      	movs	r0, #1
 80029e8:	e7e7      	b.n	80029ba <_raise_r+0x12>
 80029ea:	2100      	movs	r1, #0
 80029ec:	4620      	mov	r0, r4
 80029ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80029f2:	4798      	blx	r3
 80029f4:	2000      	movs	r0, #0
 80029f6:	e7e0      	b.n	80029ba <_raise_r+0x12>

080029f8 <raise>:
 80029f8:	4b02      	ldr	r3, [pc, #8]	@ (8002a04 <raise+0xc>)
 80029fa:	4601      	mov	r1, r0
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	f7ff bfd3 	b.w	80029a8 <_raise_r>
 8002a02:	bf00      	nop
 8002a04:	20000018 	.word	0x20000018

08002a08 <_kill_r>:
 8002a08:	b538      	push	{r3, r4, r5, lr}
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	4d06      	ldr	r5, [pc, #24]	@ (8002a28 <_kill_r+0x20>)
 8002a0e:	4604      	mov	r4, r0
 8002a10:	4608      	mov	r0, r1
 8002a12:	4611      	mov	r1, r2
 8002a14:	602b      	str	r3, [r5, #0]
 8002a16:	f7fe f86c 	bl	8000af2 <_kill>
 8002a1a:	1c43      	adds	r3, r0, #1
 8002a1c:	d102      	bne.n	8002a24 <_kill_r+0x1c>
 8002a1e:	682b      	ldr	r3, [r5, #0]
 8002a20:	b103      	cbz	r3, 8002a24 <_kill_r+0x1c>
 8002a22:	6023      	str	r3, [r4, #0]
 8002a24:	bd38      	pop	{r3, r4, r5, pc}
 8002a26:	bf00      	nop
 8002a28:	20000228 	.word	0x20000228

08002a2c <_getpid_r>:
 8002a2c:	f7fe b85a 	b.w	8000ae4 <_getpid>

08002a30 <memchr>:
 8002a30:	4603      	mov	r3, r0
 8002a32:	b510      	push	{r4, lr}
 8002a34:	b2c9      	uxtb	r1, r1
 8002a36:	4402      	add	r2, r0
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	d101      	bne.n	8002a42 <memchr+0x12>
 8002a3e:	2000      	movs	r0, #0
 8002a40:	e003      	b.n	8002a4a <memchr+0x1a>
 8002a42:	7804      	ldrb	r4, [r0, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	428c      	cmp	r4, r1
 8002a48:	d1f6      	bne.n	8002a38 <memchr+0x8>
 8002a4a:	bd10      	pop	{r4, pc}

08002a4c <__swhatbuf_r>:
 8002a4c:	b570      	push	{r4, r5, r6, lr}
 8002a4e:	460c      	mov	r4, r1
 8002a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a54:	4615      	mov	r5, r2
 8002a56:	2900      	cmp	r1, #0
 8002a58:	461e      	mov	r6, r3
 8002a5a:	b096      	sub	sp, #88	@ 0x58
 8002a5c:	da0c      	bge.n	8002a78 <__swhatbuf_r+0x2c>
 8002a5e:	89a3      	ldrh	r3, [r4, #12]
 8002a60:	2100      	movs	r1, #0
 8002a62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002a66:	bf14      	ite	ne
 8002a68:	2340      	movne	r3, #64	@ 0x40
 8002a6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002a6e:	2000      	movs	r0, #0
 8002a70:	6031      	str	r1, [r6, #0]
 8002a72:	602b      	str	r3, [r5, #0]
 8002a74:	b016      	add	sp, #88	@ 0x58
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
 8002a78:	466a      	mov	r2, sp
 8002a7a:	f000 f849 	bl	8002b10 <_fstat_r>
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	dbed      	blt.n	8002a5e <__swhatbuf_r+0x12>
 8002a82:	9901      	ldr	r1, [sp, #4]
 8002a84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002a88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002a8c:	4259      	negs	r1, r3
 8002a8e:	4159      	adcs	r1, r3
 8002a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a94:	e7eb      	b.n	8002a6e <__swhatbuf_r+0x22>

08002a96 <__smakebuf_r>:
 8002a96:	898b      	ldrh	r3, [r1, #12]
 8002a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a9a:	079d      	lsls	r5, r3, #30
 8002a9c:	4606      	mov	r6, r0
 8002a9e:	460c      	mov	r4, r1
 8002aa0:	d507      	bpl.n	8002ab2 <__smakebuf_r+0x1c>
 8002aa2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002aa6:	6023      	str	r3, [r4, #0]
 8002aa8:	6123      	str	r3, [r4, #16]
 8002aaa:	2301      	movs	r3, #1
 8002aac:	6163      	str	r3, [r4, #20]
 8002aae:	b003      	add	sp, #12
 8002ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ab2:	466a      	mov	r2, sp
 8002ab4:	ab01      	add	r3, sp, #4
 8002ab6:	f7ff ffc9 	bl	8002a4c <__swhatbuf_r>
 8002aba:	9f00      	ldr	r7, [sp, #0]
 8002abc:	4605      	mov	r5, r0
 8002abe:	4639      	mov	r1, r7
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	f7ff f889 	bl	8001bd8 <_malloc_r>
 8002ac6:	b948      	cbnz	r0, 8002adc <__smakebuf_r+0x46>
 8002ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002acc:	059a      	lsls	r2, r3, #22
 8002ace:	d4ee      	bmi.n	8002aae <__smakebuf_r+0x18>
 8002ad0:	f023 0303 	bic.w	r3, r3, #3
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	81a3      	strh	r3, [r4, #12]
 8002ada:	e7e2      	b.n	8002aa2 <__smakebuf_r+0xc>
 8002adc:	89a3      	ldrh	r3, [r4, #12]
 8002ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ae6:	81a3      	strh	r3, [r4, #12]
 8002ae8:	9b01      	ldr	r3, [sp, #4]
 8002aea:	6020      	str	r0, [r4, #0]
 8002aec:	b15b      	cbz	r3, 8002b06 <__smakebuf_r+0x70>
 8002aee:	4630      	mov	r0, r6
 8002af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002af4:	f000 f81e 	bl	8002b34 <_isatty_r>
 8002af8:	b128      	cbz	r0, 8002b06 <__smakebuf_r+0x70>
 8002afa:	89a3      	ldrh	r3, [r4, #12]
 8002afc:	f023 0303 	bic.w	r3, r3, #3
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	81a3      	strh	r3, [r4, #12]
 8002b06:	89a3      	ldrh	r3, [r4, #12]
 8002b08:	431d      	orrs	r5, r3
 8002b0a:	81a5      	strh	r5, [r4, #12]
 8002b0c:	e7cf      	b.n	8002aae <__smakebuf_r+0x18>
	...

08002b10 <_fstat_r>:
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	2300      	movs	r3, #0
 8002b14:	4d06      	ldr	r5, [pc, #24]	@ (8002b30 <_fstat_r+0x20>)
 8002b16:	4604      	mov	r4, r0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	602b      	str	r3, [r5, #0]
 8002b1e:	f7fe f847 	bl	8000bb0 <_fstat>
 8002b22:	1c43      	adds	r3, r0, #1
 8002b24:	d102      	bne.n	8002b2c <_fstat_r+0x1c>
 8002b26:	682b      	ldr	r3, [r5, #0]
 8002b28:	b103      	cbz	r3, 8002b2c <_fstat_r+0x1c>
 8002b2a:	6023      	str	r3, [r4, #0]
 8002b2c:	bd38      	pop	{r3, r4, r5, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000228 	.word	0x20000228

08002b34 <_isatty_r>:
 8002b34:	b538      	push	{r3, r4, r5, lr}
 8002b36:	2300      	movs	r3, #0
 8002b38:	4d05      	ldr	r5, [pc, #20]	@ (8002b50 <_isatty_r+0x1c>)
 8002b3a:	4604      	mov	r4, r0
 8002b3c:	4608      	mov	r0, r1
 8002b3e:	602b      	str	r3, [r5, #0]
 8002b40:	f7fe f845 	bl	8000bce <_isatty>
 8002b44:	1c43      	adds	r3, r0, #1
 8002b46:	d102      	bne.n	8002b4e <_isatty_r+0x1a>
 8002b48:	682b      	ldr	r3, [r5, #0]
 8002b4a:	b103      	cbz	r3, 8002b4e <_isatty_r+0x1a>
 8002b4c:	6023      	str	r3, [r4, #0]
 8002b4e:	bd38      	pop	{r3, r4, r5, pc}
 8002b50:	20000228 	.word	0x20000228

08002b54 <_init>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr

08002b60 <_fini>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	bf00      	nop
 8002b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b66:	bc08      	pop	{r3}
 8002b68:	469e      	mov	lr, r3
 8002b6a:	4770      	bx	lr
