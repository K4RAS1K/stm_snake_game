
snacke_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c70  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002d7c  08002d7c  00003d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e7c  08002e7c  0000406c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e7c  08002e7c  0000406c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e7c  08002e7c  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e7c  08002e7c  00003e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e80  08002e80  00003e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002e84  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  2000006c  08002ef0  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08002ef0  0000423c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005755  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001661  00000000  00000000  000097ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  0000ae50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000511  00000000  00000000  0000b538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017821  00000000  00000000  0000ba49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000082a7  00000000  00000000  0002326a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081342  00000000  00000000  0002b511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac853  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002398  00000000  00000000  000ac898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000aec30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d64 	.word	0x08002d64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002d64 	.word	0x08002d64

0800014c <initialize_body>:
    uint8_t x1;
    uint8_t y1;
} Snake;


Snake* initialize_body() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
uint8_t size = 2;
 8000152:	2302      	movs	r3, #2
 8000154:	71bb      	strb	r3, [r7, #6]
Snake *body = malloc(size * sizeof(Snake));
 8000156:	79bb      	ldrb	r3, [r7, #6]
 8000158:	009b      	lsls	r3, r3, #2
 800015a:	4618      	mov	r0, r3
 800015c:	f001 fdec 	bl	8001d38 <malloc>
 8000160:	4603      	mov	r3, r0
 8000162:	603b      	str	r3, [r7, #0]
for (uint8_t i = 0; i < size; i++) {
 8000164:	2300      	movs	r3, #0
 8000166:	71fb      	strb	r3, [r7, #7]
 8000168:	e022      	b.n	80001b0 <initialize_body+0x64>
	  body[i].x0 = 5+i;
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	009b      	lsls	r3, r3, #2
 800016e:	683a      	ldr	r2, [r7, #0]
 8000170:	4413      	add	r3, r2
 8000172:	79fa      	ldrb	r2, [r7, #7]
 8000174:	3205      	adds	r2, #5
 8000176:	b2d2      	uxtb	r2, r2
 8000178:	701a      	strb	r2, [r3, #0]
	  body[i].y0 = 5+i;
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	009b      	lsls	r3, r3, #2
 800017e:	683a      	ldr	r2, [r7, #0]
 8000180:	4413      	add	r3, r2
 8000182:	79fa      	ldrb	r2, [r7, #7]
 8000184:	3205      	adds	r2, #5
 8000186:	b2d2      	uxtb	r2, r2
 8000188:	705a      	strb	r2, [r3, #1]
	  body[i].x1 = 5+i;
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	009b      	lsls	r3, r3, #2
 800018e:	683a      	ldr	r2, [r7, #0]
 8000190:	4413      	add	r3, r2
 8000192:	79fa      	ldrb	r2, [r7, #7]
 8000194:	3205      	adds	r2, #5
 8000196:	b2d2      	uxtb	r2, r2
 8000198:	709a      	strb	r2, [r3, #2]
	  body[i].y1 = 5+i;
 800019a:	79fb      	ldrb	r3, [r7, #7]
 800019c:	009b      	lsls	r3, r3, #2
 800019e:	683a      	ldr	r2, [r7, #0]
 80001a0:	4413      	add	r3, r2
 80001a2:	79fa      	ldrb	r2, [r7, #7]
 80001a4:	3205      	adds	r2, #5
 80001a6:	b2d2      	uxtb	r2, r2
 80001a8:	70da      	strb	r2, [r3, #3]
for (uint8_t i = 0; i < size; i++) {
 80001aa:	79fb      	ldrb	r3, [r7, #7]
 80001ac:	3301      	adds	r3, #1
 80001ae:	71fb      	strb	r3, [r7, #7]
 80001b0:	79fa      	ldrb	r2, [r7, #7]
 80001b2:	79bb      	ldrb	r3, [r7, #6]
 80001b4:	429a      	cmp	r2, r3
 80001b6:	d3d8      	bcc.n	800016a <initialize_body+0x1e>
	}
	return body;
 80001b8:	683b      	ldr	r3, [r7, #0]
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3708      	adds	r7, #8
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
	...

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b590      	push	{r4, r7, lr}
 80001c6:	b089      	sub	sp, #36	@ 0x24
 80001c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ca:	f000 fe53 	bl	8000e74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ce:	f000 f9a9 	bl	8000524 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d2:	f000 fa23 	bl	800061c <MX_GPIO_Init>
  MX_SPI1_Init();
 80001d6:	f000 f9eb 	bl	80005b0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80001da:	f000 faef 	bl	80007bc <ST7735_Init>

  ST7735_DrawRect(0, 0, 140, 140, ST7735_COLOR_WHITE);
 80001de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	238c      	movs	r3, #140	@ 0x8c
 80001e6:	228c      	movs	r2, #140	@ 0x8c
 80001e8:	2100      	movs	r1, #0
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 fc58 	bl	8000aa0 <ST7735_DrawRect>

  Snake head;

  head.x0 = 70;
 80001f0:	2346      	movs	r3, #70	@ 0x46
 80001f2:	723b      	strb	r3, [r7, #8]
  head.y0 = 70;
 80001f4:	2346      	movs	r3, #70	@ 0x46
 80001f6:	727b      	strb	r3, [r7, #9]
  head.x1 = 74;
 80001f8:	234a      	movs	r3, #74	@ 0x4a
 80001fa:	72bb      	strb	r3, [r7, #10]
  head.y1 = 74;
 80001fc:	234a      	movs	r3, #74	@ 0x4a
 80001fe:	72fb      	strb	r3, [r7, #11]

  Snake *body = initialize_body();
 8000200:	f7ff ffa4 	bl	800014c <initialize_body>
 8000204:	6138      	str	r0, [r7, #16]

  Snake after_tail;

  after_tail.x0 = 15;
 8000206:	230f      	movs	r3, #15
 8000208:	713b      	strb	r3, [r7, #4]
  after_tail.y0 = 15;
 800020a:	230f      	movs	r3, #15
 800020c:	717b      	strb	r3, [r7, #5]
  after_tail.x1 = 15;
 800020e:	230f      	movs	r3, #15
 8000210:	71bb      	strb	r3, [r7, #6]
  after_tail.y1 = 15;
 8000212:	230f      	movs	r3, #15
 8000214:	71fb      	strb	r3, [r7, #7]


  srand(10);
 8000216:	200a      	movs	r0, #10
 8000218:	f001 fe44 	bl	8001ea4 <srand>

  uint16_t body_size = 2;
 800021c:	2302      	movs	r3, #2
 800021e:	81fb      	strh	r3, [r7, #14]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ST7735_DrawRect(after_tail.x0, after_tail.y0, after_tail.x1, after_tail.y1, ST7735_COLOR_WHITE);
 8000220:	793b      	ldrb	r3, [r7, #4]
 8000222:	4618      	mov	r0, r3
 8000224:	797b      	ldrb	r3, [r7, #5]
 8000226:	4619      	mov	r1, r3
 8000228:	79bb      	ldrb	r3, [r7, #6]
 800022a:	461a      	mov	r2, r3
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	461c      	mov	r4, r3
 8000230:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	4623      	mov	r3, r4
 8000238:	f000 fc32 	bl	8000aa0 <ST7735_DrawRect>
	  for(uint16_t i = 0; i < body_size; i++)
 800023c:	2300      	movs	r3, #0
 800023e:	82fb      	strh	r3, [r7, #22]
 8000240:	e021      	b.n	8000286 <main+0xc2>
	  {
		  ST7735_DrawRect(body[i].x0, body[i].y0, body[i].x1, body[i].y1, ST7735_COLOR_GREEN);
 8000242:	8afb      	ldrh	r3, [r7, #22]
 8000244:	009b      	lsls	r3, r3, #2
 8000246:	693a      	ldr	r2, [r7, #16]
 8000248:	4413      	add	r3, r2
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	4618      	mov	r0, r3
 800024e:	8afb      	ldrh	r3, [r7, #22]
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	693a      	ldr	r2, [r7, #16]
 8000254:	4413      	add	r3, r2
 8000256:	785b      	ldrb	r3, [r3, #1]
 8000258:	4619      	mov	r1, r3
 800025a:	8afb      	ldrh	r3, [r7, #22]
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	693a      	ldr	r2, [r7, #16]
 8000260:	4413      	add	r3, r2
 8000262:	789b      	ldrb	r3, [r3, #2]
 8000264:	461c      	mov	r4, r3
 8000266:	8afb      	ldrh	r3, [r7, #22]
 8000268:	009b      	lsls	r3, r3, #2
 800026a:	693a      	ldr	r2, [r7, #16]
 800026c:	4413      	add	r3, r2
 800026e:	78db      	ldrb	r3, [r3, #3]
 8000270:	461a      	mov	r2, r3
 8000272:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	4613      	mov	r3, r2
 800027a:	4622      	mov	r2, r4
 800027c:	f000 fc10 	bl	8000aa0 <ST7735_DrawRect>
	  for(uint16_t i = 0; i < body_size; i++)
 8000280:	8afb      	ldrh	r3, [r7, #22]
 8000282:	3301      	adds	r3, #1
 8000284:	82fb      	strh	r3, [r7, #22]
 8000286:	8afa      	ldrh	r2, [r7, #22]
 8000288:	89fb      	ldrh	r3, [r7, #14]
 800028a:	429a      	cmp	r2, r3
 800028c:	d3d9      	bcc.n	8000242 <main+0x7e>
	  }
	  ST7735_DrawRect(head.x0, head.y0, head.x1, head.y1, ST7735_COLOR_BLUE);
 800028e:	7a3b      	ldrb	r3, [r7, #8]
 8000290:	4618      	mov	r0, r3
 8000292:	7a7b      	ldrb	r3, [r7, #9]
 8000294:	4619      	mov	r1, r3
 8000296:	7abb      	ldrb	r3, [r7, #10]
 8000298:	461a      	mov	r2, r3
 800029a:	7afb      	ldrb	r3, [r7, #11]
 800029c:	461c      	mov	r4, r3
 800029e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80002a2:	9300      	str	r3, [sp, #0]
 80002a4:	4623      	mov	r3, r4
 80002a6:	f000 fbfb 	bl	8000aa0 <ST7735_DrawRect>

	  uint8_t move_num = rand()%4;
 80002aa:	f001 fe29 	bl	8001f00 <rand>
 80002ae:	4603      	mov	r3, r0
 80002b0:	425a      	negs	r2, r3
 80002b2:	f003 0303 	and.w	r3, r3, #3
 80002b6:	f002 0203 	and.w	r2, r2, #3
 80002ba:	bf58      	it	pl
 80002bc:	4253      	negpl	r3, r2
 80002be:	737b      	strb	r3, [r7, #13]

	  after_tail.x0 = body[0].x0;
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	781b      	ldrb	r3, [r3, #0]
 80002c4:	713b      	strb	r3, [r7, #4]
	  after_tail.y0 = body[0].y0;
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	785b      	ldrb	r3, [r3, #1]
 80002ca:	717b      	strb	r3, [r7, #5]
	  after_tail.x1 = body[0].x1;
 80002cc:	693b      	ldr	r3, [r7, #16]
 80002ce:	789b      	ldrb	r3, [r3, #2]
 80002d0:	71bb      	strb	r3, [r7, #6]
	  after_tail.y1 = body[0].y1;
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	78db      	ldrb	r3, [r3, #3]
 80002d6:	71fb      	strb	r3, [r7, #7]

	  for(uint16_t i = 0; i < body_size - 1; i++)
 80002d8:	2300      	movs	r3, #0
 80002da:	82bb      	strh	r3, [r7, #20]
 80002dc:	e02e      	b.n	800033c <main+0x178>
	  {
		  body[i].x0 = body[i + 1].x0;
 80002de:	8abb      	ldrh	r3, [r7, #20]
 80002e0:	3301      	adds	r3, #1
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	693a      	ldr	r2, [r7, #16]
 80002e6:	441a      	add	r2, r3
 80002e8:	8abb      	ldrh	r3, [r7, #20]
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	6939      	ldr	r1, [r7, #16]
 80002ee:	440b      	add	r3, r1
 80002f0:	7812      	ldrb	r2, [r2, #0]
 80002f2:	701a      	strb	r2, [r3, #0]
		  body[i].y0 = body[i + 1].y0;
 80002f4:	8abb      	ldrh	r3, [r7, #20]
 80002f6:	3301      	adds	r3, #1
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	693a      	ldr	r2, [r7, #16]
 80002fc:	441a      	add	r2, r3
 80002fe:	8abb      	ldrh	r3, [r7, #20]
 8000300:	009b      	lsls	r3, r3, #2
 8000302:	6939      	ldr	r1, [r7, #16]
 8000304:	440b      	add	r3, r1
 8000306:	7852      	ldrb	r2, [r2, #1]
 8000308:	705a      	strb	r2, [r3, #1]
		  body[i].x1 = body[i + 1].x1;
 800030a:	8abb      	ldrh	r3, [r7, #20]
 800030c:	3301      	adds	r3, #1
 800030e:	009b      	lsls	r3, r3, #2
 8000310:	693a      	ldr	r2, [r7, #16]
 8000312:	441a      	add	r2, r3
 8000314:	8abb      	ldrh	r3, [r7, #20]
 8000316:	009b      	lsls	r3, r3, #2
 8000318:	6939      	ldr	r1, [r7, #16]
 800031a:	440b      	add	r3, r1
 800031c:	7892      	ldrb	r2, [r2, #2]
 800031e:	709a      	strb	r2, [r3, #2]
		  body[i].y1 = body[i + 1].y1;
 8000320:	8abb      	ldrh	r3, [r7, #20]
 8000322:	3301      	adds	r3, #1
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	693a      	ldr	r2, [r7, #16]
 8000328:	441a      	add	r2, r3
 800032a:	8abb      	ldrh	r3, [r7, #20]
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	6939      	ldr	r1, [r7, #16]
 8000330:	440b      	add	r3, r1
 8000332:	78d2      	ldrb	r2, [r2, #3]
 8000334:	70da      	strb	r2, [r3, #3]
	  for(uint16_t i = 0; i < body_size - 1; i++)
 8000336:	8abb      	ldrh	r3, [r7, #20]
 8000338:	3301      	adds	r3, #1
 800033a:	82bb      	strh	r3, [r7, #20]
 800033c:	8aba      	ldrh	r2, [r7, #20]
 800033e:	89fb      	ldrh	r3, [r7, #14]
 8000340:	3b01      	subs	r3, #1
 8000342:	429a      	cmp	r2, r3
 8000344:	dbcb      	blt.n	80002de <main+0x11a>
	  }


	  body[body_size - 1].x0 = head.x0;
 8000346:	89fb      	ldrh	r3, [r7, #14]
 8000348:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800034c:	3b01      	subs	r3, #1
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	693a      	ldr	r2, [r7, #16]
 8000352:	4413      	add	r3, r2
 8000354:	7a3a      	ldrb	r2, [r7, #8]
 8000356:	701a      	strb	r2, [r3, #0]
	  body[body_size - 1].y0 = head.y0;
 8000358:	89fb      	ldrh	r3, [r7, #14]
 800035a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800035e:	3b01      	subs	r3, #1
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	693a      	ldr	r2, [r7, #16]
 8000364:	4413      	add	r3, r2
 8000366:	7a7a      	ldrb	r2, [r7, #9]
 8000368:	705a      	strb	r2, [r3, #1]
	  body[body_size - 1].x1 = head.x1;
 800036a:	89fb      	ldrh	r3, [r7, #14]
 800036c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000370:	3b01      	subs	r3, #1
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	693a      	ldr	r2, [r7, #16]
 8000376:	4413      	add	r3, r2
 8000378:	7aba      	ldrb	r2, [r7, #10]
 800037a:	709a      	strb	r2, [r3, #2]
	  body[body_size - 1].y1 = head.y1;
 800037c:	89fb      	ldrh	r3, [r7, #14]
 800037e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000382:	3b01      	subs	r3, #1
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	693a      	ldr	r2, [r7, #16]
 8000388:	4413      	add	r3, r2
 800038a:	7afa      	ldrb	r2, [r7, #11]
 800038c:	70da      	strb	r2, [r3, #3]

	  switch (move_num){
 800038e:	7b7b      	ldrb	r3, [r7, #13]
 8000390:	2b03      	cmp	r3, #3
 8000392:	f200 8092 	bhi.w	80004ba <main+0x2f6>
 8000396:	a201      	add	r2, pc, #4	@ (adr r2, 800039c <main+0x1d8>)
 8000398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039c:	080003ad 	.word	0x080003ad
 80003a0:	080003ed 	.word	0x080003ed
 80003a4:	0800042d 	.word	0x0800042d
 80003a8:	0800046d 	.word	0x0800046d
	  	  case 0://move_right
	  		  if (flag_move_left == false) {
 80003ac:	4b55      	ldr	r3, [pc, #340]	@ (8000504 <main+0x340>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	f083 0301 	eor.w	r3, r3, #1
 80003b4:	b2db      	uxtb	r3, r3
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d078      	beq.n	80004ac <main+0x2e8>
	  			  move_num_x0 = 5;
 80003ba:	4b53      	ldr	r3, [pc, #332]	@ (8000508 <main+0x344>)
 80003bc:	2205      	movs	r2, #5
 80003be:	701a      	strb	r2, [r3, #0]
	  			  move_num_x1 = 5;
 80003c0:	4b52      	ldr	r3, [pc, #328]	@ (800050c <main+0x348>)
 80003c2:	2205      	movs	r2, #5
 80003c4:	701a      	strb	r2, [r3, #0]
	  			  move_num_y0 = 0;
 80003c6:	4b52      	ldr	r3, [pc, #328]	@ (8000510 <main+0x34c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	701a      	strb	r2, [r3, #0]
	  			  move_num_y1 = 0;
 80003cc:	4b51      	ldr	r3, [pc, #324]	@ (8000514 <main+0x350>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	701a      	strb	r2, [r3, #0]

	  			  flag_move_right = true;
 80003d2:	4b51      	ldr	r3, [pc, #324]	@ (8000518 <main+0x354>)
 80003d4:	2201      	movs	r2, #1
 80003d6:	701a      	strb	r2, [r3, #0]
	  			  flag_move_left = false;
 80003d8:	4b4a      	ldr	r3, [pc, #296]	@ (8000504 <main+0x340>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
	  			  flag_move_down = false;
 80003de:	4b4f      	ldr	r3, [pc, #316]	@ (800051c <main+0x358>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	701a      	strb	r2, [r3, #0]
	  			  flag_move_up = false;
 80003e4:	4b4e      	ldr	r3, [pc, #312]	@ (8000520 <main+0x35c>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80003ea:	e05f      	b.n	80004ac <main+0x2e8>
	  	  case 1://move_left
	  		if (flag_move_right == false) {
 80003ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000518 <main+0x354>)
 80003ee:	781b      	ldrb	r3, [r3, #0]
 80003f0:	f083 0301 	eor.w	r3, r3, #1
 80003f4:	b2db      	uxtb	r3, r3
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d05a      	beq.n	80004b0 <main+0x2ec>
	  			move_num_x0 = -5;
 80003fa:	4b43      	ldr	r3, [pc, #268]	@ (8000508 <main+0x344>)
 80003fc:	22fb      	movs	r2, #251	@ 0xfb
 80003fe:	701a      	strb	r2, [r3, #0]
	  			move_num_x1 = -5;
 8000400:	4b42      	ldr	r3, [pc, #264]	@ (800050c <main+0x348>)
 8000402:	22fb      	movs	r2, #251	@ 0xfb
 8000404:	701a      	strb	r2, [r3, #0]
	  			move_num_y0 = 0;
 8000406:	4b42      	ldr	r3, [pc, #264]	@ (8000510 <main+0x34c>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	  			move_num_y1 = 0;
 800040c:	4b41      	ldr	r3, [pc, #260]	@ (8000514 <main+0x350>)
 800040e:	2200      	movs	r2, #0
 8000410:	701a      	strb	r2, [r3, #0]

	  			flag_move_right = false;
 8000412:	4b41      	ldr	r3, [pc, #260]	@ (8000518 <main+0x354>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
	  			flag_move_left = true;
 8000418:	4b3a      	ldr	r3, [pc, #232]	@ (8000504 <main+0x340>)
 800041a:	2201      	movs	r2, #1
 800041c:	701a      	strb	r2, [r3, #0]
	  			flag_move_down = false;
 800041e:	4b3f      	ldr	r3, [pc, #252]	@ (800051c <main+0x358>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
	  			flag_move_up = false;
 8000424:	4b3e      	ldr	r3, [pc, #248]	@ (8000520 <main+0x35c>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 800042a:	e041      	b.n	80004b0 <main+0x2ec>
	  	  case 2://move_down
	  		if (flag_move_up == false) {
 800042c:	4b3c      	ldr	r3, [pc, #240]	@ (8000520 <main+0x35c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	f083 0301 	eor.w	r3, r3, #1
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b00      	cmp	r3, #0
 8000438:	d03c      	beq.n	80004b4 <main+0x2f0>
	  			move_num_x0 = 0;
 800043a:	4b33      	ldr	r3, [pc, #204]	@ (8000508 <main+0x344>)
 800043c:	2200      	movs	r2, #0
 800043e:	701a      	strb	r2, [r3, #0]
	  			move_num_x1 = 0;
 8000440:	4b32      	ldr	r3, [pc, #200]	@ (800050c <main+0x348>)
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
	  			move_num_y0 = 5;
 8000446:	4b32      	ldr	r3, [pc, #200]	@ (8000510 <main+0x34c>)
 8000448:	2205      	movs	r2, #5
 800044a:	701a      	strb	r2, [r3, #0]
	  			move_num_y1 = 5;
 800044c:	4b31      	ldr	r3, [pc, #196]	@ (8000514 <main+0x350>)
 800044e:	2205      	movs	r2, #5
 8000450:	701a      	strb	r2, [r3, #0]

	  			flag_move_right = false;
 8000452:	4b31      	ldr	r3, [pc, #196]	@ (8000518 <main+0x354>)
 8000454:	2200      	movs	r2, #0
 8000456:	701a      	strb	r2, [r3, #0]
	  			flag_move_left = false;
 8000458:	4b2a      	ldr	r3, [pc, #168]	@ (8000504 <main+0x340>)
 800045a:	2200      	movs	r2, #0
 800045c:	701a      	strb	r2, [r3, #0]
	  			flag_move_down = true;
 800045e:	4b2f      	ldr	r3, [pc, #188]	@ (800051c <main+0x358>)
 8000460:	2201      	movs	r2, #1
 8000462:	701a      	strb	r2, [r3, #0]
	  			flag_move_up = false;
 8000464:	4b2e      	ldr	r3, [pc, #184]	@ (8000520 <main+0x35c>)
 8000466:	2200      	movs	r2, #0
 8000468:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 800046a:	e023      	b.n	80004b4 <main+0x2f0>
	  	  case 3://move_up
	  		if (flag_move_down == false) {
 800046c:	4b2b      	ldr	r3, [pc, #172]	@ (800051c <main+0x358>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	f083 0301 	eor.w	r3, r3, #1
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d01e      	beq.n	80004b8 <main+0x2f4>
	  			move_num_x0 = 0;
 800047a:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <main+0x344>)
 800047c:	2200      	movs	r2, #0
 800047e:	701a      	strb	r2, [r3, #0]
	  			move_num_x1 = 0;
 8000480:	4b22      	ldr	r3, [pc, #136]	@ (800050c <main+0x348>)
 8000482:	2200      	movs	r2, #0
 8000484:	701a      	strb	r2, [r3, #0]
	  			move_num_y0 = -5;
 8000486:	4b22      	ldr	r3, [pc, #136]	@ (8000510 <main+0x34c>)
 8000488:	22fb      	movs	r2, #251	@ 0xfb
 800048a:	701a      	strb	r2, [r3, #0]
	  			move_num_y1 = -5;
 800048c:	4b21      	ldr	r3, [pc, #132]	@ (8000514 <main+0x350>)
 800048e:	22fb      	movs	r2, #251	@ 0xfb
 8000490:	701a      	strb	r2, [r3, #0]

	  			flag_move_right = false;
 8000492:	4b21      	ldr	r3, [pc, #132]	@ (8000518 <main+0x354>)
 8000494:	2200      	movs	r2, #0
 8000496:	701a      	strb	r2, [r3, #0]
	  			flag_move_left = false;
 8000498:	4b1a      	ldr	r3, [pc, #104]	@ (8000504 <main+0x340>)
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
	  			flag_move_down = false;
 800049e:	4b1f      	ldr	r3, [pc, #124]	@ (800051c <main+0x358>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
	  			flag_move_up = true;
 80004a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000520 <main+0x35c>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80004aa:	e005      	b.n	80004b8 <main+0x2f4>
	  		  break;
 80004ac:	bf00      	nop
 80004ae:	e004      	b.n	80004ba <main+0x2f6>
	  		  break;
 80004b0:	bf00      	nop
 80004b2:	e002      	b.n	80004ba <main+0x2f6>
	  		  break;
 80004b4:	bf00      	nop
 80004b6:	e000      	b.n	80004ba <main+0x2f6>
	  		  break;
 80004b8:	bf00      	nop
	  }


	  head.x0 = head.x0 + move_num_x0;
 80004ba:	7a3a      	ldrb	r2, [r7, #8]
 80004bc:	4b12      	ldr	r3, [pc, #72]	@ (8000508 <main+0x344>)
 80004be:	f993 3000 	ldrsb.w	r3, [r3]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4413      	add	r3, r2
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	723b      	strb	r3, [r7, #8]
	  head.x1 = head.x1 + move_num_x1;
 80004ca:	7aba      	ldrb	r2, [r7, #10]
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <main+0x348>)
 80004ce:	f993 3000 	ldrsb.w	r3, [r3]
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	4413      	add	r3, r2
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	72bb      	strb	r3, [r7, #10]
	  head.y0 = head.y0 + move_num_y0;
 80004da:	7a7a      	ldrb	r2, [r7, #9]
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <main+0x34c>)
 80004de:	f993 3000 	ldrsb.w	r3, [r3]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	4413      	add	r3, r2
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	727b      	strb	r3, [r7, #9]
	  head.y1 = head.y1 + move_num_y1;
 80004ea:	7afa      	ldrb	r2, [r7, #11]
 80004ec:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <main+0x350>)
 80004ee:	f993 3000 	ldrsb.w	r3, [r3]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	4413      	add	r3, r2
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	72fb      	strb	r3, [r7, #11]

	  HAL_Delay(500);
 80004fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004fe:	f000 fd1b 	bl	8000f38 <HAL_Delay>
  {
 8000502:	e68d      	b.n	8000220 <main+0x5c>
 8000504:	200000e1 	.word	0x200000e1
 8000508:	20000000 	.word	0x20000000
 800050c:	20000001 	.word	0x20000001
 8000510:	200000e4 	.word	0x200000e4
 8000514:	200000e5 	.word	0x200000e5
 8000518:	200000e0 	.word	0x200000e0
 800051c:	200000e2 	.word	0x200000e2
 8000520:	200000e3 	.word	0x200000e3

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b090      	sub	sp, #64	@ 0x40
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0318 	add.w	r3, r7, #24
 800052e:	2228      	movs	r2, #40	@ 0x28
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f001 fe27 	bl	8002186 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	605a      	str	r2, [r3, #4]
 8000540:	609a      	str	r2, [r3, #8]
 8000542:	60da      	str	r2, [r3, #12]
 8000544:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800054a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800054e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000550:	2300      	movs	r3, #0
 8000552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000554:	2301      	movs	r3, #1
 8000556:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800055c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000560:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000562:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000566:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	f107 0318 	add.w	r3, r7, #24
 800056c:	4618      	mov	r0, r3
 800056e:	f000 ff7f 	bl	8001470 <HAL_RCC_OscConfig>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000578:	f000 f89c 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057c:	230f      	movs	r3, #15
 800057e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000580:	2302      	movs	r3, #2
 8000582:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800058c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2102      	movs	r1, #2
 8000596:	4618      	mov	r0, r3
 8000598:	f001 f9ec 	bl	8001974 <HAL_RCC_ClockConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005a2:	f000 f887 	bl	80006b4 <Error_Handler>
  }
}
 80005a6:	bf00      	nop
 80005a8:	3740      	adds	r7, #64	@ 0x40
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005b4:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005b6:	4a18      	ldr	r2, [pc, #96]	@ (8000618 <MX_SPI1_Init+0x68>)
 80005b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ba:	4b16      	ldr	r3, [pc, #88]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005c2:	4b14      	ldr	r3, [pc, #80]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005da:	4b0e      	ldr	r3, [pc, #56]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005e4:	2208      	movs	r2, #8
 80005e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ee:	4b09      	ldr	r3, [pc, #36]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005f4:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005fa:	4b06      	ldr	r3, [pc, #24]	@ (8000614 <MX_SPI1_Init+0x64>)
 80005fc:	220a      	movs	r2, #10
 80005fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000600:	4804      	ldr	r0, [pc, #16]	@ (8000614 <MX_SPI1_Init+0x64>)
 8000602:	f001 fb15 	bl	8001c30 <HAL_SPI_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800060c:	f000 f852 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000610:	bf00      	nop
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000088 	.word	0x20000088
 8000618:	40013000 	.word	0x40013000

0800061c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000622:	f107 0310 	add.w	r3, r7, #16
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000630:	4b1e      	ldr	r3, [pc, #120]	@ (80006ac <MX_GPIO_Init+0x90>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	4a1d      	ldr	r2, [pc, #116]	@ (80006ac <MX_GPIO_Init+0x90>)
 8000636:	f043 0320 	orr.w	r3, r3, #32
 800063a:	6193      	str	r3, [r2, #24]
 800063c:	4b1b      	ldr	r3, [pc, #108]	@ (80006ac <MX_GPIO_Init+0x90>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	f003 0320 	and.w	r3, r3, #32
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <MX_GPIO_Init+0x90>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <MX_GPIO_Init+0x90>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <MX_GPIO_Init+0x90>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_GPIO_Init+0x90>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a11      	ldr	r2, [pc, #68]	@ (80006ac <MX_GPIO_Init+0x90>)
 8000666:	f043 0308 	orr.w	r3, r3, #8
 800066a:	6193      	str	r3, [r2, #24]
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_GPIO_Init+0x90>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	f003 0308 	and.w	r3, r3, #8
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 800067e:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_GPIO_Init+0x94>)
 8000680:	f000 fede 	bl	8001440 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000684:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8000688:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	2301      	movs	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	2300      	movs	r3, #0
 8000690:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000692:	2302      	movs	r3, #2
 8000694:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000696:	f107 0310 	add.w	r3, r7, #16
 800069a:	4619      	mov	r1, r3
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_GPIO_Init+0x94>)
 800069e:	f000 fd53 	bl	8001148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a2:	bf00      	nop
 80006a4:	3720      	adds	r7, #32
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010c00 	.word	0x40010c00

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <Error_Handler+0x8>

080006c0 <ST7735_SendByte>:

/* Functions -----------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
void ST7735_SendByte(uint8_t data)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  // HAL_SPI_Transmit(&hspi1, &data, 1, ST7735_SPI_TIMEOUT);
  while((SPI1->SR & SPI_SR_TXE) == RESET);
 80006ca:	bf00      	nop
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <ST7735_SendByte+0x28>)
 80006ce:	689b      	ldr	r3, [r3, #8]
 80006d0:	f003 0302 	and.w	r3, r3, #2
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0f9      	beq.n	80006cc <ST7735_SendByte+0xc>
  SPI1->DR = data;
 80006d8:	4a03      	ldr	r2, [pc, #12]	@ (80006e8 <ST7735_SendByte+0x28>)
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	60d3      	str	r3, [r2, #12]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr
 80006e8:	40013000 	.word	0x40013000

080006ec <ST7735_WaitLastData>:



/*----------------------------------------------------------------------------*/
void ST7735_WaitLastData()
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  while((SPI1->SR & SPI_SR_TXE) == RESET);
 80006f0:	bf00      	nop
 80006f2:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <ST7735_WaitLastData+0x2c>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	f003 0302 	and.w	r3, r3, #2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <ST7735_WaitLastData+0x6>
  while((SPI1->SR & SPI_SR_BSY) != RESET);
 80006fe:	bf00      	nop
 8000700:	4b05      	ldr	r3, [pc, #20]	@ (8000718 <ST7735_WaitLastData+0x2c>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000708:	2b00      	cmp	r3, #0
 800070a:	d1f9      	bne.n	8000700 <ST7735_WaitLastData+0x14>
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	40013000 	.word	0x40013000

0800071c <ST7735_SendCommand>:



/*----------------------------------------------------------------------------*/
void ST7735_SendCommand(uint8_t data)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	2140      	movs	r1, #64	@ 0x40
 800072a:	4806      	ldr	r0, [pc, #24]	@ (8000744 <ST7735_SendCommand+0x28>)
 800072c:	f000 fe88 	bl	8001440 <HAL_GPIO_WritePin>
  ST7735_SendByte(data);
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ffc4 	bl	80006c0 <ST7735_SendByte>
  ST7735_WaitLastData();
 8000738:	f7ff ffd8 	bl	80006ec <ST7735_WaitLastData>
}
 800073c:	bf00      	nop
 800073e:	3708      	adds	r7, #8
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40010c00 	.word	0x40010c00

08000748 <ST7735_SendData>:



/*----------------------------------------------------------------------------*/
void ST7735_SendData(uint8_t data)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 8000752:	2201      	movs	r2, #1
 8000754:	2140      	movs	r1, #64	@ 0x40
 8000756:	4806      	ldr	r0, [pc, #24]	@ (8000770 <ST7735_SendData+0x28>)
 8000758:	f000 fe72 	bl	8001440 <HAL_GPIO_WritePin>
  ST7735_SendByte(data);
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ffae 	bl	80006c0 <ST7735_SendByte>
  ST7735_WaitLastData();
 8000764:	f7ff ffc2 	bl	80006ec <ST7735_WaitLastData>
}
 8000768:	bf00      	nop
 800076a:	3708      	adds	r7, #8
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40010c00 	.word	0x40010c00

08000774 <ST7735_SendDataMultiple>:



/*----------------------------------------------------------------------------*/
void ST7735_SendDataMultiple(uint8_t *data, uint32_t num)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2140      	movs	r1, #64	@ 0x40
 8000782:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <ST7735_SendDataMultiple+0x44>)
 8000784:	f000 fe5c 	bl	8001440 <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < num; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	e00a      	b.n	80007a4 <ST7735_SendDataMultiple+0x30>
  {
    ST7735_SendByte(*data);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff94 	bl	80006c0 <ST7735_SendByte>
    data++;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3301      	adds	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
  for (uint32_t i = 0; i < num; i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d3f0      	bcc.n	800078e <ST7735_SendDataMultiple+0x1a>
  }

  ST7735_WaitLastData();
 80007ac:	f7ff ff9e 	bl	80006ec <ST7735_WaitLastData>
}
 80007b0:	bf00      	nop
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40010c00 	.word	0x40010c00

080007bc <ST7735_Init>:



/*----------------------------------------------------------------------------*/
void ST7735_Init()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  SPI1->CR1 |= SPI_CR1_SPE;
 80007c0:	4b8f      	ldr	r3, [pc, #572]	@ (8000a00 <ST7735_Init+0x244>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a8e      	ldr	r2, [pc, #568]	@ (8000a00 <ST7735_Init+0x244>)
 80007c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007ca:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007d2:	488c      	ldr	r0, [pc, #560]	@ (8000a04 <ST7735_Init+0x248>)
 80007d4:	f000 fe34 	bl	8001440 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2180      	movs	r1, #128	@ 0x80
 80007dc:	488a      	ldr	r0, [pc, #552]	@ (8000a08 <ST7735_Init+0x24c>)
 80007de:	f000 fe2f 	bl	8001440 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80007e2:	2005      	movs	r0, #5
 80007e4:	f000 fba8 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2180      	movs	r1, #128	@ 0x80
 80007ec:	4886      	ldr	r0, [pc, #536]	@ (8000a08 <ST7735_Init+0x24c>)
 80007ee:	f000 fe27 	bl	8001440 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 80007f2:	2005      	movs	r0, #5
 80007f4:	f000 fba0 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(ST7735_RESET_PORT, ST7735_RESET_PIN, GPIO_PIN_SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2180      	movs	r1, #128	@ 0x80
 80007fc:	4882      	ldr	r0, [pc, #520]	@ (8000a08 <ST7735_Init+0x24c>)
 80007fe:	f000 fe1f 	bl	8001440 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000802:	2005      	movs	r0, #5
 8000804:	f000 fb98 	bl	8000f38 <HAL_Delay>

  ST7735_SendCommand(ST7735_SWRESET);
 8000808:	2001      	movs	r0, #1
 800080a:	f7ff ff87 	bl	800071c <ST7735_SendCommand>
  HAL_Delay(150);
 800080e:	2096      	movs	r0, #150	@ 0x96
 8000810:	f000 fb92 	bl	8000f38 <HAL_Delay>

  ST7735_SendCommand(ST7735_SLPOUT);
 8000814:	2011      	movs	r0, #17
 8000816:	f7ff ff81 	bl	800071c <ST7735_SendCommand>
  HAL_Delay(500);
 800081a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800081e:	f000 fb8b 	bl	8000f38 <HAL_Delay>

  ST7735_SendCommand(ST7735_FRMCTR1);
 8000822:	20b1      	movs	r0, #177	@ 0xb1
 8000824:	f7ff ff7a 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x01);
 8000828:	2001      	movs	r0, #1
 800082a:	f7ff ff8d 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2C);
 800082e:	202c      	movs	r0, #44	@ 0x2c
 8000830:	f7ff ff8a 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000834:	202d      	movs	r0, #45	@ 0x2d
 8000836:	f7ff ff87 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_FRMCTR2);
 800083a:	20b2      	movs	r0, #178	@ 0xb2
 800083c:	f7ff ff6e 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x01);
 8000840:	2001      	movs	r0, #1
 8000842:	f7ff ff81 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000846:	202c      	movs	r0, #44	@ 0x2c
 8000848:	f7ff ff7e 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2D);
 800084c:	202d      	movs	r0, #45	@ 0x2d
 800084e:	f7ff ff7b 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_FRMCTR3);
 8000852:	20b3      	movs	r0, #179	@ 0xb3
 8000854:	f7ff ff62 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x01);
 8000858:	2001      	movs	r0, #1
 800085a:	f7ff ff75 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2C);
 800085e:	202c      	movs	r0, #44	@ 0x2c
 8000860:	f7ff ff72 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000864:	202d      	movs	r0, #45	@ 0x2d
 8000866:	f7ff ff6f 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x01);
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff ff6c 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000870:	202c      	movs	r0, #44	@ 0x2c
 8000872:	f7ff ff69 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2D);
 8000876:	202d      	movs	r0, #45	@ 0x2d
 8000878:	f7ff ff66 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_INVCTR);
 800087c:	20b4      	movs	r0, #180	@ 0xb4
 800087e:	f7ff ff4d 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x07);
 8000882:	2007      	movs	r0, #7
 8000884:	f7ff ff60 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR1);
 8000888:	20c0      	movs	r0, #192	@ 0xc0
 800088a:	f7ff ff47 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0xA2);
 800088e:	20a2      	movs	r0, #162	@ 0xa2
 8000890:	f7ff ff5a 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x02);
 8000894:	2002      	movs	r0, #2
 8000896:	f7ff ff57 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x84);
 800089a:	2084      	movs	r0, #132	@ 0x84
 800089c:	f7ff ff54 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR2);
 80008a0:	20c1      	movs	r0, #193	@ 0xc1
 80008a2:	f7ff ff3b 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0xC5);
 80008a6:	20c5      	movs	r0, #197	@ 0xc5
 80008a8:	f7ff ff4e 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR3);
 80008ac:	20c2      	movs	r0, #194	@ 0xc2
 80008ae:	f7ff ff35 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x0A);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f7ff ff48 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x00);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ff45 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR4);
 80008be:	20c3      	movs	r0, #195	@ 0xc3
 80008c0:	f7ff ff2c 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x8A);
 80008c4:	208a      	movs	r0, #138	@ 0x8a
 80008c6:	f7ff ff3f 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2A);
 80008ca:	202a      	movs	r0, #42	@ 0x2a
 80008cc:	f7ff ff3c 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_PWCTR5);
 80008d0:	20c4      	movs	r0, #196	@ 0xc4
 80008d2:	f7ff ff23 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x8A);
 80008d6:	208a      	movs	r0, #138	@ 0x8a
 80008d8:	f7ff ff36 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0xEE);
 80008dc:	20ee      	movs	r0, #238	@ 0xee
 80008de:	f7ff ff33 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_VMCTR1);
 80008e2:	20c5      	movs	r0, #197	@ 0xc5
 80008e4:	f7ff ff1a 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x0E);
 80008e8:	200e      	movs	r0, #14
 80008ea:	f7ff ff2d 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_INVOFF);
 80008ee:	2020      	movs	r0, #32
 80008f0:	f7ff ff14 	bl	800071c <ST7735_SendCommand>

  ST7735_SendCommand(ST7735_MADCTL);
 80008f4:	2036      	movs	r0, #54	@ 0x36
 80008f6:	f7ff ff11 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0xC0);
 80008fa:	20c0      	movs	r0, #192	@ 0xc0
 80008fc:	f7ff ff24 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_COLMOD);
 8000900:	203a      	movs	r0, #58	@ 0x3a
 8000902:	f7ff ff0b 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x05);
 8000906:	2005      	movs	r0, #5
 8000908:	f7ff ff1e 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_GMCTRP1);
 800090c:	20e0      	movs	r0, #224	@ 0xe0
 800090e:	f7ff ff05 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x02);
 8000912:	2002      	movs	r0, #2
 8000914:	f7ff ff18 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x1c);
 8000918:	201c      	movs	r0, #28
 800091a:	f7ff ff15 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x07);
 800091e:	2007      	movs	r0, #7
 8000920:	f7ff ff12 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x12);
 8000924:	2012      	movs	r0, #18
 8000926:	f7ff ff0f 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x37);
 800092a:	2037      	movs	r0, #55	@ 0x37
 800092c:	f7ff ff0c 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x32);
 8000930:	2032      	movs	r0, #50	@ 0x32
 8000932:	f7ff ff09 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x29);
 8000936:	2029      	movs	r0, #41	@ 0x29
 8000938:	f7ff ff06 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2d);
 800093c:	202d      	movs	r0, #45	@ 0x2d
 800093e:	f7ff ff03 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x29);
 8000942:	2029      	movs	r0, #41	@ 0x29
 8000944:	f7ff ff00 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x25);
 8000948:	2025      	movs	r0, #37	@ 0x25
 800094a:	f7ff fefd 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2B);
 800094e:	202b      	movs	r0, #43	@ 0x2b
 8000950:	f7ff fefa 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x39);
 8000954:	2039      	movs	r0, #57	@ 0x39
 8000956:	f7ff fef7 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x00);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fef4 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x01);
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff fef1 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x03);
 8000966:	2003      	movs	r0, #3
 8000968:	f7ff feee 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x10);
 800096c:	2010      	movs	r0, #16
 800096e:	f7ff feeb 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_GMCTRN1);
 8000972:	20e1      	movs	r0, #225	@ 0xe1
 8000974:	f7ff fed2 	bl	800071c <ST7735_SendCommand>
  ST7735_SendData(0x03);
 8000978:	2003      	movs	r0, #3
 800097a:	f7ff fee5 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x1d);
 800097e:	201d      	movs	r0, #29
 8000980:	f7ff fee2 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x07);
 8000984:	2007      	movs	r0, #7
 8000986:	f7ff fedf 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x06);
 800098a:	2006      	movs	r0, #6
 800098c:	f7ff fedc 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2E);
 8000990:	202e      	movs	r0, #46	@ 0x2e
 8000992:	f7ff fed9 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2C);
 8000996:	202c      	movs	r0, #44	@ 0x2c
 8000998:	f7ff fed6 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x29);
 800099c:	2029      	movs	r0, #41	@ 0x29
 800099e:	f7ff fed3 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2D);
 80009a2:	202d      	movs	r0, #45	@ 0x2d
 80009a4:	f7ff fed0 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2E);
 80009a8:	202e      	movs	r0, #46	@ 0x2e
 80009aa:	f7ff fecd 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x2E);
 80009ae:	202e      	movs	r0, #46	@ 0x2e
 80009b0:	f7ff feca 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x37);
 80009b4:	2037      	movs	r0, #55	@ 0x37
 80009b6:	f7ff fec7 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x3F);
 80009ba:	203f      	movs	r0, #63	@ 0x3f
 80009bc:	f7ff fec4 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x00);
 80009c0:	2000      	movs	r0, #0
 80009c2:	f7ff fec1 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x00);
 80009c6:	2000      	movs	r0, #0
 80009c8:	f7ff febe 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x02);
 80009cc:	2002      	movs	r0, #2
 80009ce:	f7ff febb 	bl	8000748 <ST7735_SendData>
  ST7735_SendData(0x10);
 80009d2:	2010      	movs	r0, #16
 80009d4:	f7ff feb8 	bl	8000748 <ST7735_SendData>

  ST7735_SendCommand(ST7735_NORON);
 80009d8:	2013      	movs	r0, #19
 80009da:	f7ff fe9f 	bl	800071c <ST7735_SendCommand>
  HAL_Delay(10);
 80009de:	200a      	movs	r0, #10
 80009e0:	f000 faaa 	bl	8000f38 <HAL_Delay>

  ST7735_SendCommand(ST7735_DISPON);
 80009e4:	2029      	movs	r0, #41	@ 0x29
 80009e6:	f7ff fe99 	bl	800071c <ST7735_SendCommand>
  HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	@ 0x64
 80009ec:	f000 faa4 	bl	8000f38 <HAL_Delay>

  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80009f6:	4803      	ldr	r0, [pc, #12]	@ (8000a04 <ST7735_Init+0x248>)
 80009f8:	f000 fd22 	bl	8001440 <HAL_GPIO_WritePin>
}
 80009fc:	bf00      	nop
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40013000 	.word	0x40013000
 8000a04:	40011000 	.word	0x40011000
 8000a08:	40010c00 	.word	0x40010c00

08000a0c <ST7735_SetColAddr>:



/*----------------------------------------------------------------------------*/
void ST7735_SetColAddr(uint16_t cStart, uint16_t cStop)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	460a      	mov	r2, r1
 8000a16:	80fb      	strh	r3, [r7, #6]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	80bb      	strh	r3, [r7, #4]
  uint8_t data[4];

  data[0] = (cStart & 0xFF00) >> 8;
 8000a1c:	88fb      	ldrh	r3, [r7, #6]
 8000a1e:	0a1b      	lsrs	r3, r3, #8
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	733b      	strb	r3, [r7, #12]
  data[1] = cStart & 0x00FF;
 8000a26:	88fb      	ldrh	r3, [r7, #6]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	737b      	strb	r3, [r7, #13]
  data[2] = (cStop & 0xFF00) >> 8;
 8000a2c:	88bb      	ldrh	r3, [r7, #4]
 8000a2e:	0a1b      	lsrs	r3, r3, #8
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	73bb      	strb	r3, [r7, #14]
  data[3] = cStop & 0x00FF;
 8000a36:	88bb      	ldrh	r3, [r7, #4]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	73fb      	strb	r3, [r7, #15]

  ST7735_SendCommand(ST7735_CASET);
 8000a3c:	202a      	movs	r0, #42	@ 0x2a
 8000a3e:	f7ff fe6d 	bl	800071c <ST7735_SendCommand>
  ST7735_SendDataMultiple(data, 4);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2104      	movs	r1, #4
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fe93 	bl	8000774 <ST7735_SendDataMultiple>
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <ST7735_SetRowAddr>:



/*----------------------------------------------------------------------------*/
void ST7735_SetRowAddr(uint16_t rStart, uint16_t rStop)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	460a      	mov	r2, r1
 8000a60:	80fb      	strh	r3, [r7, #6]
 8000a62:	4613      	mov	r3, r2
 8000a64:	80bb      	strh	r3, [r7, #4]
  uint8_t data[4];

  data[0] = (rStart & 0xFF00) >> 8;
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	733b      	strb	r3, [r7, #12]
  data[1] = rStart & 0x00FF;
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	737b      	strb	r3, [r7, #13]
  data[2] = (rStop & 0xFF00) >> 8;
 8000a76:	88bb      	ldrh	r3, [r7, #4]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	73bb      	strb	r3, [r7, #14]
  data[3] = rStop & 0x00FF;
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	73fb      	strb	r3, [r7, #15]

  ST7735_SendCommand(ST7735_RASET);
 8000a86:	202b      	movs	r0, #43	@ 0x2b
 8000a88:	f7ff fe48 	bl	800071c <ST7735_SendCommand>
  ST7735_SendDataMultiple(data, 4);
 8000a8c:	f107 030c 	add.w	r3, r7, #12
 8000a90:	2104      	movs	r1, #4
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fe6e 	bl	8000774 <ST7735_SendDataMultiple>
}
 8000a98:	bf00      	nop
 8000a9a:	3710      	adds	r7, #16
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}

08000aa0 <ST7735_DrawRect>:



/*----------------------------------------------------------------------------*/
void ST7735_DrawRect(uint16_t cStart, uint16_t rStart, uint16_t cStop, uint16_t rStop, uint16_t color)
{
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	4611      	mov	r1, r2
 8000aac:	461a      	mov	r2, r3
 8000aae:	4623      	mov	r3, r4
 8000ab0:	80fb      	strh	r3, [r7, #6]
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80bb      	strh	r3, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
 8000aba:	4613      	mov	r3, r2
 8000abc:	803b      	strh	r3, [r7, #0]
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ac4:	4824      	ldr	r0, [pc, #144]	@ (8000b58 <ST7735_DrawRect+0xb8>)
 8000ac6:	f000 fcbb 	bl	8001440 <HAL_GPIO_WritePin>
  ST7735_SetColAddr(cStart, cStop - 1);
 8000aca:	887b      	ldrh	r3, [r7, #2]
 8000acc:	3b01      	subs	r3, #1
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff99 	bl	8000a0c <ST7735_SetColAddr>
  ST7735_SetRowAddr(rStart, rStop - 1);
 8000ada:	883b      	ldrh	r3, [r7, #0]
 8000adc:	3b01      	subs	r3, #1
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	88bb      	ldrh	r3, [r7, #4]
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ffb6 	bl	8000a56 <ST7735_SetRowAddr>

  ST7735_SendCommand(ST7735_RAMWR);
 8000aea:	202c      	movs	r0, #44	@ 0x2c
 8000aec:	f7ff fe16 	bl	800071c <ST7735_SendCommand>

  uint32_t size = (cStop - cStart) * (rStop - rStart);
 8000af0:	887a      	ldrh	r2, [r7, #2]
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	8839      	ldrh	r1, [r7, #0]
 8000af8:	88ba      	ldrh	r2, [r7, #4]
 8000afa:	1a8a      	subs	r2, r1, r2
 8000afc:	fb02 f303 	mul.w	r3, r2, r3
 8000b00:	613b      	str	r3, [r7, #16]
  uint8_t colorBytes[2];
  colorBytes[0] = (color & 0xFF00) >> 8;
 8000b02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b04:	0a1b      	lsrs	r3, r3, #8
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	733b      	strb	r3, [r7, #12]
  colorBytes[1] = color & 0x00FF;
 8000b0c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	737b      	strb	r3, [r7, #13]

  HAL_GPIO_WritePin(ST7735_DC_PORT, ST7735_DC_PIN, GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2140      	movs	r1, #64	@ 0x40
 8000b16:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <ST7735_DrawRect+0xbc>)
 8000b18:	f000 fc92 	bl	8001440 <HAL_GPIO_WritePin>

  for (uint32_t i = 0; i < size; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e00a      	b.n	8000b38 <ST7735_DrawRect+0x98>
  {
    ST7735_SendByte(colorBytes[0]);
 8000b22:	7b3b      	ldrb	r3, [r7, #12]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fdcb 	bl	80006c0 <ST7735_SendByte>
    ST7735_SendByte(colorBytes[1]);
 8000b2a:	7b7b      	ldrb	r3, [r7, #13]
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fdc7 	bl	80006c0 <ST7735_SendByte>
  for (uint32_t i = 0; i < size; i++)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d3f0      	bcc.n	8000b22 <ST7735_DrawRect+0x82>
  }

  ST7735_WaitLastData();
 8000b40:	f7ff fdd4 	bl	80006ec <ST7735_WaitLastData>
  HAL_GPIO_WritePin(ST7735_CS_PORT, ST7735_CS_PIN, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000b4a:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <ST7735_DrawRect+0xb8>)
 8000b4c:	f000 fc78 	bl	8001440 <HAL_GPIO_WritePin>
}
 8000b50:	bf00      	nop
 8000b52:	371c      	adds	r7, #28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd90      	pop	{r4, r7, pc}
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a0e      	ldr	r2, [pc, #56]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NONJTRST: Full SWJ (JTAG-DP + SW-DP) but without NJTRST
  */
  __HAL_AFIO_REMAP_SWJ_NONJTRST();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <HAL_MspInit+0x60>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_MspInit+0x60>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a15      	ldr	r2, [pc, #84]	@ (8000c34 <HAL_SPI_MspInit+0x70>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d123      	bne.n	8000c2c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000be4:	4b14      	ldr	r3, [pc, #80]	@ (8000c38 <HAL_SPI_MspInit+0x74>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <HAL_SPI_MspInit+0x74>)
 8000bea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_SPI_MspInit+0x74>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_SPI_MspInit+0x74>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <HAL_SPI_MspInit+0x74>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <HAL_SPI_MspInit+0x74>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c14:	23a0      	movs	r3, #160	@ 0xa0
 8000c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4619      	mov	r1, r3
 8000c26:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_SPI_MspInit+0x78>)
 8000c28:	f000 fa8e 	bl	8001148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3720      	adds	r7, #32
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40013000 	.word	0x40013000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	40010800 	.word	0x40010800

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c64:	bf00      	nop
 8000c66:	e7fd      	b.n	8000c64 <UsageFault_Handler+0x4>

08000c68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f936 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return 1;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr

08000ca6 <_kill>:

int _kill(int pid, int sig)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
 8000cae:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cb0:	f001 fac8 	bl	8002244 <__errno>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2216      	movs	r2, #22
 8000cb8:	601a      	str	r2, [r3, #0]
  return -1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <_exit>:

void _exit (int status)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cce:	f04f 31ff 	mov.w	r1, #4294967295
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f7ff ffe7 	bl	8000ca6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cd8:	bf00      	nop
 8000cda:	e7fd      	b.n	8000cd8 <_exit+0x12>

08000cdc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	e00a      	b.n	8000d04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cee:	f3af 8000 	nop.w
 8000cf2:	4601      	mov	r1, r0
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	1c5a      	adds	r2, r3, #1
 8000cf8:	60ba      	str	r2, [r7, #8]
 8000cfa:	b2ca      	uxtb	r2, r1
 8000cfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	3301      	adds	r3, #1
 8000d02:	617b      	str	r3, [r7, #20]
 8000d04:	697a      	ldr	r2, [r7, #20]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dbf0      	blt.n	8000cee <_read+0x12>
  }

  return len;
 8000d0c:	687b      	ldr	r3, [r7, #4]
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	60f8      	str	r0, [r7, #12]
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	e009      	b.n	8000d3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	1c5a      	adds	r2, r3, #1
 8000d2c:	60ba      	str	r2, [r7, #8]
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	dbf1      	blt.n	8000d28 <_write+0x12>
  }
  return len;
 8000d44:	687b      	ldr	r3, [r7, #4]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <_close>:

int _close(int file)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b083      	sub	sp, #12
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d74:	605a      	str	r2, [r3, #4]
  return 0;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr

08000d82 <_isatty>:

int _isatty(int file)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d8a:	2301      	movs	r3, #1
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	60f8      	str	r0, [r7, #12]
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
	...

08000db0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <_sbrk+0x5c>)
 8000dba:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <_sbrk+0x60>)
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d102      	bne.n	8000dd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <_sbrk+0x64>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <_sbrk+0x68>)
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <_sbrk+0x64>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	d207      	bcs.n	8000df0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de0:	f001 fa30 	bl	8002244 <__errno>
 8000de4:	4603      	mov	r3, r0
 8000de6:	220c      	movs	r2, #12
 8000de8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dea:	f04f 33ff 	mov.w	r3, #4294967295
 8000dee:	e009      	b.n	8000e04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df0:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000df6:	4b07      	ldr	r3, [pc, #28]	@ (8000e14 <_sbrk+0x64>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <_sbrk+0x64>)
 8000e00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	20002800 	.word	0x20002800
 8000e10:	00000400 	.word	0x00000400
 8000e14:	200000e8 	.word	0x200000e8
 8000e18:	20000240 	.word	0x20000240

08000e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr

08000e28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e28:	f7ff fff8 	bl	8000e1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e2c:	480b      	ldr	r0, [pc, #44]	@ (8000e5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e2e:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e30:	4a0c      	ldr	r2, [pc, #48]	@ (8000e64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a09      	ldr	r2, [pc, #36]	@ (8000e68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e44:	4c09      	ldr	r4, [pc, #36]	@ (8000e6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f001 f9fd 	bl	8002250 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e56:	f7ff f9b5 	bl	80001c4 <main>
  bx lr
 8000e5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e64:	08002e84 	.word	0x08002e84
  ldr r2, =_sbss
 8000e68:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e6c:	2000023c 	.word	0x2000023c

08000e70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_2_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4b08      	ldr	r3, [pc, #32]	@ (8000e9c <HAL_Init+0x28>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a07      	ldr	r2, [pc, #28]	@ (8000e9c <HAL_Init+0x28>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e84:	2003      	movs	r0, #3
 8000e86:	f000 f92b 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f000 f808 	bl	8000ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e90:	f7ff fe66 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40022000 	.word	0x40022000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea8:	4b12      	ldr	r3, [pc, #72]	@ (8000ef4 <HAL_InitTick+0x54>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_InitTick+0x58>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f000 f935 	bl	800112e <HAL_SYSTICK_Config>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e00e      	b.n	8000eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b0f      	cmp	r3, #15
 8000ed2:	d80a      	bhi.n	8000eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8000edc:	f000 f90b 	bl	80010f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee0:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <HAL_InitTick+0x5c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	e000      	b.n	8000eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000004 	.word	0x20000004
 8000ef8:	2000000c 	.word	0x2000000c
 8000efc:	20000008 	.word	0x20000008

08000f00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f04:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_IncTick+0x1c>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a03      	ldr	r2, [pc, #12]	@ (8000f20 <HAL_IncTick+0x20>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bc80      	pop	{r7}
 8000f1a:	4770      	bx	lr
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	200000ec 	.word	0x200000ec

08000f24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return uwTick;
 8000f28:	4b02      	ldr	r3, [pc, #8]	@ (8000f34 <HAL_GetTick+0x10>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	200000ec 	.word	0x200000ec

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff fff0 	bl	8000f24 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b0a      	ldr	r3, [pc, #40]	@ (8000f7c <HAL_Delay+0x44>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffe0 	bl	8000f24 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000000c 	.word	0x2000000c

08000f80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f96:	68ba      	ldr	r2, [r7, #8]
 8000f98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fb2:	4a04      	ldr	r2, [pc, #16]	@ (8000fc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	60d3      	str	r3, [r2, #12]
}
 8000fb8:	bf00      	nop
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fcc:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	0a1b      	lsrs	r3, r3, #8
 8000fd2:	f003 0307 	and.w	r3, r3, #7
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bc80      	pop	{r7}
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	6039      	str	r1, [r7, #0]
 8000fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	db0a      	blt.n	800100e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	490c      	ldr	r1, [pc, #48]	@ (8001030 <__NVIC_SetPriority+0x4c>)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	0112      	lsls	r2, r2, #4
 8001004:	b2d2      	uxtb	r2, r2
 8001006:	440b      	add	r3, r1
 8001008:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800100c:	e00a      	b.n	8001024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	b2da      	uxtb	r2, r3
 8001012:	4908      	ldr	r1, [pc, #32]	@ (8001034 <__NVIC_SetPriority+0x50>)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	f003 030f 	and.w	r3, r3, #15
 800101a:	3b04      	subs	r3, #4
 800101c:	0112      	lsls	r2, r2, #4
 800101e:	b2d2      	uxtb	r2, r2
 8001020:	440b      	add	r3, r1
 8001022:	761a      	strb	r2, [r3, #24]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000e100 	.word	0xe000e100
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	f1c3 0307 	rsb	r3, r3, #7
 8001052:	2b04      	cmp	r3, #4
 8001054:	bf28      	it	cs
 8001056:	2304      	movcs	r3, #4
 8001058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3304      	adds	r3, #4
 800105e:	2b06      	cmp	r3, #6
 8001060:	d902      	bls.n	8001068 <NVIC_EncodePriority+0x30>
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3b03      	subs	r3, #3
 8001066:	e000      	b.n	800106a <NVIC_EncodePriority+0x32>
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800106c:	f04f 32ff 	mov.w	r2, #4294967295
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43da      	mvns	r2, r3
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	401a      	ands	r2, r3
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001080:	f04f 31ff 	mov.w	r1, #4294967295
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa01 f303 	lsl.w	r3, r1, r3
 800108a:	43d9      	mvns	r1, r3
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001090:	4313      	orrs	r3, r2
         );
}
 8001092:	4618      	mov	r0, r3
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f7ff ff90 	bl	8000fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff49 	bl	8000f80 <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5e 	bl	8000fc8 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff90 	bl	8001038 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5f 	bl	8000fe4 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b08b      	sub	sp, #44	@ 0x2c
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001156:	2300      	movs	r3, #0
 8001158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	e161      	b.n	8001420 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800115c:	2201      	movs	r2, #1
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	429a      	cmp	r2, r3
 8001176:	f040 8150 	bne.w	800141a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4a97      	ldr	r2, [pc, #604]	@ (80013dc <HAL_GPIO_Init+0x294>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d05e      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001184:	4a95      	ldr	r2, [pc, #596]	@ (80013dc <HAL_GPIO_Init+0x294>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d875      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 800118a:	4a95      	ldr	r2, [pc, #596]	@ (80013e0 <HAL_GPIO_Init+0x298>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d058      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 8001190:	4a93      	ldr	r2, [pc, #588]	@ (80013e0 <HAL_GPIO_Init+0x298>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d86f      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 8001196:	4a93      	ldr	r2, [pc, #588]	@ (80013e4 <HAL_GPIO_Init+0x29c>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d052      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 800119c:	4a91      	ldr	r2, [pc, #580]	@ (80013e4 <HAL_GPIO_Init+0x29c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d869      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011a2:	4a91      	ldr	r2, [pc, #580]	@ (80013e8 <HAL_GPIO_Init+0x2a0>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d04c      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011a8:	4a8f      	ldr	r2, [pc, #572]	@ (80013e8 <HAL_GPIO_Init+0x2a0>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d863      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ae:	4a8f      	ldr	r2, [pc, #572]	@ (80013ec <HAL_GPIO_Init+0x2a4>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d046      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
 80011b4:	4a8d      	ldr	r2, [pc, #564]	@ (80013ec <HAL_GPIO_Init+0x2a4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d85d      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d82a      	bhi.n	8001214 <HAL_GPIO_Init+0xcc>
 80011be:	2b12      	cmp	r3, #18
 80011c0:	d859      	bhi.n	8001276 <HAL_GPIO_Init+0x12e>
 80011c2:	a201      	add	r2, pc, #4	@ (adr r2, 80011c8 <HAL_GPIO_Init+0x80>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	08001243 	.word	0x08001243
 80011cc:	0800121d 	.word	0x0800121d
 80011d0:	0800122f 	.word	0x0800122f
 80011d4:	08001271 	.word	0x08001271
 80011d8:	08001277 	.word	0x08001277
 80011dc:	08001277 	.word	0x08001277
 80011e0:	08001277 	.word	0x08001277
 80011e4:	08001277 	.word	0x08001277
 80011e8:	08001277 	.word	0x08001277
 80011ec:	08001277 	.word	0x08001277
 80011f0:	08001277 	.word	0x08001277
 80011f4:	08001277 	.word	0x08001277
 80011f8:	08001277 	.word	0x08001277
 80011fc:	08001277 	.word	0x08001277
 8001200:	08001277 	.word	0x08001277
 8001204:	08001277 	.word	0x08001277
 8001208:	08001277 	.word	0x08001277
 800120c:	08001225 	.word	0x08001225
 8001210:	08001239 	.word	0x08001239
 8001214:	4a76      	ldr	r2, [pc, #472]	@ (80013f0 <HAL_GPIO_Init+0x2a8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d013      	beq.n	8001242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121a:	e02c      	b.n	8001276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e029      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	3304      	adds	r3, #4
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e024      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	3308      	adds	r3, #8
 8001234:	623b      	str	r3, [r7, #32]
          break;
 8001236:	e01f      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	330c      	adds	r3, #12
 800123e:	623b      	str	r3, [r7, #32]
          break;
 8001240:	e01a      	b.n	8001278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d102      	bne.n	8001250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800124a:	2304      	movs	r3, #4
 800124c:	623b      	str	r3, [r7, #32]
          break;
 800124e:	e013      	b.n	8001278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d105      	bne.n	8001264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001258:	2308      	movs	r3, #8
 800125a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69fa      	ldr	r2, [r7, #28]
 8001260:	611a      	str	r2, [r3, #16]
          break;
 8001262:	e009      	b.n	8001278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001264:	2308      	movs	r3, #8
 8001266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	615a      	str	r2, [r3, #20]
          break;
 800126e:	e003      	b.n	8001278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001270:	2300      	movs	r3, #0
 8001272:	623b      	str	r3, [r7, #32]
          break;
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x130>
          break;
 8001276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	@ 0xff
 800127c:	d801      	bhi.n	8001282 <HAL_GPIO_Init+0x13a>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	e001      	b.n	8001286 <HAL_GPIO_Init+0x13e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3304      	adds	r3, #4
 8001286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	@ 0xff
 800128c:	d802      	bhi.n	8001294 <HAL_GPIO_Init+0x14c>
 800128e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	e002      	b.n	800129a <HAL_GPIO_Init+0x152>
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	3b08      	subs	r3, #8
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	210f      	movs	r1, #15
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	401a      	ands	r2, r3
 80012ac:	6a39      	ldr	r1, [r7, #32]
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80a9 	beq.w	800141a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c8:	4b4a      	ldr	r3, [pc, #296]	@ (80013f4 <HAL_GPIO_Init+0x2ac>)
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4a49      	ldr	r2, [pc, #292]	@ (80013f4 <HAL_GPIO_Init+0x2ac>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6193      	str	r3, [r2, #24]
 80012d4:	4b47      	ldr	r3, [pc, #284]	@ (80013f4 <HAL_GPIO_Init+0x2ac>)
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012e0:	4a45      	ldr	r2, [pc, #276]	@ (80013f8 <HAL_GPIO_Init+0x2b0>)
 80012e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	3302      	adds	r3, #2
 80012e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3d      	ldr	r2, [pc, #244]	@ (80013fc <HAL_GPIO_Init+0x2b4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x1e0>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a3c      	ldr	r2, [pc, #240]	@ (8001400 <HAL_GPIO_Init+0x2b8>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x1dc>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a3b      	ldr	r2, [pc, #236]	@ (8001404 <HAL_GPIO_Init+0x2bc>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x1d8>
 800131c:	2302      	movs	r3, #2
 800131e:	e004      	b.n	800132a <HAL_GPIO_Init+0x1e2>
 8001320:	2303      	movs	r3, #3
 8001322:	e002      	b.n	800132a <HAL_GPIO_Init+0x1e2>
 8001324:	2301      	movs	r3, #1
 8001326:	e000      	b.n	800132a <HAL_GPIO_Init+0x1e2>
 8001328:	2300      	movs	r3, #0
 800132a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800132c:	f002 0203 	and.w	r2, r2, #3
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	4093      	lsls	r3, r2
 8001334:	68fa      	ldr	r2, [r7, #12]
 8001336:	4313      	orrs	r3, r2
 8001338:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800133a:	492f      	ldr	r1, [pc, #188]	@ (80013f8 <HAL_GPIO_Init+0x2b0>)
 800133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	3302      	adds	r3, #2
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d006      	beq.n	8001362 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001354:	4b2c      	ldr	r3, [pc, #176]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	492b      	ldr	r1, [pc, #172]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	4313      	orrs	r3, r2
 800135e:	608b      	str	r3, [r1, #8]
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 8001364:	689a      	ldr	r2, [r3, #8]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	43db      	mvns	r3, r3
 800136a:	4927      	ldr	r1, [pc, #156]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 800136c:	4013      	ands	r3, r2
 800136e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001378:	2b00      	cmp	r3, #0
 800137a:	d006      	beq.n	800138a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800137c:	4b22      	ldr	r3, [pc, #136]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	4921      	ldr	r1, [pc, #132]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
 8001388:	e006      	b.n	8001398 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138a:	4b1f      	ldr	r3, [pc, #124]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	43db      	mvns	r3, r3
 8001392:	491d      	ldr	r1, [pc, #116]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 8001394:	4013      	ands	r3, r2
 8001396:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a4:	4b18      	ldr	r3, [pc, #96]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4917      	ldr	r1, [pc, #92]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	604b      	str	r3, [r1, #4]
 80013b0:	e006      	b.n	80013c0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 80013b4:	685a      	ldr	r2, [r3, #4]
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	4913      	ldr	r1, [pc, #76]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 80013bc:	4013      	ands	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01f      	beq.n	800140c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	490d      	ldr	r1, [pc, #52]	@ (8001408 <HAL_GPIO_Init+0x2c0>)
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	600b      	str	r3, [r1, #0]
 80013d8:	e01f      	b.n	800141a <HAL_GPIO_Init+0x2d2>
 80013da:	bf00      	nop
 80013dc:	10320000 	.word	0x10320000
 80013e0:	10310000 	.word	0x10310000
 80013e4:	10220000 	.word	0x10220000
 80013e8:	10210000 	.word	0x10210000
 80013ec:	10120000 	.word	0x10120000
 80013f0:	10110000 	.word	0x10110000
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	40010800 	.word	0x40010800
 8001400:	40010c00 	.word	0x40010c00
 8001404:	40011000 	.word	0x40011000
 8001408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_GPIO_Init+0x2f4>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	43db      	mvns	r3, r3
 8001414:	4909      	ldr	r1, [pc, #36]	@ (800143c <HAL_GPIO_Init+0x2f4>)
 8001416:	4013      	ands	r3, r2
 8001418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	3301      	adds	r3, #1
 800141e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001426:	fa22 f303 	lsr.w	r3, r2, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	f47f ae96 	bne.w	800115c <HAL_GPIO_Init+0x14>
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	372c      	adds	r7, #44	@ 0x2c
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	40010400 	.word	0x40010400

08001440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
 800144c:	4613      	mov	r3, r2
 800144e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001450:	787b      	ldrb	r3, [r7, #1]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001456:	887a      	ldrh	r2, [r7, #2]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800145c:	e003      	b.n	8001466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e272      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8087 	beq.w	800159e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001490:	4b92      	ldr	r3, [pc, #584]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b04      	cmp	r3, #4
 800149a:	d00c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149c:	4b8f      	ldr	r3, [pc, #572]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d112      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
 80014a8:	4b8c      	ldr	r3, [pc, #560]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014b4:	d10b      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b6:	4b89      	ldr	r3, [pc, #548]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d06c      	beq.n	800159c <HAL_RCC_OscConfig+0x12c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d168      	bne.n	800159c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e24c      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x76>
 80014d8:	4b80      	ldr	r3, [pc, #512]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a7f      	ldr	r2, [pc, #508]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e02e      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b7b      	ldr	r3, [pc, #492]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7a      	ldr	r2, [pc, #488]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b78      	ldr	r3, [pc, #480]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a77      	ldr	r2, [pc, #476]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001500:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0xbc>
 8001512:	4b72      	ldr	r3, [pc, #456]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a71      	ldr	r2, [pc, #452]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b6f      	ldr	r3, [pc, #444]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6e      	ldr	r2, [pc, #440]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 800152c:	4b6b      	ldr	r3, [pc, #428]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a6a      	ldr	r2, [pc, #424]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b68      	ldr	r3, [pc, #416]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a67      	ldr	r2, [pc, #412]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fcea 	bl	8000f24 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fce6 	bl	8000f24 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	@ 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e200      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b5d      	ldr	r3, [pc, #372]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0xe4>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fcd6 	bl	8000f24 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fcd2 	bl	8000f24 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	@ 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1ec      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	4b53      	ldr	r3, [pc, #332]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x10c>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d063      	beq.n	8001672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015aa:	4b4c      	ldr	r3, [pc, #304]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015b6:	4b49      	ldr	r3, [pc, #292]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d11c      	bne.n	80015fc <HAL_RCC_OscConfig+0x18c>
 80015c2:	4b46      	ldr	r3, [pc, #280]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b43      	ldr	r3, [pc, #268]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_OscConfig+0x176>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e1c0      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b3d      	ldr	r3, [pc, #244]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4939      	ldr	r1, [pc, #228]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e03a      	b.n	8001672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <HAL_RCC_OscConfig+0x270>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fc8b 	bl	8000f24 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fc87 	bl	8000f24 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e1a1      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	4b2d      	ldr	r3, [pc, #180]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4927      	ldr	r1, [pc, #156]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <HAL_RCC_OscConfig+0x270>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc6a 	bl	8000f24 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fc66 	bl	8000f24 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e180      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d03a      	beq.n	80016f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d019      	beq.n	80016ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <HAL_RCC_OscConfig+0x274>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fc4a 	bl	8000f24 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fc46 	bl	8000f24 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e160      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 fa9e 	bl	8001bf4 <RCC_Delay>
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	@ (80016e4 <HAL_RCC_OscConfig+0x274>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc30 	bl	8000f24 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c6:	e00f      	b.n	80016e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc2c 	bl	8000f24 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d908      	bls.n	80016e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e146      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	42420000 	.word	0x42420000
 80016e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	4b92      	ldr	r3, [pc, #584]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e9      	bne.n	80016c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80a6 	beq.w	800184e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001706:	4b8b      	ldr	r3, [pc, #556]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10d      	bne.n	800172e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b88      	ldr	r3, [pc, #544]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a87      	ldr	r2, [pc, #540]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b85      	ldr	r3, [pc, #532]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b82      	ldr	r3, [pc, #520]	@ (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173a:	4b7f      	ldr	r3, [pc, #508]	@ (8001938 <HAL_RCC_OscConfig+0x4c8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a7e      	ldr	r2, [pc, #504]	@ (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbed 	bl	8000f24 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174e:	f7ff fbe9 	bl	8000f24 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b64      	cmp	r3, #100	@ 0x64
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e103      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	4b75      	ldr	r3, [pc, #468]	@ (8001938 <HAL_RCC_OscConfig+0x4c8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x312>
 8001774:	4b6f      	ldr	r3, [pc, #444]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a6e      	ldr	r2, [pc, #440]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e02d      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x334>
 800178a:	4b6a      	ldr	r3, [pc, #424]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a69      	ldr	r2, [pc, #420]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b67      	ldr	r3, [pc, #412]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a66      	ldr	r2, [pc, #408]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	e01c      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x356>
 80017ac:	4b61      	ldr	r3, [pc, #388]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a60      	ldr	r2, [pc, #384]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 80017c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b58      	ldr	r3, [pc, #352]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a57      	ldr	r2, [pc, #348]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d015      	beq.n	8001812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb9d 	bl	8000f24 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb99 	bl	8000f24 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0b1      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	4b4b      	ldr	r3, [pc, #300]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ee      	beq.n	80017ee <HAL_RCC_OscConfig+0x37e>
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb87 	bl	8000f24 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb83 	bl	8000f24 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e09b      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	4b40      	ldr	r3, [pc, #256]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ee      	bne.n	800181a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d105      	bne.n	800184e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001842:	4b3c      	ldr	r3, [pc, #240]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a3b      	ldr	r2, [pc, #236]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 8001848:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800184c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8087 	beq.w	8001966 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001858:	4b36      	ldr	r3, [pc, #216]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d061      	beq.n	8001928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d146      	bne.n	80018fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b33      	ldr	r3, [pc, #204]	@ (800193c <HAL_RCC_OscConfig+0x4cc>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb57 	bl	8000f24 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb53 	bl	8000f24 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e06d      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188c:	4b29      	ldr	r3, [pc, #164]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018a2:	4b24      	ldr	r3, [pc, #144]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4921      	ldr	r1, [pc, #132]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a19      	ldr	r1, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018c4:	430b      	orrs	r3, r1
 80018c6:	491b      	ldr	r1, [pc, #108]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <HAL_RCC_OscConfig+0x4cc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb27 	bl	8000f24 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fb23 	bl	8000f24 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e03d      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ec:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x46a>
 80018f8:	e035      	b.n	8001966 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b10      	ldr	r3, [pc, #64]	@ (800193c <HAL_RCC_OscConfig+0x4cc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb10 	bl	8000f24 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fb0c 	bl	8000f24 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e026      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191a:	4b06      	ldr	r3, [pc, #24]	@ (8001934 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x498>
 8001926:	e01e      	b.n	8001966 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d107      	bne.n	8001940 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e019      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
 8001934:	40021000 	.word	0x40021000
 8001938:	40007000 	.word	0x40007000
 800193c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_RCC_OscConfig+0x500>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a1b      	ldr	r3, [r3, #32]
 8001950:	429a      	cmp	r2, r3
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0d0      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001988:	4b6a      	ldr	r3, [pc, #424]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0307 	and.w	r3, r3, #7
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d910      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001996:	4b67      	ldr	r3, [pc, #412]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f023 0207 	bic.w	r2, r3, #7
 800199e:	4965      	ldr	r1, [pc, #404]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b63      	ldr	r3, [pc, #396]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e0b8      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d020      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d0:	4b59      	ldr	r3, [pc, #356]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	4a58      	ldr	r2, [pc, #352]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d005      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e8:	4b53      	ldr	r3, [pc, #332]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4a52      	ldr	r2, [pc, #328]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f4:	4b50      	ldr	r3, [pc, #320]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	494d      	ldr	r1, [pc, #308]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d040      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d107      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1a:	4b47      	ldr	r3, [pc, #284]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e07f      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d107      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a32:	4b41      	ldr	r3, [pc, #260]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d109      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e073      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a42:	4b3d      	ldr	r3, [pc, #244]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e06b      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a52:	4b39      	ldr	r3, [pc, #228]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f023 0203 	bic.w	r2, r3, #3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	4936      	ldr	r1, [pc, #216]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a64:	f7ff fa5e 	bl	8000f24 <HAL_GetTick>
 8001a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a6c:	f7ff fa5a 	bl	8000f24 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e053      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a82:	4b2d      	ldr	r3, [pc, #180]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 020c 	and.w	r2, r3, #12
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d1eb      	bne.n	8001a6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a94:	4b27      	ldr	r3, [pc, #156]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	683a      	ldr	r2, [r7, #0]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d210      	bcs.n	8001ac4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa2:	4b24      	ldr	r3, [pc, #144]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f023 0207 	bic.w	r2, r3, #7
 8001aaa:	4922      	ldr	r1, [pc, #136]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	4b20      	ldr	r3, [pc, #128]	@ (8001b34 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	683a      	ldr	r2, [r7, #0]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e032      	b.n	8001b2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d008      	beq.n	8001ae2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad0:	4b19      	ldr	r3, [pc, #100]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	4916      	ldr	r1, [pc, #88]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aee:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	490e      	ldr	r1, [pc, #56]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b02:	f000 f821 	bl	8001b48 <HAL_RCC_GetSysClockFreq>
 8001b06:	4602      	mov	r2, r0
 8001b08:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	490a      	ldr	r1, [pc, #40]	@ (8001b3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b14:	5ccb      	ldrb	r3, [r1, r3]
 8001b16:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1a:	4a09      	ldr	r2, [pc, #36]	@ (8001b40 <HAL_RCC_ClockConfig+0x1cc>)
 8001b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b1e:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_RCC_ClockConfig+0x1d0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f9bc 	bl	8000ea0 <HAL_InitTick>

  return HAL_OK;
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	08002d7c 	.word	0x08002d7c
 8001b40:	20000004 	.word	0x20000004
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b62:	4b1e      	ldr	r3, [pc, #120]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_GetSysClockFreq+0x30>
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d003      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x36>
 8001b76:	e027      	b.n	8001bc8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b78:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b7a:	613b      	str	r3, [r7, #16]
      break;
 8001b7c:	e027      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	0c9b      	lsrs	r3, r3, #18
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b88:	5cd3      	ldrb	r3, [r2, r3]
 8001b8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <HAL_RCC_GetSysClockFreq+0x94>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	0c5b      	lsrs	r3, r3, #17
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	4a11      	ldr	r2, [pc, #68]	@ (8001be8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8001be0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001baa:	fb03 f202 	mul.w	r2, r3, r2
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	e004      	b.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a0c      	ldr	r2, [pc, #48]	@ (8001bec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	613b      	str	r3, [r7, #16]
      break;
 8001bc6:	e002      	b.n	8001bce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001bca:	613b      	str	r3, [r7, #16]
      break;
 8001bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bce:	693b      	ldr	r3, [r7, #16]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	00b71b00 	.word	0x00b71b00
 8001be4:	08002d8c 	.word	0x08002d8c
 8001be8:	08002d9c 	.word	0x08002d9c
 8001bec:	003d0900 	.word	0x003d0900
 8001bf0:	007a1200 	.word	0x007a1200

08001bf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <RCC_Delay+0x34>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <RCC_Delay+0x38>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0a5b      	lsrs	r3, r3, #9
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	fb02 f303 	mul.w	r3, r2, r3
 8001c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c10:	bf00      	nop
  }
  while (Delay --);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e5a      	subs	r2, r3, #1
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <RCC_Delay+0x1c>
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	10624dd3 	.word	0x10624dd3

08001c30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e076      	b.n	8001d30 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d108      	bne.n	8001c5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c52:	d009      	beq.n	8001c68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	61da      	str	r2, [r3, #28]
 8001c5a:	e005      	b.n	8001c68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe ff9e 	bl	8000bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cec:	ea42 0103 	orr.w	r1, r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	0c1a      	lsrs	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f002 0204 	and.w	r2, r2, #4
 8001d0e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	69da      	ldr	r2, [r3, #28]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d1e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <malloc>:
 8001d38:	4b02      	ldr	r3, [pc, #8]	@ (8001d44 <malloc+0xc>)
 8001d3a:	4601      	mov	r1, r0
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	f000 b825 	b.w	8001d8c <_malloc_r>
 8001d42:	bf00      	nop
 8001d44:	2000001c 	.word	0x2000001c

08001d48 <sbrk_aligned>:
 8001d48:	b570      	push	{r4, r5, r6, lr}
 8001d4a:	4e0f      	ldr	r6, [pc, #60]	@ (8001d88 <sbrk_aligned+0x40>)
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	6831      	ldr	r1, [r6, #0]
 8001d50:	4605      	mov	r5, r0
 8001d52:	b911      	cbnz	r1, 8001d5a <sbrk_aligned+0x12>
 8001d54:	f000 fa54 	bl	8002200 <_sbrk_r>
 8001d58:	6030      	str	r0, [r6, #0]
 8001d5a:	4621      	mov	r1, r4
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	f000 fa4f 	bl	8002200 <_sbrk_r>
 8001d62:	1c43      	adds	r3, r0, #1
 8001d64:	d103      	bne.n	8001d6e <sbrk_aligned+0x26>
 8001d66:	f04f 34ff 	mov.w	r4, #4294967295
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	bd70      	pop	{r4, r5, r6, pc}
 8001d6e:	1cc4      	adds	r4, r0, #3
 8001d70:	f024 0403 	bic.w	r4, r4, #3
 8001d74:	42a0      	cmp	r0, r4
 8001d76:	d0f8      	beq.n	8001d6a <sbrk_aligned+0x22>
 8001d78:	1a21      	subs	r1, r4, r0
 8001d7a:	4628      	mov	r0, r5
 8001d7c:	f000 fa40 	bl	8002200 <_sbrk_r>
 8001d80:	3001      	adds	r0, #1
 8001d82:	d1f2      	bne.n	8001d6a <sbrk_aligned+0x22>
 8001d84:	e7ef      	b.n	8001d66 <sbrk_aligned+0x1e>
 8001d86:	bf00      	nop
 8001d88:	200000f0 	.word	0x200000f0

08001d8c <_malloc_r>:
 8001d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d90:	1ccd      	adds	r5, r1, #3
 8001d92:	f025 0503 	bic.w	r5, r5, #3
 8001d96:	3508      	adds	r5, #8
 8001d98:	2d0c      	cmp	r5, #12
 8001d9a:	bf38      	it	cc
 8001d9c:	250c      	movcc	r5, #12
 8001d9e:	2d00      	cmp	r5, #0
 8001da0:	4606      	mov	r6, r0
 8001da2:	db01      	blt.n	8001da8 <_malloc_r+0x1c>
 8001da4:	42a9      	cmp	r1, r5
 8001da6:	d904      	bls.n	8001db2 <_malloc_r+0x26>
 8001da8:	230c      	movs	r3, #12
 8001daa:	6033      	str	r3, [r6, #0]
 8001dac:	2000      	movs	r0, #0
 8001dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001db2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e88 <_malloc_r+0xfc>
 8001db6:	f000 f869 	bl	8001e8c <__malloc_lock>
 8001dba:	f8d8 3000 	ldr.w	r3, [r8]
 8001dbe:	461c      	mov	r4, r3
 8001dc0:	bb44      	cbnz	r4, 8001e14 <_malloc_r+0x88>
 8001dc2:	4629      	mov	r1, r5
 8001dc4:	4630      	mov	r0, r6
 8001dc6:	f7ff ffbf 	bl	8001d48 <sbrk_aligned>
 8001dca:	1c43      	adds	r3, r0, #1
 8001dcc:	4604      	mov	r4, r0
 8001dce:	d158      	bne.n	8001e82 <_malloc_r+0xf6>
 8001dd0:	f8d8 4000 	ldr.w	r4, [r8]
 8001dd4:	4627      	mov	r7, r4
 8001dd6:	2f00      	cmp	r7, #0
 8001dd8:	d143      	bne.n	8001e62 <_malloc_r+0xd6>
 8001dda:	2c00      	cmp	r4, #0
 8001ddc:	d04b      	beq.n	8001e76 <_malloc_r+0xea>
 8001dde:	6823      	ldr	r3, [r4, #0]
 8001de0:	4639      	mov	r1, r7
 8001de2:	4630      	mov	r0, r6
 8001de4:	eb04 0903 	add.w	r9, r4, r3
 8001de8:	f000 fa0a 	bl	8002200 <_sbrk_r>
 8001dec:	4581      	cmp	r9, r0
 8001dee:	d142      	bne.n	8001e76 <_malloc_r+0xea>
 8001df0:	6821      	ldr	r1, [r4, #0]
 8001df2:	4630      	mov	r0, r6
 8001df4:	1a6d      	subs	r5, r5, r1
 8001df6:	4629      	mov	r1, r5
 8001df8:	f7ff ffa6 	bl	8001d48 <sbrk_aligned>
 8001dfc:	3001      	adds	r0, #1
 8001dfe:	d03a      	beq.n	8001e76 <_malloc_r+0xea>
 8001e00:	6823      	ldr	r3, [r4, #0]
 8001e02:	442b      	add	r3, r5
 8001e04:	6023      	str	r3, [r4, #0]
 8001e06:	f8d8 3000 	ldr.w	r3, [r8]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	bb62      	cbnz	r2, 8001e68 <_malloc_r+0xdc>
 8001e0e:	f8c8 7000 	str.w	r7, [r8]
 8001e12:	e00f      	b.n	8001e34 <_malloc_r+0xa8>
 8001e14:	6822      	ldr	r2, [r4, #0]
 8001e16:	1b52      	subs	r2, r2, r5
 8001e18:	d420      	bmi.n	8001e5c <_malloc_r+0xd0>
 8001e1a:	2a0b      	cmp	r2, #11
 8001e1c:	d917      	bls.n	8001e4e <_malloc_r+0xc2>
 8001e1e:	1961      	adds	r1, r4, r5
 8001e20:	42a3      	cmp	r3, r4
 8001e22:	6025      	str	r5, [r4, #0]
 8001e24:	bf18      	it	ne
 8001e26:	6059      	strne	r1, [r3, #4]
 8001e28:	6863      	ldr	r3, [r4, #4]
 8001e2a:	bf08      	it	eq
 8001e2c:	f8c8 1000 	streq.w	r1, [r8]
 8001e30:	5162      	str	r2, [r4, r5]
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	4630      	mov	r0, r6
 8001e36:	f000 f82f 	bl	8001e98 <__malloc_unlock>
 8001e3a:	f104 000b 	add.w	r0, r4, #11
 8001e3e:	1d23      	adds	r3, r4, #4
 8001e40:	f020 0007 	bic.w	r0, r0, #7
 8001e44:	1ac2      	subs	r2, r0, r3
 8001e46:	bf1c      	itt	ne
 8001e48:	1a1b      	subne	r3, r3, r0
 8001e4a:	50a3      	strne	r3, [r4, r2]
 8001e4c:	e7af      	b.n	8001dae <_malloc_r+0x22>
 8001e4e:	6862      	ldr	r2, [r4, #4]
 8001e50:	42a3      	cmp	r3, r4
 8001e52:	bf0c      	ite	eq
 8001e54:	f8c8 2000 	streq.w	r2, [r8]
 8001e58:	605a      	strne	r2, [r3, #4]
 8001e5a:	e7eb      	b.n	8001e34 <_malloc_r+0xa8>
 8001e5c:	4623      	mov	r3, r4
 8001e5e:	6864      	ldr	r4, [r4, #4]
 8001e60:	e7ae      	b.n	8001dc0 <_malloc_r+0x34>
 8001e62:	463c      	mov	r4, r7
 8001e64:	687f      	ldr	r7, [r7, #4]
 8001e66:	e7b6      	b.n	8001dd6 <_malloc_r+0x4a>
 8001e68:	461a      	mov	r2, r3
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	42a3      	cmp	r3, r4
 8001e6e:	d1fb      	bne.n	8001e68 <_malloc_r+0xdc>
 8001e70:	2300      	movs	r3, #0
 8001e72:	6053      	str	r3, [r2, #4]
 8001e74:	e7de      	b.n	8001e34 <_malloc_r+0xa8>
 8001e76:	230c      	movs	r3, #12
 8001e78:	4630      	mov	r0, r6
 8001e7a:	6033      	str	r3, [r6, #0]
 8001e7c:	f000 f80c 	bl	8001e98 <__malloc_unlock>
 8001e80:	e794      	b.n	8001dac <_malloc_r+0x20>
 8001e82:	6005      	str	r5, [r0, #0]
 8001e84:	e7d6      	b.n	8001e34 <_malloc_r+0xa8>
 8001e86:	bf00      	nop
 8001e88:	200000f4 	.word	0x200000f4

08001e8c <__malloc_lock>:
 8001e8c:	4801      	ldr	r0, [pc, #4]	@ (8001e94 <__malloc_lock+0x8>)
 8001e8e:	f000 ba04 	b.w	800229a <__retarget_lock_acquire_recursive>
 8001e92:	bf00      	nop
 8001e94:	20000238 	.word	0x20000238

08001e98 <__malloc_unlock>:
 8001e98:	4801      	ldr	r0, [pc, #4]	@ (8001ea0 <__malloc_unlock+0x8>)
 8001e9a:	f000 b9ff 	b.w	800229c <__retarget_lock_release_recursive>
 8001e9e:	bf00      	nop
 8001ea0:	20000238 	.word	0x20000238

08001ea4 <srand>:
 8001ea4:	b538      	push	{r3, r4, r5, lr}
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <srand+0x44>)
 8001ea8:	4604      	mov	r4, r0
 8001eaa:	681d      	ldr	r5, [r3, #0]
 8001eac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001eae:	b9b3      	cbnz	r3, 8001ede <srand+0x3a>
 8001eb0:	2018      	movs	r0, #24
 8001eb2:	f7ff ff41 	bl	8001d38 <malloc>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	6328      	str	r0, [r5, #48]	@ 0x30
 8001eba:	b920      	cbnz	r0, 8001ec6 <srand+0x22>
 8001ebc:	2146      	movs	r1, #70	@ 0x46
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <srand+0x48>)
 8001ec0:	480b      	ldr	r0, [pc, #44]	@ (8001ef0 <srand+0x4c>)
 8001ec2:	f000 f9ed 	bl	80022a0 <__assert_func>
 8001ec6:	490b      	ldr	r1, [pc, #44]	@ (8001ef4 <srand+0x50>)
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <srand+0x54>)
 8001eca:	e9c0 1300 	strd	r1, r3, [r0]
 8001ece:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <srand+0x58>)
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	6083      	str	r3, [r0, #8]
 8001ed4:	230b      	movs	r3, #11
 8001ed6:	8183      	strh	r3, [r0, #12]
 8001ed8:	2001      	movs	r0, #1
 8001eda:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001ee2:	611c      	str	r4, [r3, #16]
 8001ee4:	615a      	str	r2, [r3, #20]
 8001ee6:	bd38      	pop	{r3, r4, r5, pc}
 8001ee8:	2000001c 	.word	0x2000001c
 8001eec:	08002d9e 	.word	0x08002d9e
 8001ef0:	08002db5 	.word	0x08002db5
 8001ef4:	abcd330e 	.word	0xabcd330e
 8001ef8:	e66d1234 	.word	0xe66d1234
 8001efc:	0005deec 	.word	0x0005deec

08001f00 <rand>:
 8001f00:	4b16      	ldr	r3, [pc, #88]	@ (8001f5c <rand+0x5c>)
 8001f02:	b510      	push	{r4, lr}
 8001f04:	681c      	ldr	r4, [r3, #0]
 8001f06:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001f08:	b9b3      	cbnz	r3, 8001f38 <rand+0x38>
 8001f0a:	2018      	movs	r0, #24
 8001f0c:	f7ff ff14 	bl	8001d38 <malloc>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6320      	str	r0, [r4, #48]	@ 0x30
 8001f14:	b920      	cbnz	r0, 8001f20 <rand+0x20>
 8001f16:	2152      	movs	r1, #82	@ 0x52
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <rand+0x60>)
 8001f1a:	4812      	ldr	r0, [pc, #72]	@ (8001f64 <rand+0x64>)
 8001f1c:	f000 f9c0 	bl	80022a0 <__assert_func>
 8001f20:	4911      	ldr	r1, [pc, #68]	@ (8001f68 <rand+0x68>)
 8001f22:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <rand+0x6c>)
 8001f24:	e9c0 1300 	strd	r1, r3, [r0]
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <rand+0x70>)
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	6083      	str	r3, [r0, #8]
 8001f2e:	230b      	movs	r3, #11
 8001f30:	8183      	strh	r3, [r0, #12]
 8001f32:	2001      	movs	r0, #1
 8001f34:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001f38:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001f3a:	480e      	ldr	r0, [pc, #56]	@ (8001f74 <rand+0x74>)
 8001f3c:	690b      	ldr	r3, [r1, #16]
 8001f3e:	694c      	ldr	r4, [r1, #20]
 8001f40:	4358      	muls	r0, r3
 8001f42:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <rand+0x78>)
 8001f44:	fb02 0004 	mla	r0, r2, r4, r0
 8001f48:	fba3 3202 	umull	r3, r2, r3, r2
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	eb40 0002 	adc.w	r0, r0, r2
 8001f52:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001f56:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001f5a:	bd10      	pop	{r4, pc}
 8001f5c:	2000001c 	.word	0x2000001c
 8001f60:	08002d9e 	.word	0x08002d9e
 8001f64:	08002db5 	.word	0x08002db5
 8001f68:	abcd330e 	.word	0xabcd330e
 8001f6c:	e66d1234 	.word	0xe66d1234
 8001f70:	0005deec 	.word	0x0005deec
 8001f74:	5851f42d 	.word	0x5851f42d
 8001f78:	4c957f2d 	.word	0x4c957f2d

08001f7c <std>:
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	b510      	push	{r4, lr}
 8001f80:	4604      	mov	r4, r0
 8001f82:	e9c0 3300 	strd	r3, r3, [r0]
 8001f86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001f8a:	6083      	str	r3, [r0, #8]
 8001f8c:	8181      	strh	r1, [r0, #12]
 8001f8e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f90:	81c2      	strh	r2, [r0, #14]
 8001f92:	6183      	str	r3, [r0, #24]
 8001f94:	4619      	mov	r1, r3
 8001f96:	2208      	movs	r2, #8
 8001f98:	305c      	adds	r0, #92	@ 0x5c
 8001f9a:	f000 f8f4 	bl	8002186 <memset>
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <std+0x58>)
 8001fa0:	6224      	str	r4, [r4, #32]
 8001fa2:	6263      	str	r3, [r4, #36]	@ 0x24
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <std+0x5c>)
 8001fa6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <std+0x60>)
 8001faa:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <std+0x64>)
 8001fae:	6323      	str	r3, [r4, #48]	@ 0x30
 8001fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe4 <std+0x68>)
 8001fb2:	429c      	cmp	r4, r3
 8001fb4:	d006      	beq.n	8001fc4 <std+0x48>
 8001fb6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001fba:	4294      	cmp	r4, r2
 8001fbc:	d002      	beq.n	8001fc4 <std+0x48>
 8001fbe:	33d0      	adds	r3, #208	@ 0xd0
 8001fc0:	429c      	cmp	r4, r3
 8001fc2:	d105      	bne.n	8001fd0 <std+0x54>
 8001fc4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fcc:	f000 b964 	b.w	8002298 <__retarget_lock_init_recursive>
 8001fd0:	bd10      	pop	{r4, pc}
 8001fd2:	bf00      	nop
 8001fd4:	08002101 	.word	0x08002101
 8001fd8:	08002123 	.word	0x08002123
 8001fdc:	0800215b 	.word	0x0800215b
 8001fe0:	0800217f 	.word	0x0800217f
 8001fe4:	200000f8 	.word	0x200000f8

08001fe8 <stdio_exit_handler>:
 8001fe8:	4a02      	ldr	r2, [pc, #8]	@ (8001ff4 <stdio_exit_handler+0xc>)
 8001fea:	4903      	ldr	r1, [pc, #12]	@ (8001ff8 <stdio_exit_handler+0x10>)
 8001fec:	4803      	ldr	r0, [pc, #12]	@ (8001ffc <stdio_exit_handler+0x14>)
 8001fee:	f000 b869 	b.w	80020c4 <_fwalk_sglue>
 8001ff2:	bf00      	nop
 8001ff4:	20000010 	.word	0x20000010
 8001ff8:	0800246d 	.word	0x0800246d
 8001ffc:	20000020 	.word	0x20000020

08002000 <cleanup_stdio>:
 8002000:	6841      	ldr	r1, [r0, #4]
 8002002:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <cleanup_stdio+0x34>)
 8002004:	b510      	push	{r4, lr}
 8002006:	4299      	cmp	r1, r3
 8002008:	4604      	mov	r4, r0
 800200a:	d001      	beq.n	8002010 <cleanup_stdio+0x10>
 800200c:	f000 fa2e 	bl	800246c <_fflush_r>
 8002010:	68a1      	ldr	r1, [r4, #8]
 8002012:	4b09      	ldr	r3, [pc, #36]	@ (8002038 <cleanup_stdio+0x38>)
 8002014:	4299      	cmp	r1, r3
 8002016:	d002      	beq.n	800201e <cleanup_stdio+0x1e>
 8002018:	4620      	mov	r0, r4
 800201a:	f000 fa27 	bl	800246c <_fflush_r>
 800201e:	68e1      	ldr	r1, [r4, #12]
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <cleanup_stdio+0x3c>)
 8002022:	4299      	cmp	r1, r3
 8002024:	d004      	beq.n	8002030 <cleanup_stdio+0x30>
 8002026:	4620      	mov	r0, r4
 8002028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800202c:	f000 ba1e 	b.w	800246c <_fflush_r>
 8002030:	bd10      	pop	{r4, pc}
 8002032:	bf00      	nop
 8002034:	200000f8 	.word	0x200000f8
 8002038:	20000160 	.word	0x20000160
 800203c:	200001c8 	.word	0x200001c8

08002040 <global_stdio_init.part.0>:
 8002040:	b510      	push	{r4, lr}
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <global_stdio_init.part.0+0x30>)
 8002044:	4c0b      	ldr	r4, [pc, #44]	@ (8002074 <global_stdio_init.part.0+0x34>)
 8002046:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <global_stdio_init.part.0+0x38>)
 8002048:	4620      	mov	r0, r4
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	2104      	movs	r1, #4
 800204e:	2200      	movs	r2, #0
 8002050:	f7ff ff94 	bl	8001f7c <std>
 8002054:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002058:	2201      	movs	r2, #1
 800205a:	2109      	movs	r1, #9
 800205c:	f7ff ff8e 	bl	8001f7c <std>
 8002060:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002064:	2202      	movs	r2, #2
 8002066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800206a:	2112      	movs	r1, #18
 800206c:	f7ff bf86 	b.w	8001f7c <std>
 8002070:	20000230 	.word	0x20000230
 8002074:	200000f8 	.word	0x200000f8
 8002078:	08001fe9 	.word	0x08001fe9

0800207c <__sfp_lock_acquire>:
 800207c:	4801      	ldr	r0, [pc, #4]	@ (8002084 <__sfp_lock_acquire+0x8>)
 800207e:	f000 b90c 	b.w	800229a <__retarget_lock_acquire_recursive>
 8002082:	bf00      	nop
 8002084:	20000239 	.word	0x20000239

08002088 <__sfp_lock_release>:
 8002088:	4801      	ldr	r0, [pc, #4]	@ (8002090 <__sfp_lock_release+0x8>)
 800208a:	f000 b907 	b.w	800229c <__retarget_lock_release_recursive>
 800208e:	bf00      	nop
 8002090:	20000239 	.word	0x20000239

08002094 <__sinit>:
 8002094:	b510      	push	{r4, lr}
 8002096:	4604      	mov	r4, r0
 8002098:	f7ff fff0 	bl	800207c <__sfp_lock_acquire>
 800209c:	6a23      	ldr	r3, [r4, #32]
 800209e:	b11b      	cbz	r3, 80020a8 <__sinit+0x14>
 80020a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020a4:	f7ff bff0 	b.w	8002088 <__sfp_lock_release>
 80020a8:	4b04      	ldr	r3, [pc, #16]	@ (80020bc <__sinit+0x28>)
 80020aa:	6223      	str	r3, [r4, #32]
 80020ac:	4b04      	ldr	r3, [pc, #16]	@ (80020c0 <__sinit+0x2c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1f5      	bne.n	80020a0 <__sinit+0xc>
 80020b4:	f7ff ffc4 	bl	8002040 <global_stdio_init.part.0>
 80020b8:	e7f2      	b.n	80020a0 <__sinit+0xc>
 80020ba:	bf00      	nop
 80020bc:	08002001 	.word	0x08002001
 80020c0:	20000230 	.word	0x20000230

080020c4 <_fwalk_sglue>:
 80020c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80020c8:	4607      	mov	r7, r0
 80020ca:	4688      	mov	r8, r1
 80020cc:	4614      	mov	r4, r2
 80020ce:	2600      	movs	r6, #0
 80020d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80020d4:	f1b9 0901 	subs.w	r9, r9, #1
 80020d8:	d505      	bpl.n	80020e6 <_fwalk_sglue+0x22>
 80020da:	6824      	ldr	r4, [r4, #0]
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d1f7      	bne.n	80020d0 <_fwalk_sglue+0xc>
 80020e0:	4630      	mov	r0, r6
 80020e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80020e6:	89ab      	ldrh	r3, [r5, #12]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d907      	bls.n	80020fc <_fwalk_sglue+0x38>
 80020ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80020f0:	3301      	adds	r3, #1
 80020f2:	d003      	beq.n	80020fc <_fwalk_sglue+0x38>
 80020f4:	4629      	mov	r1, r5
 80020f6:	4638      	mov	r0, r7
 80020f8:	47c0      	blx	r8
 80020fa:	4306      	orrs	r6, r0
 80020fc:	3568      	adds	r5, #104	@ 0x68
 80020fe:	e7e9      	b.n	80020d4 <_fwalk_sglue+0x10>

08002100 <__sread>:
 8002100:	b510      	push	{r4, lr}
 8002102:	460c      	mov	r4, r1
 8002104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002108:	f000 f868 	bl	80021dc <_read_r>
 800210c:	2800      	cmp	r0, #0
 800210e:	bfab      	itete	ge
 8002110:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002112:	89a3      	ldrhlt	r3, [r4, #12]
 8002114:	181b      	addge	r3, r3, r0
 8002116:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800211a:	bfac      	ite	ge
 800211c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800211e:	81a3      	strhlt	r3, [r4, #12]
 8002120:	bd10      	pop	{r4, pc}

08002122 <__swrite>:
 8002122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002126:	461f      	mov	r7, r3
 8002128:	898b      	ldrh	r3, [r1, #12]
 800212a:	4605      	mov	r5, r0
 800212c:	05db      	lsls	r3, r3, #23
 800212e:	460c      	mov	r4, r1
 8002130:	4616      	mov	r6, r2
 8002132:	d505      	bpl.n	8002140 <__swrite+0x1e>
 8002134:	2302      	movs	r3, #2
 8002136:	2200      	movs	r2, #0
 8002138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800213c:	f000 f83c 	bl	80021b8 <_lseek_r>
 8002140:	89a3      	ldrh	r3, [r4, #12]
 8002142:	4632      	mov	r2, r6
 8002144:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002148:	81a3      	strh	r3, [r4, #12]
 800214a:	4628      	mov	r0, r5
 800214c:	463b      	mov	r3, r7
 800214e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002156:	f000 b863 	b.w	8002220 <_write_r>

0800215a <__sseek>:
 800215a:	b510      	push	{r4, lr}
 800215c:	460c      	mov	r4, r1
 800215e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002162:	f000 f829 	bl	80021b8 <_lseek_r>
 8002166:	1c43      	adds	r3, r0, #1
 8002168:	89a3      	ldrh	r3, [r4, #12]
 800216a:	bf15      	itete	ne
 800216c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800216e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002172:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002176:	81a3      	strheq	r3, [r4, #12]
 8002178:	bf18      	it	ne
 800217a:	81a3      	strhne	r3, [r4, #12]
 800217c:	bd10      	pop	{r4, pc}

0800217e <__sclose>:
 800217e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002182:	f000 b809 	b.w	8002198 <_close_r>

08002186 <memset>:
 8002186:	4603      	mov	r3, r0
 8002188:	4402      	add	r2, r0
 800218a:	4293      	cmp	r3, r2
 800218c:	d100      	bne.n	8002190 <memset+0xa>
 800218e:	4770      	bx	lr
 8002190:	f803 1b01 	strb.w	r1, [r3], #1
 8002194:	e7f9      	b.n	800218a <memset+0x4>
	...

08002198 <_close_r>:
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	2300      	movs	r3, #0
 800219c:	4d05      	ldr	r5, [pc, #20]	@ (80021b4 <_close_r+0x1c>)
 800219e:	4604      	mov	r4, r0
 80021a0:	4608      	mov	r0, r1
 80021a2:	602b      	str	r3, [r5, #0]
 80021a4:	f7fe fdd3 	bl	8000d4e <_close>
 80021a8:	1c43      	adds	r3, r0, #1
 80021aa:	d102      	bne.n	80021b2 <_close_r+0x1a>
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	b103      	cbz	r3, 80021b2 <_close_r+0x1a>
 80021b0:	6023      	str	r3, [r4, #0]
 80021b2:	bd38      	pop	{r3, r4, r5, pc}
 80021b4:	20000234 	.word	0x20000234

080021b8 <_lseek_r>:
 80021b8:	b538      	push	{r3, r4, r5, lr}
 80021ba:	4604      	mov	r4, r0
 80021bc:	4608      	mov	r0, r1
 80021be:	4611      	mov	r1, r2
 80021c0:	2200      	movs	r2, #0
 80021c2:	4d05      	ldr	r5, [pc, #20]	@ (80021d8 <_lseek_r+0x20>)
 80021c4:	602a      	str	r2, [r5, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	f7fe fde5 	bl	8000d96 <_lseek>
 80021cc:	1c43      	adds	r3, r0, #1
 80021ce:	d102      	bne.n	80021d6 <_lseek_r+0x1e>
 80021d0:	682b      	ldr	r3, [r5, #0]
 80021d2:	b103      	cbz	r3, 80021d6 <_lseek_r+0x1e>
 80021d4:	6023      	str	r3, [r4, #0]
 80021d6:	bd38      	pop	{r3, r4, r5, pc}
 80021d8:	20000234 	.word	0x20000234

080021dc <_read_r>:
 80021dc:	b538      	push	{r3, r4, r5, lr}
 80021de:	4604      	mov	r4, r0
 80021e0:	4608      	mov	r0, r1
 80021e2:	4611      	mov	r1, r2
 80021e4:	2200      	movs	r2, #0
 80021e6:	4d05      	ldr	r5, [pc, #20]	@ (80021fc <_read_r+0x20>)
 80021e8:	602a      	str	r2, [r5, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	f7fe fd76 	bl	8000cdc <_read>
 80021f0:	1c43      	adds	r3, r0, #1
 80021f2:	d102      	bne.n	80021fa <_read_r+0x1e>
 80021f4:	682b      	ldr	r3, [r5, #0]
 80021f6:	b103      	cbz	r3, 80021fa <_read_r+0x1e>
 80021f8:	6023      	str	r3, [r4, #0]
 80021fa:	bd38      	pop	{r3, r4, r5, pc}
 80021fc:	20000234 	.word	0x20000234

08002200 <_sbrk_r>:
 8002200:	b538      	push	{r3, r4, r5, lr}
 8002202:	2300      	movs	r3, #0
 8002204:	4d05      	ldr	r5, [pc, #20]	@ (800221c <_sbrk_r+0x1c>)
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	602b      	str	r3, [r5, #0]
 800220c:	f7fe fdd0 	bl	8000db0 <_sbrk>
 8002210:	1c43      	adds	r3, r0, #1
 8002212:	d102      	bne.n	800221a <_sbrk_r+0x1a>
 8002214:	682b      	ldr	r3, [r5, #0]
 8002216:	b103      	cbz	r3, 800221a <_sbrk_r+0x1a>
 8002218:	6023      	str	r3, [r4, #0]
 800221a:	bd38      	pop	{r3, r4, r5, pc}
 800221c:	20000234 	.word	0x20000234

08002220 <_write_r>:
 8002220:	b538      	push	{r3, r4, r5, lr}
 8002222:	4604      	mov	r4, r0
 8002224:	4608      	mov	r0, r1
 8002226:	4611      	mov	r1, r2
 8002228:	2200      	movs	r2, #0
 800222a:	4d05      	ldr	r5, [pc, #20]	@ (8002240 <_write_r+0x20>)
 800222c:	602a      	str	r2, [r5, #0]
 800222e:	461a      	mov	r2, r3
 8002230:	f7fe fd71 	bl	8000d16 <_write>
 8002234:	1c43      	adds	r3, r0, #1
 8002236:	d102      	bne.n	800223e <_write_r+0x1e>
 8002238:	682b      	ldr	r3, [r5, #0]
 800223a:	b103      	cbz	r3, 800223e <_write_r+0x1e>
 800223c:	6023      	str	r3, [r4, #0]
 800223e:	bd38      	pop	{r3, r4, r5, pc}
 8002240:	20000234 	.word	0x20000234

08002244 <__errno>:
 8002244:	4b01      	ldr	r3, [pc, #4]	@ (800224c <__errno+0x8>)
 8002246:	6818      	ldr	r0, [r3, #0]
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	2000001c 	.word	0x2000001c

08002250 <__libc_init_array>:
 8002250:	b570      	push	{r4, r5, r6, lr}
 8002252:	2600      	movs	r6, #0
 8002254:	4d0c      	ldr	r5, [pc, #48]	@ (8002288 <__libc_init_array+0x38>)
 8002256:	4c0d      	ldr	r4, [pc, #52]	@ (800228c <__libc_init_array+0x3c>)
 8002258:	1b64      	subs	r4, r4, r5
 800225a:	10a4      	asrs	r4, r4, #2
 800225c:	42a6      	cmp	r6, r4
 800225e:	d109      	bne.n	8002274 <__libc_init_array+0x24>
 8002260:	f000 fd80 	bl	8002d64 <_init>
 8002264:	2600      	movs	r6, #0
 8002266:	4d0a      	ldr	r5, [pc, #40]	@ (8002290 <__libc_init_array+0x40>)
 8002268:	4c0a      	ldr	r4, [pc, #40]	@ (8002294 <__libc_init_array+0x44>)
 800226a:	1b64      	subs	r4, r4, r5
 800226c:	10a4      	asrs	r4, r4, #2
 800226e:	42a6      	cmp	r6, r4
 8002270:	d105      	bne.n	800227e <__libc_init_array+0x2e>
 8002272:	bd70      	pop	{r4, r5, r6, pc}
 8002274:	f855 3b04 	ldr.w	r3, [r5], #4
 8002278:	4798      	blx	r3
 800227a:	3601      	adds	r6, #1
 800227c:	e7ee      	b.n	800225c <__libc_init_array+0xc>
 800227e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002282:	4798      	blx	r3
 8002284:	3601      	adds	r6, #1
 8002286:	e7f2      	b.n	800226e <__libc_init_array+0x1e>
 8002288:	08002e7c 	.word	0x08002e7c
 800228c:	08002e7c 	.word	0x08002e7c
 8002290:	08002e7c 	.word	0x08002e7c
 8002294:	08002e80 	.word	0x08002e80

08002298 <__retarget_lock_init_recursive>:
 8002298:	4770      	bx	lr

0800229a <__retarget_lock_acquire_recursive>:
 800229a:	4770      	bx	lr

0800229c <__retarget_lock_release_recursive>:
 800229c:	4770      	bx	lr
	...

080022a0 <__assert_func>:
 80022a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80022a2:	4614      	mov	r4, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4b09      	ldr	r3, [pc, #36]	@ (80022cc <__assert_func+0x2c>)
 80022a8:	4605      	mov	r5, r0
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68d8      	ldr	r0, [r3, #12]
 80022ae:	b954      	cbnz	r4, 80022c6 <__assert_func+0x26>
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <__assert_func+0x30>)
 80022b2:	461c      	mov	r4, r3
 80022b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80022b8:	9100      	str	r1, [sp, #0]
 80022ba:	462b      	mov	r3, r5
 80022bc:	4905      	ldr	r1, [pc, #20]	@ (80022d4 <__assert_func+0x34>)
 80022be:	f000 f8fd 	bl	80024bc <fiprintf>
 80022c2:	f000 f90d 	bl	80024e0 <abort>
 80022c6:	4b04      	ldr	r3, [pc, #16]	@ (80022d8 <__assert_func+0x38>)
 80022c8:	e7f4      	b.n	80022b4 <__assert_func+0x14>
 80022ca:	bf00      	nop
 80022cc:	2000001c 	.word	0x2000001c
 80022d0:	08002e48 	.word	0x08002e48
 80022d4:	08002e1a 	.word	0x08002e1a
 80022d8:	08002e0d 	.word	0x08002e0d

080022dc <_free_r>:
 80022dc:	b538      	push	{r3, r4, r5, lr}
 80022de:	4605      	mov	r5, r0
 80022e0:	2900      	cmp	r1, #0
 80022e2:	d040      	beq.n	8002366 <_free_r+0x8a>
 80022e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022e8:	1f0c      	subs	r4, r1, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bfb8      	it	lt
 80022ee:	18e4      	addlt	r4, r4, r3
 80022f0:	f7ff fdcc 	bl	8001e8c <__malloc_lock>
 80022f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002368 <_free_r+0x8c>)
 80022f6:	6813      	ldr	r3, [r2, #0]
 80022f8:	b933      	cbnz	r3, 8002308 <_free_r+0x2c>
 80022fa:	6063      	str	r3, [r4, #4]
 80022fc:	6014      	str	r4, [r2, #0]
 80022fe:	4628      	mov	r0, r5
 8002300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002304:	f7ff bdc8 	b.w	8001e98 <__malloc_unlock>
 8002308:	42a3      	cmp	r3, r4
 800230a:	d908      	bls.n	800231e <_free_r+0x42>
 800230c:	6820      	ldr	r0, [r4, #0]
 800230e:	1821      	adds	r1, r4, r0
 8002310:	428b      	cmp	r3, r1
 8002312:	bf01      	itttt	eq
 8002314:	6819      	ldreq	r1, [r3, #0]
 8002316:	685b      	ldreq	r3, [r3, #4]
 8002318:	1809      	addeq	r1, r1, r0
 800231a:	6021      	streq	r1, [r4, #0]
 800231c:	e7ed      	b.n	80022fa <_free_r+0x1e>
 800231e:	461a      	mov	r2, r3
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	b10b      	cbz	r3, 8002328 <_free_r+0x4c>
 8002324:	42a3      	cmp	r3, r4
 8002326:	d9fa      	bls.n	800231e <_free_r+0x42>
 8002328:	6811      	ldr	r1, [r2, #0]
 800232a:	1850      	adds	r0, r2, r1
 800232c:	42a0      	cmp	r0, r4
 800232e:	d10b      	bne.n	8002348 <_free_r+0x6c>
 8002330:	6820      	ldr	r0, [r4, #0]
 8002332:	4401      	add	r1, r0
 8002334:	1850      	adds	r0, r2, r1
 8002336:	4283      	cmp	r3, r0
 8002338:	6011      	str	r1, [r2, #0]
 800233a:	d1e0      	bne.n	80022fe <_free_r+0x22>
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4408      	add	r0, r1
 8002342:	6010      	str	r0, [r2, #0]
 8002344:	6053      	str	r3, [r2, #4]
 8002346:	e7da      	b.n	80022fe <_free_r+0x22>
 8002348:	d902      	bls.n	8002350 <_free_r+0x74>
 800234a:	230c      	movs	r3, #12
 800234c:	602b      	str	r3, [r5, #0]
 800234e:	e7d6      	b.n	80022fe <_free_r+0x22>
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	1821      	adds	r1, r4, r0
 8002354:	428b      	cmp	r3, r1
 8002356:	bf01      	itttt	eq
 8002358:	6819      	ldreq	r1, [r3, #0]
 800235a:	685b      	ldreq	r3, [r3, #4]
 800235c:	1809      	addeq	r1, r1, r0
 800235e:	6021      	streq	r1, [r4, #0]
 8002360:	6063      	str	r3, [r4, #4]
 8002362:	6054      	str	r4, [r2, #4]
 8002364:	e7cb      	b.n	80022fe <_free_r+0x22>
 8002366:	bd38      	pop	{r3, r4, r5, pc}
 8002368:	200000f4 	.word	0x200000f4

0800236c <__sflush_r>:
 800236c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	0716      	lsls	r6, r2, #28
 8002374:	4605      	mov	r5, r0
 8002376:	460c      	mov	r4, r1
 8002378:	d454      	bmi.n	8002424 <__sflush_r+0xb8>
 800237a:	684b      	ldr	r3, [r1, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	dc02      	bgt.n	8002386 <__sflush_r+0x1a>
 8002380:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002382:	2b00      	cmp	r3, #0
 8002384:	dd48      	ble.n	8002418 <__sflush_r+0xac>
 8002386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002388:	2e00      	cmp	r6, #0
 800238a:	d045      	beq.n	8002418 <__sflush_r+0xac>
 800238c:	2300      	movs	r3, #0
 800238e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002392:	682f      	ldr	r7, [r5, #0]
 8002394:	6a21      	ldr	r1, [r4, #32]
 8002396:	602b      	str	r3, [r5, #0]
 8002398:	d030      	beq.n	80023fc <__sflush_r+0x90>
 800239a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800239c:	89a3      	ldrh	r3, [r4, #12]
 800239e:	0759      	lsls	r1, r3, #29
 80023a0:	d505      	bpl.n	80023ae <__sflush_r+0x42>
 80023a2:	6863      	ldr	r3, [r4, #4]
 80023a4:	1ad2      	subs	r2, r2, r3
 80023a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80023a8:	b10b      	cbz	r3, 80023ae <__sflush_r+0x42>
 80023aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023ac:	1ad2      	subs	r2, r2, r3
 80023ae:	2300      	movs	r3, #0
 80023b0:	4628      	mov	r0, r5
 80023b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80023b4:	6a21      	ldr	r1, [r4, #32]
 80023b6:	47b0      	blx	r6
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	89a3      	ldrh	r3, [r4, #12]
 80023bc:	d106      	bne.n	80023cc <__sflush_r+0x60>
 80023be:	6829      	ldr	r1, [r5, #0]
 80023c0:	291d      	cmp	r1, #29
 80023c2:	d82b      	bhi.n	800241c <__sflush_r+0xb0>
 80023c4:	4a28      	ldr	r2, [pc, #160]	@ (8002468 <__sflush_r+0xfc>)
 80023c6:	410a      	asrs	r2, r1
 80023c8:	07d6      	lsls	r6, r2, #31
 80023ca:	d427      	bmi.n	800241c <__sflush_r+0xb0>
 80023cc:	2200      	movs	r2, #0
 80023ce:	6062      	str	r2, [r4, #4]
 80023d0:	6922      	ldr	r2, [r4, #16]
 80023d2:	04d9      	lsls	r1, r3, #19
 80023d4:	6022      	str	r2, [r4, #0]
 80023d6:	d504      	bpl.n	80023e2 <__sflush_r+0x76>
 80023d8:	1c42      	adds	r2, r0, #1
 80023da:	d101      	bne.n	80023e0 <__sflush_r+0x74>
 80023dc:	682b      	ldr	r3, [r5, #0]
 80023de:	b903      	cbnz	r3, 80023e2 <__sflush_r+0x76>
 80023e0:	6560      	str	r0, [r4, #84]	@ 0x54
 80023e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80023e4:	602f      	str	r7, [r5, #0]
 80023e6:	b1b9      	cbz	r1, 8002418 <__sflush_r+0xac>
 80023e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80023ec:	4299      	cmp	r1, r3
 80023ee:	d002      	beq.n	80023f6 <__sflush_r+0x8a>
 80023f0:	4628      	mov	r0, r5
 80023f2:	f7ff ff73 	bl	80022dc <_free_r>
 80023f6:	2300      	movs	r3, #0
 80023f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80023fa:	e00d      	b.n	8002418 <__sflush_r+0xac>
 80023fc:	2301      	movs	r3, #1
 80023fe:	4628      	mov	r0, r5
 8002400:	47b0      	blx	r6
 8002402:	4602      	mov	r2, r0
 8002404:	1c50      	adds	r0, r2, #1
 8002406:	d1c9      	bne.n	800239c <__sflush_r+0x30>
 8002408:	682b      	ldr	r3, [r5, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0c6      	beq.n	800239c <__sflush_r+0x30>
 800240e:	2b1d      	cmp	r3, #29
 8002410:	d001      	beq.n	8002416 <__sflush_r+0xaa>
 8002412:	2b16      	cmp	r3, #22
 8002414:	d11d      	bne.n	8002452 <__sflush_r+0xe6>
 8002416:	602f      	str	r7, [r5, #0]
 8002418:	2000      	movs	r0, #0
 800241a:	e021      	b.n	8002460 <__sflush_r+0xf4>
 800241c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002420:	b21b      	sxth	r3, r3
 8002422:	e01a      	b.n	800245a <__sflush_r+0xee>
 8002424:	690f      	ldr	r7, [r1, #16]
 8002426:	2f00      	cmp	r7, #0
 8002428:	d0f6      	beq.n	8002418 <__sflush_r+0xac>
 800242a:	0793      	lsls	r3, r2, #30
 800242c:	bf18      	it	ne
 800242e:	2300      	movne	r3, #0
 8002430:	680e      	ldr	r6, [r1, #0]
 8002432:	bf08      	it	eq
 8002434:	694b      	ldreq	r3, [r1, #20]
 8002436:	1bf6      	subs	r6, r6, r7
 8002438:	600f      	str	r7, [r1, #0]
 800243a:	608b      	str	r3, [r1, #8]
 800243c:	2e00      	cmp	r6, #0
 800243e:	ddeb      	ble.n	8002418 <__sflush_r+0xac>
 8002440:	4633      	mov	r3, r6
 8002442:	463a      	mov	r2, r7
 8002444:	4628      	mov	r0, r5
 8002446:	6a21      	ldr	r1, [r4, #32]
 8002448:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800244c:	47e0      	blx	ip
 800244e:	2800      	cmp	r0, #0
 8002450:	dc07      	bgt.n	8002462 <__sflush_r+0xf6>
 8002452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800245a:	f04f 30ff 	mov.w	r0, #4294967295
 800245e:	81a3      	strh	r3, [r4, #12]
 8002460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002462:	4407      	add	r7, r0
 8002464:	1a36      	subs	r6, r6, r0
 8002466:	e7e9      	b.n	800243c <__sflush_r+0xd0>
 8002468:	dfbffffe 	.word	0xdfbffffe

0800246c <_fflush_r>:
 800246c:	b538      	push	{r3, r4, r5, lr}
 800246e:	690b      	ldr	r3, [r1, #16]
 8002470:	4605      	mov	r5, r0
 8002472:	460c      	mov	r4, r1
 8002474:	b913      	cbnz	r3, 800247c <_fflush_r+0x10>
 8002476:	2500      	movs	r5, #0
 8002478:	4628      	mov	r0, r5
 800247a:	bd38      	pop	{r3, r4, r5, pc}
 800247c:	b118      	cbz	r0, 8002486 <_fflush_r+0x1a>
 800247e:	6a03      	ldr	r3, [r0, #32]
 8002480:	b90b      	cbnz	r3, 8002486 <_fflush_r+0x1a>
 8002482:	f7ff fe07 	bl	8002094 <__sinit>
 8002486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f3      	beq.n	8002476 <_fflush_r+0xa>
 800248e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002490:	07d0      	lsls	r0, r2, #31
 8002492:	d404      	bmi.n	800249e <_fflush_r+0x32>
 8002494:	0599      	lsls	r1, r3, #22
 8002496:	d402      	bmi.n	800249e <_fflush_r+0x32>
 8002498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800249a:	f7ff fefe 	bl	800229a <__retarget_lock_acquire_recursive>
 800249e:	4628      	mov	r0, r5
 80024a0:	4621      	mov	r1, r4
 80024a2:	f7ff ff63 	bl	800236c <__sflush_r>
 80024a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80024a8:	4605      	mov	r5, r0
 80024aa:	07da      	lsls	r2, r3, #31
 80024ac:	d4e4      	bmi.n	8002478 <_fflush_r+0xc>
 80024ae:	89a3      	ldrh	r3, [r4, #12]
 80024b0:	059b      	lsls	r3, r3, #22
 80024b2:	d4e1      	bmi.n	8002478 <_fflush_r+0xc>
 80024b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80024b6:	f7ff fef1 	bl	800229c <__retarget_lock_release_recursive>
 80024ba:	e7dd      	b.n	8002478 <_fflush_r+0xc>

080024bc <fiprintf>:
 80024bc:	b40e      	push	{r1, r2, r3}
 80024be:	b503      	push	{r0, r1, lr}
 80024c0:	4601      	mov	r1, r0
 80024c2:	ab03      	add	r3, sp, #12
 80024c4:	4805      	ldr	r0, [pc, #20]	@ (80024dc <fiprintf+0x20>)
 80024c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80024ca:	6800      	ldr	r0, [r0, #0]
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	f000 f835 	bl	800253c <_vfiprintf_r>
 80024d2:	b002      	add	sp, #8
 80024d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80024d8:	b003      	add	sp, #12
 80024da:	4770      	bx	lr
 80024dc:	2000001c 	.word	0x2000001c

080024e0 <abort>:
 80024e0:	2006      	movs	r0, #6
 80024e2:	b508      	push	{r3, lr}
 80024e4:	f000 fb90 	bl	8002c08 <raise>
 80024e8:	2001      	movs	r0, #1
 80024ea:	f7fe fbec 	bl	8000cc6 <_exit>

080024ee <__sfputc_r>:
 80024ee:	6893      	ldr	r3, [r2, #8]
 80024f0:	b410      	push	{r4}
 80024f2:	3b01      	subs	r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	6093      	str	r3, [r2, #8]
 80024f8:	da07      	bge.n	800250a <__sfputc_r+0x1c>
 80024fa:	6994      	ldr	r4, [r2, #24]
 80024fc:	42a3      	cmp	r3, r4
 80024fe:	db01      	blt.n	8002504 <__sfputc_r+0x16>
 8002500:	290a      	cmp	r1, #10
 8002502:	d102      	bne.n	800250a <__sfputc_r+0x1c>
 8002504:	bc10      	pop	{r4}
 8002506:	f000 bac3 	b.w	8002a90 <__swbuf_r>
 800250a:	6813      	ldr	r3, [r2, #0]
 800250c:	1c58      	adds	r0, r3, #1
 800250e:	6010      	str	r0, [r2, #0]
 8002510:	7019      	strb	r1, [r3, #0]
 8002512:	4608      	mov	r0, r1
 8002514:	bc10      	pop	{r4}
 8002516:	4770      	bx	lr

08002518 <__sfputs_r>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	4606      	mov	r6, r0
 800251c:	460f      	mov	r7, r1
 800251e:	4614      	mov	r4, r2
 8002520:	18d5      	adds	r5, r2, r3
 8002522:	42ac      	cmp	r4, r5
 8002524:	d101      	bne.n	800252a <__sfputs_r+0x12>
 8002526:	2000      	movs	r0, #0
 8002528:	e007      	b.n	800253a <__sfputs_r+0x22>
 800252a:	463a      	mov	r2, r7
 800252c:	4630      	mov	r0, r6
 800252e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002532:	f7ff ffdc 	bl	80024ee <__sfputc_r>
 8002536:	1c43      	adds	r3, r0, #1
 8002538:	d1f3      	bne.n	8002522 <__sfputs_r+0xa>
 800253a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800253c <_vfiprintf_r>:
 800253c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002540:	460d      	mov	r5, r1
 8002542:	4614      	mov	r4, r2
 8002544:	4698      	mov	r8, r3
 8002546:	4606      	mov	r6, r0
 8002548:	b09d      	sub	sp, #116	@ 0x74
 800254a:	b118      	cbz	r0, 8002554 <_vfiprintf_r+0x18>
 800254c:	6a03      	ldr	r3, [r0, #32]
 800254e:	b90b      	cbnz	r3, 8002554 <_vfiprintf_r+0x18>
 8002550:	f7ff fda0 	bl	8002094 <__sinit>
 8002554:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002556:	07d9      	lsls	r1, r3, #31
 8002558:	d405      	bmi.n	8002566 <_vfiprintf_r+0x2a>
 800255a:	89ab      	ldrh	r3, [r5, #12]
 800255c:	059a      	lsls	r2, r3, #22
 800255e:	d402      	bmi.n	8002566 <_vfiprintf_r+0x2a>
 8002560:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002562:	f7ff fe9a 	bl	800229a <__retarget_lock_acquire_recursive>
 8002566:	89ab      	ldrh	r3, [r5, #12]
 8002568:	071b      	lsls	r3, r3, #28
 800256a:	d501      	bpl.n	8002570 <_vfiprintf_r+0x34>
 800256c:	692b      	ldr	r3, [r5, #16]
 800256e:	b99b      	cbnz	r3, 8002598 <_vfiprintf_r+0x5c>
 8002570:	4629      	mov	r1, r5
 8002572:	4630      	mov	r0, r6
 8002574:	f000 faca 	bl	8002b0c <__swsetup_r>
 8002578:	b170      	cbz	r0, 8002598 <_vfiprintf_r+0x5c>
 800257a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800257c:	07dc      	lsls	r4, r3, #31
 800257e:	d504      	bpl.n	800258a <_vfiprintf_r+0x4e>
 8002580:	f04f 30ff 	mov.w	r0, #4294967295
 8002584:	b01d      	add	sp, #116	@ 0x74
 8002586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800258a:	89ab      	ldrh	r3, [r5, #12]
 800258c:	0598      	lsls	r0, r3, #22
 800258e:	d4f7      	bmi.n	8002580 <_vfiprintf_r+0x44>
 8002590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002592:	f7ff fe83 	bl	800229c <__retarget_lock_release_recursive>
 8002596:	e7f3      	b.n	8002580 <_vfiprintf_r+0x44>
 8002598:	2300      	movs	r3, #0
 800259a:	9309      	str	r3, [sp, #36]	@ 0x24
 800259c:	2320      	movs	r3, #32
 800259e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80025a2:	2330      	movs	r3, #48	@ 0x30
 80025a4:	f04f 0901 	mov.w	r9, #1
 80025a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80025ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002758 <_vfiprintf_r+0x21c>
 80025b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80025b4:	4623      	mov	r3, r4
 80025b6:	469a      	mov	sl, r3
 80025b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025bc:	b10a      	cbz	r2, 80025c2 <_vfiprintf_r+0x86>
 80025be:	2a25      	cmp	r2, #37	@ 0x25
 80025c0:	d1f9      	bne.n	80025b6 <_vfiprintf_r+0x7a>
 80025c2:	ebba 0b04 	subs.w	fp, sl, r4
 80025c6:	d00b      	beq.n	80025e0 <_vfiprintf_r+0xa4>
 80025c8:	465b      	mov	r3, fp
 80025ca:	4622      	mov	r2, r4
 80025cc:	4629      	mov	r1, r5
 80025ce:	4630      	mov	r0, r6
 80025d0:	f7ff ffa2 	bl	8002518 <__sfputs_r>
 80025d4:	3001      	adds	r0, #1
 80025d6:	f000 80a7 	beq.w	8002728 <_vfiprintf_r+0x1ec>
 80025da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80025dc:	445a      	add	r2, fp
 80025de:	9209      	str	r2, [sp, #36]	@ 0x24
 80025e0:	f89a 3000 	ldrb.w	r3, [sl]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 809f 	beq.w	8002728 <_vfiprintf_r+0x1ec>
 80025ea:	2300      	movs	r3, #0
 80025ec:	f04f 32ff 	mov.w	r2, #4294967295
 80025f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025f4:	f10a 0a01 	add.w	sl, sl, #1
 80025f8:	9304      	str	r3, [sp, #16]
 80025fa:	9307      	str	r3, [sp, #28]
 80025fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002600:	931a      	str	r3, [sp, #104]	@ 0x68
 8002602:	4654      	mov	r4, sl
 8002604:	2205      	movs	r2, #5
 8002606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800260a:	4853      	ldr	r0, [pc, #332]	@ (8002758 <_vfiprintf_r+0x21c>)
 800260c:	f000 fb18 	bl	8002c40 <memchr>
 8002610:	9a04      	ldr	r2, [sp, #16]
 8002612:	b9d8      	cbnz	r0, 800264c <_vfiprintf_r+0x110>
 8002614:	06d1      	lsls	r1, r2, #27
 8002616:	bf44      	itt	mi
 8002618:	2320      	movmi	r3, #32
 800261a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800261e:	0713      	lsls	r3, r2, #28
 8002620:	bf44      	itt	mi
 8002622:	232b      	movmi	r3, #43	@ 0x2b
 8002624:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002628:	f89a 3000 	ldrb.w	r3, [sl]
 800262c:	2b2a      	cmp	r3, #42	@ 0x2a
 800262e:	d015      	beq.n	800265c <_vfiprintf_r+0x120>
 8002630:	4654      	mov	r4, sl
 8002632:	2000      	movs	r0, #0
 8002634:	f04f 0c0a 	mov.w	ip, #10
 8002638:	9a07      	ldr	r2, [sp, #28]
 800263a:	4621      	mov	r1, r4
 800263c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002640:	3b30      	subs	r3, #48	@ 0x30
 8002642:	2b09      	cmp	r3, #9
 8002644:	d94b      	bls.n	80026de <_vfiprintf_r+0x1a2>
 8002646:	b1b0      	cbz	r0, 8002676 <_vfiprintf_r+0x13a>
 8002648:	9207      	str	r2, [sp, #28]
 800264a:	e014      	b.n	8002676 <_vfiprintf_r+0x13a>
 800264c:	eba0 0308 	sub.w	r3, r0, r8
 8002650:	fa09 f303 	lsl.w	r3, r9, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	46a2      	mov	sl, r4
 8002658:	9304      	str	r3, [sp, #16]
 800265a:	e7d2      	b.n	8002602 <_vfiprintf_r+0xc6>
 800265c:	9b03      	ldr	r3, [sp, #12]
 800265e:	1d19      	adds	r1, r3, #4
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	9103      	str	r1, [sp, #12]
 8002664:	2b00      	cmp	r3, #0
 8002666:	bfbb      	ittet	lt
 8002668:	425b      	neglt	r3, r3
 800266a:	f042 0202 	orrlt.w	r2, r2, #2
 800266e:	9307      	strge	r3, [sp, #28]
 8002670:	9307      	strlt	r3, [sp, #28]
 8002672:	bfb8      	it	lt
 8002674:	9204      	strlt	r2, [sp, #16]
 8002676:	7823      	ldrb	r3, [r4, #0]
 8002678:	2b2e      	cmp	r3, #46	@ 0x2e
 800267a:	d10a      	bne.n	8002692 <_vfiprintf_r+0x156>
 800267c:	7863      	ldrb	r3, [r4, #1]
 800267e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002680:	d132      	bne.n	80026e8 <_vfiprintf_r+0x1ac>
 8002682:	9b03      	ldr	r3, [sp, #12]
 8002684:	3402      	adds	r4, #2
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	9203      	str	r2, [sp, #12]
 800268c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002690:	9305      	str	r3, [sp, #20]
 8002692:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800275c <_vfiprintf_r+0x220>
 8002696:	2203      	movs	r2, #3
 8002698:	4650      	mov	r0, sl
 800269a:	7821      	ldrb	r1, [r4, #0]
 800269c:	f000 fad0 	bl	8002c40 <memchr>
 80026a0:	b138      	cbz	r0, 80026b2 <_vfiprintf_r+0x176>
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	9b04      	ldr	r3, [sp, #16]
 80026a6:	eba0 000a 	sub.w	r0, r0, sl
 80026aa:	4082      	lsls	r2, r0
 80026ac:	4313      	orrs	r3, r2
 80026ae:	3401      	adds	r4, #1
 80026b0:	9304      	str	r3, [sp, #16]
 80026b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026b6:	2206      	movs	r2, #6
 80026b8:	4829      	ldr	r0, [pc, #164]	@ (8002760 <_vfiprintf_r+0x224>)
 80026ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80026be:	f000 fabf 	bl	8002c40 <memchr>
 80026c2:	2800      	cmp	r0, #0
 80026c4:	d03f      	beq.n	8002746 <_vfiprintf_r+0x20a>
 80026c6:	4b27      	ldr	r3, [pc, #156]	@ (8002764 <_vfiprintf_r+0x228>)
 80026c8:	bb1b      	cbnz	r3, 8002712 <_vfiprintf_r+0x1d6>
 80026ca:	9b03      	ldr	r3, [sp, #12]
 80026cc:	3307      	adds	r3, #7
 80026ce:	f023 0307 	bic.w	r3, r3, #7
 80026d2:	3308      	adds	r3, #8
 80026d4:	9303      	str	r3, [sp, #12]
 80026d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80026d8:	443b      	add	r3, r7
 80026da:	9309      	str	r3, [sp, #36]	@ 0x24
 80026dc:	e76a      	b.n	80025b4 <_vfiprintf_r+0x78>
 80026de:	460c      	mov	r4, r1
 80026e0:	2001      	movs	r0, #1
 80026e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80026e6:	e7a8      	b.n	800263a <_vfiprintf_r+0xfe>
 80026e8:	2300      	movs	r3, #0
 80026ea:	f04f 0c0a 	mov.w	ip, #10
 80026ee:	4619      	mov	r1, r3
 80026f0:	3401      	adds	r4, #1
 80026f2:	9305      	str	r3, [sp, #20]
 80026f4:	4620      	mov	r0, r4
 80026f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026fa:	3a30      	subs	r2, #48	@ 0x30
 80026fc:	2a09      	cmp	r2, #9
 80026fe:	d903      	bls.n	8002708 <_vfiprintf_r+0x1cc>
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0c6      	beq.n	8002692 <_vfiprintf_r+0x156>
 8002704:	9105      	str	r1, [sp, #20]
 8002706:	e7c4      	b.n	8002692 <_vfiprintf_r+0x156>
 8002708:	4604      	mov	r4, r0
 800270a:	2301      	movs	r3, #1
 800270c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002710:	e7f0      	b.n	80026f4 <_vfiprintf_r+0x1b8>
 8002712:	ab03      	add	r3, sp, #12
 8002714:	9300      	str	r3, [sp, #0]
 8002716:	462a      	mov	r2, r5
 8002718:	4630      	mov	r0, r6
 800271a:	4b13      	ldr	r3, [pc, #76]	@ (8002768 <_vfiprintf_r+0x22c>)
 800271c:	a904      	add	r1, sp, #16
 800271e:	f3af 8000 	nop.w
 8002722:	4607      	mov	r7, r0
 8002724:	1c78      	adds	r0, r7, #1
 8002726:	d1d6      	bne.n	80026d6 <_vfiprintf_r+0x19a>
 8002728:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800272a:	07d9      	lsls	r1, r3, #31
 800272c:	d405      	bmi.n	800273a <_vfiprintf_r+0x1fe>
 800272e:	89ab      	ldrh	r3, [r5, #12]
 8002730:	059a      	lsls	r2, r3, #22
 8002732:	d402      	bmi.n	800273a <_vfiprintf_r+0x1fe>
 8002734:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002736:	f7ff fdb1 	bl	800229c <__retarget_lock_release_recursive>
 800273a:	89ab      	ldrh	r3, [r5, #12]
 800273c:	065b      	lsls	r3, r3, #25
 800273e:	f53f af1f 	bmi.w	8002580 <_vfiprintf_r+0x44>
 8002742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002744:	e71e      	b.n	8002584 <_vfiprintf_r+0x48>
 8002746:	ab03      	add	r3, sp, #12
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	462a      	mov	r2, r5
 800274c:	4630      	mov	r0, r6
 800274e:	4b06      	ldr	r3, [pc, #24]	@ (8002768 <_vfiprintf_r+0x22c>)
 8002750:	a904      	add	r1, sp, #16
 8002752:	f000 f87d 	bl	8002850 <_printf_i>
 8002756:	e7e4      	b.n	8002722 <_vfiprintf_r+0x1e6>
 8002758:	08002e49 	.word	0x08002e49
 800275c:	08002e4f 	.word	0x08002e4f
 8002760:	08002e53 	.word	0x08002e53
 8002764:	00000000 	.word	0x00000000
 8002768:	08002519 	.word	0x08002519

0800276c <_printf_common>:
 800276c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002770:	4616      	mov	r6, r2
 8002772:	4698      	mov	r8, r3
 8002774:	688a      	ldr	r2, [r1, #8]
 8002776:	690b      	ldr	r3, [r1, #16]
 8002778:	4607      	mov	r7, r0
 800277a:	4293      	cmp	r3, r2
 800277c:	bfb8      	it	lt
 800277e:	4613      	movlt	r3, r2
 8002780:	6033      	str	r3, [r6, #0]
 8002782:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002786:	460c      	mov	r4, r1
 8002788:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800278c:	b10a      	cbz	r2, 8002792 <_printf_common+0x26>
 800278e:	3301      	adds	r3, #1
 8002790:	6033      	str	r3, [r6, #0]
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	0699      	lsls	r1, r3, #26
 8002796:	bf42      	ittt	mi
 8002798:	6833      	ldrmi	r3, [r6, #0]
 800279a:	3302      	addmi	r3, #2
 800279c:	6033      	strmi	r3, [r6, #0]
 800279e:	6825      	ldr	r5, [r4, #0]
 80027a0:	f015 0506 	ands.w	r5, r5, #6
 80027a4:	d106      	bne.n	80027b4 <_printf_common+0x48>
 80027a6:	f104 0a19 	add.w	sl, r4, #25
 80027aa:	68e3      	ldr	r3, [r4, #12]
 80027ac:	6832      	ldr	r2, [r6, #0]
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	42ab      	cmp	r3, r5
 80027b2:	dc2b      	bgt.n	800280c <_printf_common+0xa0>
 80027b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80027b8:	6822      	ldr	r2, [r4, #0]
 80027ba:	3b00      	subs	r3, #0
 80027bc:	bf18      	it	ne
 80027be:	2301      	movne	r3, #1
 80027c0:	0692      	lsls	r2, r2, #26
 80027c2:	d430      	bmi.n	8002826 <_printf_common+0xba>
 80027c4:	4641      	mov	r1, r8
 80027c6:	4638      	mov	r0, r7
 80027c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80027cc:	47c8      	blx	r9
 80027ce:	3001      	adds	r0, #1
 80027d0:	d023      	beq.n	800281a <_printf_common+0xae>
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	6922      	ldr	r2, [r4, #16]
 80027d6:	f003 0306 	and.w	r3, r3, #6
 80027da:	2b04      	cmp	r3, #4
 80027dc:	bf14      	ite	ne
 80027de:	2500      	movne	r5, #0
 80027e0:	6833      	ldreq	r3, [r6, #0]
 80027e2:	f04f 0600 	mov.w	r6, #0
 80027e6:	bf08      	it	eq
 80027e8:	68e5      	ldreq	r5, [r4, #12]
 80027ea:	f104 041a 	add.w	r4, r4, #26
 80027ee:	bf08      	it	eq
 80027f0:	1aed      	subeq	r5, r5, r3
 80027f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80027f6:	bf08      	it	eq
 80027f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027fc:	4293      	cmp	r3, r2
 80027fe:	bfc4      	itt	gt
 8002800:	1a9b      	subgt	r3, r3, r2
 8002802:	18ed      	addgt	r5, r5, r3
 8002804:	42b5      	cmp	r5, r6
 8002806:	d11a      	bne.n	800283e <_printf_common+0xd2>
 8002808:	2000      	movs	r0, #0
 800280a:	e008      	b.n	800281e <_printf_common+0xb2>
 800280c:	2301      	movs	r3, #1
 800280e:	4652      	mov	r2, sl
 8002810:	4641      	mov	r1, r8
 8002812:	4638      	mov	r0, r7
 8002814:	47c8      	blx	r9
 8002816:	3001      	adds	r0, #1
 8002818:	d103      	bne.n	8002822 <_printf_common+0xb6>
 800281a:	f04f 30ff 	mov.w	r0, #4294967295
 800281e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002822:	3501      	adds	r5, #1
 8002824:	e7c1      	b.n	80027aa <_printf_common+0x3e>
 8002826:	2030      	movs	r0, #48	@ 0x30
 8002828:	18e1      	adds	r1, r4, r3
 800282a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002834:	4422      	add	r2, r4
 8002836:	3302      	adds	r3, #2
 8002838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800283c:	e7c2      	b.n	80027c4 <_printf_common+0x58>
 800283e:	2301      	movs	r3, #1
 8002840:	4622      	mov	r2, r4
 8002842:	4641      	mov	r1, r8
 8002844:	4638      	mov	r0, r7
 8002846:	47c8      	blx	r9
 8002848:	3001      	adds	r0, #1
 800284a:	d0e6      	beq.n	800281a <_printf_common+0xae>
 800284c:	3601      	adds	r6, #1
 800284e:	e7d9      	b.n	8002804 <_printf_common+0x98>

08002850 <_printf_i>:
 8002850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	7e0f      	ldrb	r7, [r1, #24]
 8002856:	4691      	mov	r9, r2
 8002858:	2f78      	cmp	r7, #120	@ 0x78
 800285a:	4680      	mov	r8, r0
 800285c:	460c      	mov	r4, r1
 800285e:	469a      	mov	sl, r3
 8002860:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002866:	d807      	bhi.n	8002878 <_printf_i+0x28>
 8002868:	2f62      	cmp	r7, #98	@ 0x62
 800286a:	d80a      	bhi.n	8002882 <_printf_i+0x32>
 800286c:	2f00      	cmp	r7, #0
 800286e:	f000 80d3 	beq.w	8002a18 <_printf_i+0x1c8>
 8002872:	2f58      	cmp	r7, #88	@ 0x58
 8002874:	f000 80ba 	beq.w	80029ec <_printf_i+0x19c>
 8002878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800287c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002880:	e03a      	b.n	80028f8 <_printf_i+0xa8>
 8002882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002886:	2b15      	cmp	r3, #21
 8002888:	d8f6      	bhi.n	8002878 <_printf_i+0x28>
 800288a:	a101      	add	r1, pc, #4	@ (adr r1, 8002890 <_printf_i+0x40>)
 800288c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002890:	080028e9 	.word	0x080028e9
 8002894:	080028fd 	.word	0x080028fd
 8002898:	08002879 	.word	0x08002879
 800289c:	08002879 	.word	0x08002879
 80028a0:	08002879 	.word	0x08002879
 80028a4:	08002879 	.word	0x08002879
 80028a8:	080028fd 	.word	0x080028fd
 80028ac:	08002879 	.word	0x08002879
 80028b0:	08002879 	.word	0x08002879
 80028b4:	08002879 	.word	0x08002879
 80028b8:	08002879 	.word	0x08002879
 80028bc:	080029ff 	.word	0x080029ff
 80028c0:	08002927 	.word	0x08002927
 80028c4:	080029b9 	.word	0x080029b9
 80028c8:	08002879 	.word	0x08002879
 80028cc:	08002879 	.word	0x08002879
 80028d0:	08002a21 	.word	0x08002a21
 80028d4:	08002879 	.word	0x08002879
 80028d8:	08002927 	.word	0x08002927
 80028dc:	08002879 	.word	0x08002879
 80028e0:	08002879 	.word	0x08002879
 80028e4:	080029c1 	.word	0x080029c1
 80028e8:	6833      	ldr	r3, [r6, #0]
 80028ea:	1d1a      	adds	r2, r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6032      	str	r2, [r6, #0]
 80028f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80028f8:	2301      	movs	r3, #1
 80028fa:	e09e      	b.n	8002a3a <_printf_i+0x1ea>
 80028fc:	6833      	ldr	r3, [r6, #0]
 80028fe:	6820      	ldr	r0, [r4, #0]
 8002900:	1d19      	adds	r1, r3, #4
 8002902:	6031      	str	r1, [r6, #0]
 8002904:	0606      	lsls	r6, r0, #24
 8002906:	d501      	bpl.n	800290c <_printf_i+0xbc>
 8002908:	681d      	ldr	r5, [r3, #0]
 800290a:	e003      	b.n	8002914 <_printf_i+0xc4>
 800290c:	0645      	lsls	r5, r0, #25
 800290e:	d5fb      	bpl.n	8002908 <_printf_i+0xb8>
 8002910:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002914:	2d00      	cmp	r5, #0
 8002916:	da03      	bge.n	8002920 <_printf_i+0xd0>
 8002918:	232d      	movs	r3, #45	@ 0x2d
 800291a:	426d      	negs	r5, r5
 800291c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002920:	230a      	movs	r3, #10
 8002922:	4859      	ldr	r0, [pc, #356]	@ (8002a88 <_printf_i+0x238>)
 8002924:	e011      	b.n	800294a <_printf_i+0xfa>
 8002926:	6821      	ldr	r1, [r4, #0]
 8002928:	6833      	ldr	r3, [r6, #0]
 800292a:	0608      	lsls	r0, r1, #24
 800292c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002930:	d402      	bmi.n	8002938 <_printf_i+0xe8>
 8002932:	0649      	lsls	r1, r1, #25
 8002934:	bf48      	it	mi
 8002936:	b2ad      	uxthmi	r5, r5
 8002938:	2f6f      	cmp	r7, #111	@ 0x6f
 800293a:	6033      	str	r3, [r6, #0]
 800293c:	bf14      	ite	ne
 800293e:	230a      	movne	r3, #10
 8002940:	2308      	moveq	r3, #8
 8002942:	4851      	ldr	r0, [pc, #324]	@ (8002a88 <_printf_i+0x238>)
 8002944:	2100      	movs	r1, #0
 8002946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800294a:	6866      	ldr	r6, [r4, #4]
 800294c:	2e00      	cmp	r6, #0
 800294e:	bfa8      	it	ge
 8002950:	6821      	ldrge	r1, [r4, #0]
 8002952:	60a6      	str	r6, [r4, #8]
 8002954:	bfa4      	itt	ge
 8002956:	f021 0104 	bicge.w	r1, r1, #4
 800295a:	6021      	strge	r1, [r4, #0]
 800295c:	b90d      	cbnz	r5, 8002962 <_printf_i+0x112>
 800295e:	2e00      	cmp	r6, #0
 8002960:	d04b      	beq.n	80029fa <_printf_i+0x1aa>
 8002962:	4616      	mov	r6, r2
 8002964:	fbb5 f1f3 	udiv	r1, r5, r3
 8002968:	fb03 5711 	mls	r7, r3, r1, r5
 800296c:	5dc7      	ldrb	r7, [r0, r7]
 800296e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002972:	462f      	mov	r7, r5
 8002974:	42bb      	cmp	r3, r7
 8002976:	460d      	mov	r5, r1
 8002978:	d9f4      	bls.n	8002964 <_printf_i+0x114>
 800297a:	2b08      	cmp	r3, #8
 800297c:	d10b      	bne.n	8002996 <_printf_i+0x146>
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	07df      	lsls	r7, r3, #31
 8002982:	d508      	bpl.n	8002996 <_printf_i+0x146>
 8002984:	6923      	ldr	r3, [r4, #16]
 8002986:	6861      	ldr	r1, [r4, #4]
 8002988:	4299      	cmp	r1, r3
 800298a:	bfde      	ittt	le
 800298c:	2330      	movle	r3, #48	@ 0x30
 800298e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002992:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002996:	1b92      	subs	r2, r2, r6
 8002998:	6122      	str	r2, [r4, #16]
 800299a:	464b      	mov	r3, r9
 800299c:	4621      	mov	r1, r4
 800299e:	4640      	mov	r0, r8
 80029a0:	f8cd a000 	str.w	sl, [sp]
 80029a4:	aa03      	add	r2, sp, #12
 80029a6:	f7ff fee1 	bl	800276c <_printf_common>
 80029aa:	3001      	adds	r0, #1
 80029ac:	d14a      	bne.n	8002a44 <_printf_i+0x1f4>
 80029ae:	f04f 30ff 	mov.w	r0, #4294967295
 80029b2:	b004      	add	sp, #16
 80029b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	f043 0320 	orr.w	r3, r3, #32
 80029be:	6023      	str	r3, [r4, #0]
 80029c0:	2778      	movs	r7, #120	@ 0x78
 80029c2:	4832      	ldr	r0, [pc, #200]	@ (8002a8c <_printf_i+0x23c>)
 80029c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80029c8:	6823      	ldr	r3, [r4, #0]
 80029ca:	6831      	ldr	r1, [r6, #0]
 80029cc:	061f      	lsls	r7, r3, #24
 80029ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80029d2:	d402      	bmi.n	80029da <_printf_i+0x18a>
 80029d4:	065f      	lsls	r7, r3, #25
 80029d6:	bf48      	it	mi
 80029d8:	b2ad      	uxthmi	r5, r5
 80029da:	6031      	str	r1, [r6, #0]
 80029dc:	07d9      	lsls	r1, r3, #31
 80029de:	bf44      	itt	mi
 80029e0:	f043 0320 	orrmi.w	r3, r3, #32
 80029e4:	6023      	strmi	r3, [r4, #0]
 80029e6:	b11d      	cbz	r5, 80029f0 <_printf_i+0x1a0>
 80029e8:	2310      	movs	r3, #16
 80029ea:	e7ab      	b.n	8002944 <_printf_i+0xf4>
 80029ec:	4826      	ldr	r0, [pc, #152]	@ (8002a88 <_printf_i+0x238>)
 80029ee:	e7e9      	b.n	80029c4 <_printf_i+0x174>
 80029f0:	6823      	ldr	r3, [r4, #0]
 80029f2:	f023 0320 	bic.w	r3, r3, #32
 80029f6:	6023      	str	r3, [r4, #0]
 80029f8:	e7f6      	b.n	80029e8 <_printf_i+0x198>
 80029fa:	4616      	mov	r6, r2
 80029fc:	e7bd      	b.n	800297a <_printf_i+0x12a>
 80029fe:	6833      	ldr	r3, [r6, #0]
 8002a00:	6825      	ldr	r5, [r4, #0]
 8002a02:	1d18      	adds	r0, r3, #4
 8002a04:	6961      	ldr	r1, [r4, #20]
 8002a06:	6030      	str	r0, [r6, #0]
 8002a08:	062e      	lsls	r6, r5, #24
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	d501      	bpl.n	8002a12 <_printf_i+0x1c2>
 8002a0e:	6019      	str	r1, [r3, #0]
 8002a10:	e002      	b.n	8002a18 <_printf_i+0x1c8>
 8002a12:	0668      	lsls	r0, r5, #25
 8002a14:	d5fb      	bpl.n	8002a0e <_printf_i+0x1be>
 8002a16:	8019      	strh	r1, [r3, #0]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	4616      	mov	r6, r2
 8002a1c:	6123      	str	r3, [r4, #16]
 8002a1e:	e7bc      	b.n	800299a <_printf_i+0x14a>
 8002a20:	6833      	ldr	r3, [r6, #0]
 8002a22:	2100      	movs	r1, #0
 8002a24:	1d1a      	adds	r2, r3, #4
 8002a26:	6032      	str	r2, [r6, #0]
 8002a28:	681e      	ldr	r6, [r3, #0]
 8002a2a:	6862      	ldr	r2, [r4, #4]
 8002a2c:	4630      	mov	r0, r6
 8002a2e:	f000 f907 	bl	8002c40 <memchr>
 8002a32:	b108      	cbz	r0, 8002a38 <_printf_i+0x1e8>
 8002a34:	1b80      	subs	r0, r0, r6
 8002a36:	6060      	str	r0, [r4, #4]
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	6123      	str	r3, [r4, #16]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a42:	e7aa      	b.n	800299a <_printf_i+0x14a>
 8002a44:	4632      	mov	r2, r6
 8002a46:	4649      	mov	r1, r9
 8002a48:	4640      	mov	r0, r8
 8002a4a:	6923      	ldr	r3, [r4, #16]
 8002a4c:	47d0      	blx	sl
 8002a4e:	3001      	adds	r0, #1
 8002a50:	d0ad      	beq.n	80029ae <_printf_i+0x15e>
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	079b      	lsls	r3, r3, #30
 8002a56:	d413      	bmi.n	8002a80 <_printf_i+0x230>
 8002a58:	68e0      	ldr	r0, [r4, #12]
 8002a5a:	9b03      	ldr	r3, [sp, #12]
 8002a5c:	4298      	cmp	r0, r3
 8002a5e:	bfb8      	it	lt
 8002a60:	4618      	movlt	r0, r3
 8002a62:	e7a6      	b.n	80029b2 <_printf_i+0x162>
 8002a64:	2301      	movs	r3, #1
 8002a66:	4632      	mov	r2, r6
 8002a68:	4649      	mov	r1, r9
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	47d0      	blx	sl
 8002a6e:	3001      	adds	r0, #1
 8002a70:	d09d      	beq.n	80029ae <_printf_i+0x15e>
 8002a72:	3501      	adds	r5, #1
 8002a74:	68e3      	ldr	r3, [r4, #12]
 8002a76:	9903      	ldr	r1, [sp, #12]
 8002a78:	1a5b      	subs	r3, r3, r1
 8002a7a:	42ab      	cmp	r3, r5
 8002a7c:	dcf2      	bgt.n	8002a64 <_printf_i+0x214>
 8002a7e:	e7eb      	b.n	8002a58 <_printf_i+0x208>
 8002a80:	2500      	movs	r5, #0
 8002a82:	f104 0619 	add.w	r6, r4, #25
 8002a86:	e7f5      	b.n	8002a74 <_printf_i+0x224>
 8002a88:	08002e5a 	.word	0x08002e5a
 8002a8c:	08002e6b 	.word	0x08002e6b

08002a90 <__swbuf_r>:
 8002a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a92:	460e      	mov	r6, r1
 8002a94:	4614      	mov	r4, r2
 8002a96:	4605      	mov	r5, r0
 8002a98:	b118      	cbz	r0, 8002aa2 <__swbuf_r+0x12>
 8002a9a:	6a03      	ldr	r3, [r0, #32]
 8002a9c:	b90b      	cbnz	r3, 8002aa2 <__swbuf_r+0x12>
 8002a9e:	f7ff faf9 	bl	8002094 <__sinit>
 8002aa2:	69a3      	ldr	r3, [r4, #24]
 8002aa4:	60a3      	str	r3, [r4, #8]
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	071a      	lsls	r2, r3, #28
 8002aaa:	d501      	bpl.n	8002ab0 <__swbuf_r+0x20>
 8002aac:	6923      	ldr	r3, [r4, #16]
 8002aae:	b943      	cbnz	r3, 8002ac2 <__swbuf_r+0x32>
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f000 f82a 	bl	8002b0c <__swsetup_r>
 8002ab8:	b118      	cbz	r0, 8002ac2 <__swbuf_r+0x32>
 8002aba:	f04f 37ff 	mov.w	r7, #4294967295
 8002abe:	4638      	mov	r0, r7
 8002ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	6922      	ldr	r2, [r4, #16]
 8002ac6:	b2f6      	uxtb	r6, r6
 8002ac8:	1a98      	subs	r0, r3, r2
 8002aca:	6963      	ldr	r3, [r4, #20]
 8002acc:	4637      	mov	r7, r6
 8002ace:	4283      	cmp	r3, r0
 8002ad0:	dc05      	bgt.n	8002ade <__swbuf_r+0x4e>
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	f7ff fcc9 	bl	800246c <_fflush_r>
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d1ed      	bne.n	8002aba <__swbuf_r+0x2a>
 8002ade:	68a3      	ldr	r3, [r4, #8]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	60a3      	str	r3, [r4, #8]
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	1c5a      	adds	r2, r3, #1
 8002ae8:	6022      	str	r2, [r4, #0]
 8002aea:	701e      	strb	r6, [r3, #0]
 8002aec:	6962      	ldr	r2, [r4, #20]
 8002aee:	1c43      	adds	r3, r0, #1
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d004      	beq.n	8002afe <__swbuf_r+0x6e>
 8002af4:	89a3      	ldrh	r3, [r4, #12]
 8002af6:	07db      	lsls	r3, r3, #31
 8002af8:	d5e1      	bpl.n	8002abe <__swbuf_r+0x2e>
 8002afa:	2e0a      	cmp	r6, #10
 8002afc:	d1df      	bne.n	8002abe <__swbuf_r+0x2e>
 8002afe:	4621      	mov	r1, r4
 8002b00:	4628      	mov	r0, r5
 8002b02:	f7ff fcb3 	bl	800246c <_fflush_r>
 8002b06:	2800      	cmp	r0, #0
 8002b08:	d0d9      	beq.n	8002abe <__swbuf_r+0x2e>
 8002b0a:	e7d6      	b.n	8002aba <__swbuf_r+0x2a>

08002b0c <__swsetup_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	4b29      	ldr	r3, [pc, #164]	@ (8002bb4 <__swsetup_r+0xa8>)
 8002b10:	4605      	mov	r5, r0
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	460c      	mov	r4, r1
 8002b16:	b118      	cbz	r0, 8002b20 <__swsetup_r+0x14>
 8002b18:	6a03      	ldr	r3, [r0, #32]
 8002b1a:	b90b      	cbnz	r3, 8002b20 <__swsetup_r+0x14>
 8002b1c:	f7ff faba 	bl	8002094 <__sinit>
 8002b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b24:	0719      	lsls	r1, r3, #28
 8002b26:	d422      	bmi.n	8002b6e <__swsetup_r+0x62>
 8002b28:	06da      	lsls	r2, r3, #27
 8002b2a:	d407      	bmi.n	8002b3c <__swsetup_r+0x30>
 8002b2c:	2209      	movs	r2, #9
 8002b2e:	602a      	str	r2, [r5, #0]
 8002b30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	81a3      	strh	r3, [r4, #12]
 8002b3a:	e033      	b.n	8002ba4 <__swsetup_r+0x98>
 8002b3c:	0758      	lsls	r0, r3, #29
 8002b3e:	d512      	bpl.n	8002b66 <__swsetup_r+0x5a>
 8002b40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b42:	b141      	cbz	r1, 8002b56 <__swsetup_r+0x4a>
 8002b44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b48:	4299      	cmp	r1, r3
 8002b4a:	d002      	beq.n	8002b52 <__swsetup_r+0x46>
 8002b4c:	4628      	mov	r0, r5
 8002b4e:	f7ff fbc5 	bl	80022dc <_free_r>
 8002b52:	2300      	movs	r3, #0
 8002b54:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b56:	89a3      	ldrh	r3, [r4, #12]
 8002b58:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b5c:	81a3      	strh	r3, [r4, #12]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	6063      	str	r3, [r4, #4]
 8002b62:	6923      	ldr	r3, [r4, #16]
 8002b64:	6023      	str	r3, [r4, #0]
 8002b66:	89a3      	ldrh	r3, [r4, #12]
 8002b68:	f043 0308 	orr.w	r3, r3, #8
 8002b6c:	81a3      	strh	r3, [r4, #12]
 8002b6e:	6923      	ldr	r3, [r4, #16]
 8002b70:	b94b      	cbnz	r3, 8002b86 <__swsetup_r+0x7a>
 8002b72:	89a3      	ldrh	r3, [r4, #12]
 8002b74:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b7c:	d003      	beq.n	8002b86 <__swsetup_r+0x7a>
 8002b7e:	4621      	mov	r1, r4
 8002b80:	4628      	mov	r0, r5
 8002b82:	f000 f890 	bl	8002ca6 <__smakebuf_r>
 8002b86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b8a:	f013 0201 	ands.w	r2, r3, #1
 8002b8e:	d00a      	beq.n	8002ba6 <__swsetup_r+0x9a>
 8002b90:	2200      	movs	r2, #0
 8002b92:	60a2      	str	r2, [r4, #8]
 8002b94:	6962      	ldr	r2, [r4, #20]
 8002b96:	4252      	negs	r2, r2
 8002b98:	61a2      	str	r2, [r4, #24]
 8002b9a:	6922      	ldr	r2, [r4, #16]
 8002b9c:	b942      	cbnz	r2, 8002bb0 <__swsetup_r+0xa4>
 8002b9e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002ba2:	d1c5      	bne.n	8002b30 <__swsetup_r+0x24>
 8002ba4:	bd38      	pop	{r3, r4, r5, pc}
 8002ba6:	0799      	lsls	r1, r3, #30
 8002ba8:	bf58      	it	pl
 8002baa:	6962      	ldrpl	r2, [r4, #20]
 8002bac:	60a2      	str	r2, [r4, #8]
 8002bae:	e7f4      	b.n	8002b9a <__swsetup_r+0x8e>
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	e7f7      	b.n	8002ba4 <__swsetup_r+0x98>
 8002bb4:	2000001c 	.word	0x2000001c

08002bb8 <_raise_r>:
 8002bb8:	291f      	cmp	r1, #31
 8002bba:	b538      	push	{r3, r4, r5, lr}
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	460c      	mov	r4, r1
 8002bc0:	d904      	bls.n	8002bcc <_raise_r+0x14>
 8002bc2:	2316      	movs	r3, #22
 8002bc4:	6003      	str	r3, [r0, #0]
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	bd38      	pop	{r3, r4, r5, pc}
 8002bcc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002bce:	b112      	cbz	r2, 8002bd6 <_raise_r+0x1e>
 8002bd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002bd4:	b94b      	cbnz	r3, 8002bea <_raise_r+0x32>
 8002bd6:	4628      	mov	r0, r5
 8002bd8:	f000 f830 	bl	8002c3c <_getpid_r>
 8002bdc:	4622      	mov	r2, r4
 8002bde:	4601      	mov	r1, r0
 8002be0:	4628      	mov	r0, r5
 8002be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be6:	f000 b817 	b.w	8002c18 <_kill_r>
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d00a      	beq.n	8002c04 <_raise_r+0x4c>
 8002bee:	1c59      	adds	r1, r3, #1
 8002bf0:	d103      	bne.n	8002bfa <_raise_r+0x42>
 8002bf2:	2316      	movs	r3, #22
 8002bf4:	6003      	str	r3, [r0, #0]
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	e7e7      	b.n	8002bca <_raise_r+0x12>
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002c02:	4798      	blx	r3
 8002c04:	2000      	movs	r0, #0
 8002c06:	e7e0      	b.n	8002bca <_raise_r+0x12>

08002c08 <raise>:
 8002c08:	4b02      	ldr	r3, [pc, #8]	@ (8002c14 <raise+0xc>)
 8002c0a:	4601      	mov	r1, r0
 8002c0c:	6818      	ldr	r0, [r3, #0]
 8002c0e:	f7ff bfd3 	b.w	8002bb8 <_raise_r>
 8002c12:	bf00      	nop
 8002c14:	2000001c 	.word	0x2000001c

08002c18 <_kill_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	4d06      	ldr	r5, [pc, #24]	@ (8002c38 <_kill_r+0x20>)
 8002c1e:	4604      	mov	r4, r0
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	602b      	str	r3, [r5, #0]
 8002c26:	f7fe f83e 	bl	8000ca6 <_kill>
 8002c2a:	1c43      	adds	r3, r0, #1
 8002c2c:	d102      	bne.n	8002c34 <_kill_r+0x1c>
 8002c2e:	682b      	ldr	r3, [r5, #0]
 8002c30:	b103      	cbz	r3, 8002c34 <_kill_r+0x1c>
 8002c32:	6023      	str	r3, [r4, #0]
 8002c34:	bd38      	pop	{r3, r4, r5, pc}
 8002c36:	bf00      	nop
 8002c38:	20000234 	.word	0x20000234

08002c3c <_getpid_r>:
 8002c3c:	f7fe b82c 	b.w	8000c98 <_getpid>

08002c40 <memchr>:
 8002c40:	4603      	mov	r3, r0
 8002c42:	b510      	push	{r4, lr}
 8002c44:	b2c9      	uxtb	r1, r1
 8002c46:	4402      	add	r2, r0
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	d101      	bne.n	8002c52 <memchr+0x12>
 8002c4e:	2000      	movs	r0, #0
 8002c50:	e003      	b.n	8002c5a <memchr+0x1a>
 8002c52:	7804      	ldrb	r4, [r0, #0]
 8002c54:	3301      	adds	r3, #1
 8002c56:	428c      	cmp	r4, r1
 8002c58:	d1f6      	bne.n	8002c48 <memchr+0x8>
 8002c5a:	bd10      	pop	{r4, pc}

08002c5c <__swhatbuf_r>:
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	460c      	mov	r4, r1
 8002c60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c64:	4615      	mov	r5, r2
 8002c66:	2900      	cmp	r1, #0
 8002c68:	461e      	mov	r6, r3
 8002c6a:	b096      	sub	sp, #88	@ 0x58
 8002c6c:	da0c      	bge.n	8002c88 <__swhatbuf_r+0x2c>
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	2100      	movs	r1, #0
 8002c72:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002c76:	bf14      	ite	ne
 8002c78:	2340      	movne	r3, #64	@ 0x40
 8002c7a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002c7e:	2000      	movs	r0, #0
 8002c80:	6031      	str	r1, [r6, #0]
 8002c82:	602b      	str	r3, [r5, #0]
 8002c84:	b016      	add	sp, #88	@ 0x58
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	466a      	mov	r2, sp
 8002c8a:	f000 f849 	bl	8002d20 <_fstat_r>
 8002c8e:	2800      	cmp	r0, #0
 8002c90:	dbed      	blt.n	8002c6e <__swhatbuf_r+0x12>
 8002c92:	9901      	ldr	r1, [sp, #4]
 8002c94:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002c98:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002c9c:	4259      	negs	r1, r3
 8002c9e:	4159      	adcs	r1, r3
 8002ca0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ca4:	e7eb      	b.n	8002c7e <__swhatbuf_r+0x22>

08002ca6 <__smakebuf_r>:
 8002ca6:	898b      	ldrh	r3, [r1, #12]
 8002ca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002caa:	079d      	lsls	r5, r3, #30
 8002cac:	4606      	mov	r6, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	d507      	bpl.n	8002cc2 <__smakebuf_r+0x1c>
 8002cb2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002cb6:	6023      	str	r3, [r4, #0]
 8002cb8:	6123      	str	r3, [r4, #16]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	6163      	str	r3, [r4, #20]
 8002cbe:	b003      	add	sp, #12
 8002cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc2:	466a      	mov	r2, sp
 8002cc4:	ab01      	add	r3, sp, #4
 8002cc6:	f7ff ffc9 	bl	8002c5c <__swhatbuf_r>
 8002cca:	9f00      	ldr	r7, [sp, #0]
 8002ccc:	4605      	mov	r5, r0
 8002cce:	4639      	mov	r1, r7
 8002cd0:	4630      	mov	r0, r6
 8002cd2:	f7ff f85b 	bl	8001d8c <_malloc_r>
 8002cd6:	b948      	cbnz	r0, 8002cec <__smakebuf_r+0x46>
 8002cd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cdc:	059a      	lsls	r2, r3, #22
 8002cde:	d4ee      	bmi.n	8002cbe <__smakebuf_r+0x18>
 8002ce0:	f023 0303 	bic.w	r3, r3, #3
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	81a3      	strh	r3, [r4, #12]
 8002cea:	e7e2      	b.n	8002cb2 <__smakebuf_r+0xc>
 8002cec:	89a3      	ldrh	r3, [r4, #12]
 8002cee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cf6:	81a3      	strh	r3, [r4, #12]
 8002cf8:	9b01      	ldr	r3, [sp, #4]
 8002cfa:	6020      	str	r0, [r4, #0]
 8002cfc:	b15b      	cbz	r3, 8002d16 <__smakebuf_r+0x70>
 8002cfe:	4630      	mov	r0, r6
 8002d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d04:	f000 f81e 	bl	8002d44 <_isatty_r>
 8002d08:	b128      	cbz	r0, 8002d16 <__smakebuf_r+0x70>
 8002d0a:	89a3      	ldrh	r3, [r4, #12]
 8002d0c:	f023 0303 	bic.w	r3, r3, #3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	81a3      	strh	r3, [r4, #12]
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	431d      	orrs	r5, r3
 8002d1a:	81a5      	strh	r5, [r4, #12]
 8002d1c:	e7cf      	b.n	8002cbe <__smakebuf_r+0x18>
	...

08002d20 <_fstat_r>:
 8002d20:	b538      	push	{r3, r4, r5, lr}
 8002d22:	2300      	movs	r3, #0
 8002d24:	4d06      	ldr	r5, [pc, #24]	@ (8002d40 <_fstat_r+0x20>)
 8002d26:	4604      	mov	r4, r0
 8002d28:	4608      	mov	r0, r1
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	602b      	str	r3, [r5, #0]
 8002d2e:	f7fe f819 	bl	8000d64 <_fstat>
 8002d32:	1c43      	adds	r3, r0, #1
 8002d34:	d102      	bne.n	8002d3c <_fstat_r+0x1c>
 8002d36:	682b      	ldr	r3, [r5, #0]
 8002d38:	b103      	cbz	r3, 8002d3c <_fstat_r+0x1c>
 8002d3a:	6023      	str	r3, [r4, #0]
 8002d3c:	bd38      	pop	{r3, r4, r5, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000234 	.word	0x20000234

08002d44 <_isatty_r>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	2300      	movs	r3, #0
 8002d48:	4d05      	ldr	r5, [pc, #20]	@ (8002d60 <_isatty_r+0x1c>)
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	4608      	mov	r0, r1
 8002d4e:	602b      	str	r3, [r5, #0]
 8002d50:	f7fe f817 	bl	8000d82 <_isatty>
 8002d54:	1c43      	adds	r3, r0, #1
 8002d56:	d102      	bne.n	8002d5e <_isatty_r+0x1a>
 8002d58:	682b      	ldr	r3, [r5, #0]
 8002d5a:	b103      	cbz	r3, 8002d5e <_isatty_r+0x1a>
 8002d5c:	6023      	str	r3, [r4, #0]
 8002d5e:	bd38      	pop	{r3, r4, r5, pc}
 8002d60:	20000234 	.word	0x20000234

08002d64 <_init>:
 8002d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d66:	bf00      	nop
 8002d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6a:	bc08      	pop	{r3}
 8002d6c:	469e      	mov	lr, r3
 8002d6e:	4770      	bx	lr

08002d70 <_fini>:
 8002d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d72:	bf00      	nop
 8002d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d76:	bc08      	pop	{r3}
 8002d78:	469e      	mov	lr, r3
 8002d7a:	4770      	bx	lr
